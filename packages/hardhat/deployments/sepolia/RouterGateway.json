{
  "address": "0xA342D16d886f7208549aa6c99f1d61987E1BEd03",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aaveGateway",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "compoundGateway",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "v3vault",
          "type": "address"
        },
        {
          "internalType": "contract IFlashLoanProvider",
          "name": "v2Vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "balancerV2Vault",
      "outputs": [
        {
          "internalType": "contract IFlashLoanProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerV3Vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "gateways",
      "outputs": [
        {
          "internalType": "contract IGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGateway.Collateral[]",
          "name": "collaterals",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "fromProtocol",
          "type": "string"
        }
      ],
      "name": "getFromProtocolApprovalsForMove",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPossibleCollaterals",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "collateralAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "symbols",
          "type": "string[]"
        },
        {
          "internalType": "uint8[]",
          "name": "decimals",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "toProtocol",
          "type": "string"
        }
      ],
      "name": "getToProtocolApprovalsForMove",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "repayAll",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGateway.Collateral[]",
          "name": "collaterals",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "fromProtocol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "toProtocol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "flashLoanVersion",
          "type": "string"
        }
      ],
      "name": "moveDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "feeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "receiveFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGateway.Collateral[]",
          "name": "collaterals",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "fromProtocol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "toProtocol",
          "type": "string"
        }
      ],
      "name": "receiveFlashLoanV3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "supply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "supplyWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe4c3f497ace42740cc708fb6e42b5b510dd53a4d5f6dc8488eec87841d593d49",
  "receipt": {
    "to": null,
    "from": "0x58d21499B5A3374a486B3F412Cca43b76692eF15",
    "contractAddress": "0xA342D16d886f7208549aa6c99f1d61987E1BEd03",
    "transactionIndex": 76,
    "gasUsed": "2324433",
    "logsBloom": "0x
    "blockHash": "0x7df6007373df717d1d59e3715cf76b501c5eb453e3d9ce37c62651ddb9e23c26",
    "transactionHash": "0xe4c3f497ace42740cc708fb6e42b5b510dd53a4d5f6dc8488eec87841d593d49",
    "logs": [],
    "blockNumber": 7734784,
    "cumulativeGasUsed": "9108898",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x04A922BB66B7A1380b2089385490a44FC73F8086",
    "0xF021dD7C8FAda6a820eFCaDfc5d70C1230DcB15b",
    "0xbA1333333333a1BA1108E8412f11850A5C319bA9",
    "0xBA12222222228d8Ba445958a75a0704d566BF2C8"
  ],
  "numDeployments": 4,
  "solcInputHash": "211067cbe068ebd08488d53641c715de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aaveGateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compoundGateway\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"v3vault\",\"type\":\"address\"},{\"internalType\":\"contract IFlashLoanProvider\",\"name\":\"v2Vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"balancerV2Vault\",\"outputs\":[{\"internalType\":\"contract IFlashLoanProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerV3Vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gateways\",\"outputs\":[{\"internalType\":\"contract IGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGateway.Collateral[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"fromProtocol\",\"type\":\"string\"}],\"name\":\"getFromProtocolApprovalsForMove\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPossibleCollaterals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"collateralAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimals\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"toProtocol\",\"type\":\"string\"}],\"name\":\"getToProtocolApprovalsForMove\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"repayAll\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGateway.Collateral[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"fromProtocol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toProtocol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"flashLoanVersion\",\"type\":\"string\"}],\"name\":\"moveDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGateway.Collateral[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"fromProtocol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toProtocol\",\"type\":\"string\"}],\"name\":\"receiveFlashLoanV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"supplyWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RouterGateway.sol\":\"RouterGateway\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/RouterGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IGateway.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/balancer/IVault.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n// Interface for a v2\\u2013style flash loan provider (e.g. Balancer v2)\\ninterface IFlashLoanProvider {\\n    function flashLoan(\\n        address receiver,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata userData\\n    ) external;\\n}\\n\\ncontract RouterGateway {\\n    using SafeERC20 for IERC20;\\n\\n    // Mapping from protocol name to gateway contract\\n    mapping(string => IGateway) public gateways;\\n    IVault public balancerV3Vault;\\n    IFlashLoanProvider public balancerV2Vault;\\n    constructor(address aaveGateway, address compoundGateway, IVault v3vault, IFlashLoanProvider v2Vault) {\\n        gateways[\\\"aave\\\"] = IGateway(aaveGateway);\\n        gateways[\\\"compound\\\"] = IGateway(compoundGateway);\\n        gateways[\\\"compound v3\\\"] = IGateway(compoundGateway);\\n        gateways[\\\"aave v3\\\"] = IGateway(aaveGateway);\\n        balancerV3Vault = v3vault;\\n        balancerV2Vault = v2Vault;\\n    }\\n\\n    function supplyWithPermit(\\n        string calldata protocolName,\\n        address token,\\n        address user,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        // Get the gateway for the specified protocol\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n\\n        // Execute the permit\\n        IERC20Permit(token).permit(\\n            msg.sender,\\n            address(this),\\n            amount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        // Transfer tokens from user to this contract (no need for approval now)\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Approve gateway to spend tokens\\n        IERC20(token).approve(address(gateway), amount);\\n\\n        // Forward deposit call to the appropriate gateway\\n        gateway.deposit(token, user, amount);\\n    }\\n\\n    function supply(\\n        string calldata protocolName,\\n        address token,\\n        address user,\\n        uint256 amount\\n    ) external {\\n        // Get the gateway for the specified protocol\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n\\n        // Transfer tokens from user to this contract\\n        console.log(\\\"Transferring tokens from user to this contract\\\", amount);\\n        IERC20(token).safeTransferFrom(user, address(this), amount);\\n\\n        // Approve gateway to spend tokens\\n        console.log(\\\"Approving gateway to spend tokens\\\");\\n        IERC20(token).approve(address(gateway), amount);\\n\\n        // Forward deposit call to the appropriate gateway\\n        console.log(\\\"Forwarding deposit call to the appropriate gateway\\\");\\n        gateway.deposit(token, user, amount);\\n    }\\n\\n    function repay(\\n        string calldata protocolName,\\n        address token,\\n        address user,\\n        uint256 amount\\n    ) external {\\n        // Get the gateway for the specified protocol\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n\\n        // Transfer tokens from user to this contract\\n        console.log(\\\"Transferring tokens from user to this contract for repayment\\\", amount);\\n        IERC20(token).safeTransferFrom(user, address(this), amount);\\n\\n        // Approve gateway to spend tokens\\n        console.log(\\\"Approving gateway to spend tokens for repayment\\\");\\n        IERC20(token).approve(address(gateway), amount);\\n\\n        // Forward repay call to the appropriate gateway\\n        console.log(\\\"Forwarding repay call to the appropriate gateway\\\");\\n        gateway.repay(token, user, amount);\\n    }\\n\\n    function getBalance(\\n        string calldata protocolName,\\n        address token,\\n        address user\\n    ) external view returns (uint256) {\\n        // Get the gateway for the specified protocol\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n\\n        // Forward balance call to the appropriate gateway\\n        return gateway.getBalance(token, user);\\n    }\\n\\n    function getBorrowBalance(\\n        string calldata protocolName,\\n        address token,\\n        address user\\n    ) external view returns (uint256) {\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n        return gateway.getBorrowBalance(token, user);\\n    }\\n    \\n    // -------------------------------------------------------------------------\\n    // Common Debt Moving Logic (Flash Loan\\u2013agnostic)\\n    // -------------------------------------------------------------------------\\n    //\\n    // This internal function is completely unaware of any flash loan details.\\n    // It simply moves debt from one protocol to another:\\n    // 1. Repays the debt on the \\\"from\\\" protocol.\\n    // 2. Withdraws collateral from the \\\"from\\\" protocol.\\n    // 3. Deposits collateral into the \\\"to\\\" protocol.\\n    // 4. Borrows the same amount on the \\\"to\\\" protocol.\\n    //\\n    function _moveDebtCommon(\\n        address user,\\n        address debtToken,\\n        uint256 debtAmount,\\n        IGateway.Collateral[] memory collaterals,\\n        string memory fromProtocol,\\n        string memory toProtocol\\n    ) internal {\\n        IGateway fromGateway = gateways[fromProtocol];\\n        IGateway toGateway = gateways[toProtocol];\\n        require(address(fromGateway) != address(0), \\\"From protocol not supported\\\");\\n        require(address(toGateway) != address(0), \\\"To protocol not supported\\\");\\n\\n        // Repay the debt on the \\\"from\\\" protocol\\n        {\\n            IERC20(debtToken).approve(address(fromGateway), debtAmount);\\n            uint256 borrowBalanceBefore = fromGateway.getBorrowBalance(debtToken, user);\\n            fromGateway.repay(debtToken, user, debtAmount);\\n            uint256 borrowBalanceAfter = fromGateway.getBorrowBalance(debtToken, user);\\n            require(borrowBalanceAfter < borrowBalanceBefore, \\\"Repayment did not reduce borrow balance\\\");\\n        }\\n        // For each collateral asset, withdraw then deposit into the target protocol.\\n        for (uint i = 0; i < collaterals.length; i++) {\\n            address underlyingReceived = fromGateway.withdrawCollateral(debtToken, collaterals[i].token, user, collaterals[i].amount);\\n            IERC20(underlyingReceived).approve(address(toGateway), collaterals[i].amount);\\n            console.log(\\\"Depositing collateral into the to protocol\\\");\\n            toGateway.depositCollateral(debtToken, underlyingReceived, collaterals[i].amount, user);\\n        }\\n\\n        // Borrow the debt on the \\\"to\\\" protocol.\\n        console.log(\\\"Borrowing debt on the to protocol\\\");\\n        toGateway.borrow(debtToken, user, debtAmount);\\n    }\\n\\n    // -------------------------------------------------------------------------\\n    // Flash Loan Wrapper for Balancer V2\\n    // -------------------------------------------------------------------------\\n    //\\n    // In a Balancer v2 flash loan the tokens are transferred (or \\\"pulled\\\") into this\\n    // contract as soon as they are approved. This function decodes the userData,\\n    // calls the common debt move function, then repays the principal plus fee.\\n    //\\n    function receiveFlashLoan(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata feeAmounts,\\n        bytes calldata userData\\n    ) external {\\n        require(msg.sender == address(balancerV2Vault), \\\"Unauthorized flash loan provider\\\");\\n\\n        // Decode userData to extract move debt parameters.\\n        (\\n            address user,\\n            address debtToken,\\n            uint256 debtAmount,\\n            IGateway.Collateral[] memory collaterals,\\n            string memory fromProtocol,\\n            string memory toProtocol\\n        ) = abi.decode(userData, (address, address, uint256, IGateway.Collateral[], string, string));\\n\\n        console.log(\\\"Balancer V2 flash loan callback received\\\");\\n        require(feeAmounts.length == 1, \\\"Balancer V2 flash loan fee amount length mismatch\\\");\\n        require(feeAmounts[0] == 0, \\\"Flash loans are free\\\");\\n\\n        // Execute the common debt move logic.\\n        _moveDebtCommon(user, debtToken, debtAmount, collaterals, fromProtocol, toProtocol);\\n\\n        // Repay the flash loan provider (principal + fee).\\n        uint256 totalRepayment = debtAmount + feeAmounts[0];\\n        IERC20(debtToken).safeTransfer(address(balancerV2Vault), totalRepayment);\\n    }\\n\\n    // -------------------------------------------------------------------------\\n    // Flash Loan Wrapper for Balancer V3\\n    // -------------------------------------------------------------------------\\n    //\\n    // For Balancer v3, tokens are delivered via a call to sendTo.\\n    // This wrapper assumes that the tokens have been sent before the call.\\n    // After calling the common move debt function, it repays the flash loan,\\n    // then calls settle if required.\\n    //\\n    function receiveFlashLoanV3(\\n        address user,\\n        address debtToken,\\n        uint256 debtAmount,\\n        IGateway.Collateral[] memory collaterals,\\n        string calldata fromProtocol,\\n        string calldata toProtocol\\n    ) external {\\n        require(msg.sender == address(balancerV3Vault), \\\"Unauthorized flash loan provider\\\");\\n\\n        console.log(\\\"Balancer V3 flash loan callback received\\\");\\n\\n        // Execute the common debt move logic.\\n        _moveDebtCommon(user, debtToken, debtAmount, collaterals, fromProtocol, toProtocol);\\n\\n        // Repay the flash loan provider (principal only, assuming no fee).\\n        IERC20(debtToken).safeTransfer(address(balancerV3Vault), debtAmount);\\n\\n        // Optionally settle the flash loan if required by the provider.\\n        balancerV3Vault.settle(debtToken, debtAmount);\\n    }\\n\\n\\n   // -------------------------------------------------------------------------\\n    // moveDebt: Supports both flash loan providers\\n    // -------------------------------------------------------------------------\\n    //\\n    // The caller provides the flashLoanVersion (\\\"v2\\\" or \\\"v3\\\").\\n    // Based on this parameter, the function encodes the debt move parameters\\n    // appropriately and calls either the v2 flashLoan function or the v3 unlock function.\\n    //\\n    function moveDebt(\\n        address user,\\n        address debtToken,\\n        uint256 debtAmount,\\n        bool repayAll,\\n        IGateway.Collateral[] memory collaterals,\\n        string calldata fromProtocol,\\n        string calldata toProtocol,\\n        string calldata flashLoanVersion\\n    ) external {\\n        if (repayAll) {\\n            IGateway fromGateway = gateways[fromProtocol];\\n            require(address(fromGateway) != address(0), \\\"From protocol not supported\\\");\\n            debtAmount = fromGateway.getBorrowBalance(debtToken, user);\\n        }\\n\\n        if (keccak256(bytes(flashLoanVersion)) == keccak256(bytes(\\\"v2\\\"))) {\\n            // For Balancer v2, encode parameters without function selector.\\n            bytes memory data = abi.encode(user, debtToken, debtAmount, collaterals, fromProtocol, toProtocol);\\n            IERC20[] memory tokens = new IERC20[](1);\\n            tokens[0] = IERC20(debtToken);\\n            uint256[] memory amounts = new uint256[](1);\\n            amounts[0] = debtAmount;\\n            console.log(\\\"Requesting Balancer V2 flash loan\\\");\\n            balancerV2Vault.flashLoan(address(this), tokens, amounts, data);\\n        } else if (keccak256(bytes(flashLoanVersion)) == keccak256(bytes(\\\"v3\\\"))) {\\n            // For Balancer v3, encode parameters with the function selector.\\n            bytes memory data = abi.encodeWithSelector(\\n                this.receiveFlashLoanV3.selector,\\n                user,\\n                debtToken,\\n                debtAmount,\\n                collaterals,\\n                fromProtocol,\\n                toProtocol\\n            );\\n            console.log(\\\"Requesting Balancer V3 flash loan\\\");\\n            IVault(address(balancerV3Vault)).unlock(data);\\n        } else {\\n            revert(\\\"Unsupported flash loan version\\\");\\n        }\\n    }\\n\\n    function getPossibleCollaterals(\\n        address token, \\n        string calldata protocolName, \\n        address user\\n    ) external view returns (\\n        address[] memory collateralAddresses,\\n        uint256[] memory balances,\\n        string[] memory symbols,\\n        uint8[] memory decimals\\n    ) {\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n        return gateway.getPossibleCollaterals(token, user);\\n    }\\n\\n    function getFromProtocolApprovalsForMove(address debtToken, IGateway.Collateral[] calldata collaterals, string calldata fromProtocol) external view returns (address[] memory, bytes[] memory) {\\n        IGateway fromGateway = gateways[fromProtocol];\\n        require(address(fromGateway) != address(0), \\\"From protocol not supported\\\");\\n        (address[] memory fromTarget, bytes[] memory fromData) = fromGateway.getEncodedCollateralApprovals(debtToken, collaterals);\\n        return (fromTarget, fromData);\\n    }\\n\\n    function getToProtocolApprovalsForMove(address debtToken, uint256 debtAmount, string calldata toProtocol) external view returns (address[] memory, bytes[] memory) {\\n        IGateway toGateway = gateways[toProtocol];\\n        require(address(toGateway) != address(0), \\\"To protocol not supported\\\");\\n        (address[] memory toTarget, bytes[] memory toData) = toGateway.getEncodedDebtApproval(debtToken, debtAmount);\\n        return (toTarget, toData);\\n    }\\n} \",\"keccak256\":\"0x495d1a3e0454a125fd02ed14cae501c9272bfe7ea241a4f646e0f509ce0f6baf\",\"license\":\"MIT\"},\"contracts/interfaces/IGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IGateway {\\n    function deposit(address token, address user, uint256 amount) external;\\n    \\n    function borrow(address token, address user, uint256 amount) external;\\n    function repay(address token, address user, uint256 amount) external;\\n\\n    function depositCollateral(address market, address collateral, uint256 amount, address receiver) external;\\n    function withdrawCollateral(address market, address collateral, address user, uint256 amount) external returns (address);\\n    \\n\\n    function getBalance(address token, address user) external view returns (uint256);\\n    function getBorrowBalance(address token, address user) external view returns (uint256);\\n    function getBorrowRate(address token) external view returns (uint256, bool);\\n    function getSupplyRate(address token) external view returns (uint256, bool);\\n    function getLtv(address token, address user) external view returns (uint256);\\n    function getPossibleCollaterals(address token, address user) external view returns (\\n        address[] memory collateralAddresses,\\n        uint256[] memory balances,\\n        string[] memory symbols,\\n        uint8[] memory decimals\\n    );\\n\\n    struct Collateral {\\n        address token;\\n        uint256 amount;\\n    }    \\n    function getEncodedCollateralApprovals(address token, Collateral[] calldata collaterals) external view returns (address[] memory target, bytes[] memory data);\\n    function getEncodedDebtApproval(address token, uint256 amount) external view returns (address[] memory target, bytes[] memory data);\\n}\",\"keccak256\":\"0xf636e5db0aeea85814b2c61bfeef3b994095ca1575c2485168878a79bdb482d3\",\"license\":\"MIT\"},\"contracts/interfaces/balancer/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface IVault {\\n    function unlock(bytes calldata data) external returns (bytes memory result);\\n    function sendTo(address token, address to, uint256 amount) external;\\n    function settle(address token, uint256 amountHint) external returns (uint256 credit);\\n}\\n\",\"keccak256\":\"0x557c8d97fb63b697548d4f4dd977017911e332d53657302fe8799dc89570b5b6\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200014057601f620027f038819003918201601f191683019291906001600160401b0384118385101762000145578160809284926040968752833981010312620001405762000051816200015b565b9062000060602082016200015b565b8382015190916001600160a01b038083169290919083900362000140576060015193818516809503620001405781169060248651636161766560e01b815260006004820152209360018060a01b031994838682541617905516602886516718dbdb5c1bdd5b9960c21b815260006008820152208185825416179055602b86516a636f6d706f756e6420763360a81b81526000600b82015220908482541617905560278551666161766520763360c81b81526000600782015220908382541617905581600154161760015560025416176002555161267f9081620001718239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001405756fe60806040908082526004918236101561001757600080fd5b600091823560e01c9081630acefd35146116ba5750806310c0a1571461169257806325d56916146114e157806340c7dd62146114265780635c738121146112ba5780637a04707d14610f705780637ffe721e14610ef7578063ac3cded814610d3b578063ad3a5f4714610bad578063caf89ac514610ae2578063d7b28d5f146108a9578063db236a1f14610840578063e327d3121461032d5763f04f2707146100bf57600080fd5b34610329576080366003190112610329576001600160401b03908335828111610325576100ef9036908601611aed565b5050602435828111610325576101089036908601611aed565b5050604435828111610325576101219036908601611aed565b916064358481116103215761013990369088016116df565b6002546001600160a01b03949291906101559086163314611cc1565b81019560c08288031261031d5761016b8261174e565b6101776020840161174e565b938584013598606085013584811161031957816101959187016119ce565b93608086013581811161031557826101ae918801611acf565b9560a081013591821161031557916101c8918a9301611acf565b95169761021887516101d981611960565b602881527f42616c616e63657220563220666c617368206c6f616e2063616c6c6261636b206020820152671c9958d95a5d995960c21b898201526125b5565b600181036102b857156102a55735948561026c57509087878761023d96959416611e28565b8301809311610259576102569394506002541690611d0c565b80f35b634e487b7160e01b845260118552602484fd5b5162461bcd60e51b81526020818c01526014602482015273466c617368206c6f616e7320617265206672656560601b6044820152606490fd5b634e487b7160e01b8a5260328b5260248afd5b865162461bcd60e51b81526020818e0152603160248201527f42616c616e63657220563220666c617368206c6f616e2066656520616d6f756e6044820152700e840d8cadccee8d040dad2e6dac2e8c6d607b1b6064820152608490fd5b8c80fd5b8b80fd5b8780fd5b8580fd5b8380fd5b5080fd5b509190346105995760031991610100368401126103295761034c611738565b9361035561170c565b606435801515810361083c576001600160401b03966084358881116108385761038190369087016119ce565b60a43589811161031d5761039890369088016116df565b60c4929192358b8111610834576103b29036908a016116df565b9390928c60e4359d8e11610319578b8a8c9d9e9f9a6103d78e829e9f9d3691016116df565b9c90936044359c61076b575b505050506103f2368b83611a98565b997ff9446b8e937d86f0bc87cac73923491692b123ca5f8761908494703758206adf8d613b1960f11b8d519d60209e8f8092012092516104318161197b565b600281520152036105c0575050509261045c9261046a95928897958b9a998d519b8c988c8a016123b7565b03601f198101855284611996565b8451956104768761197b565b60019081885283880193803686376001600160a01b039687166104988a611ddd565b528751936104a58561197b565b8385528136818701376104b785611ddd565b526104fd88516104c681611960565b602181527f52657175657374696e672042616c616e63657220563220666c617368206c6f6183820152603760f91b8a8201526125b5565b866002541696873b156105bc57929190885199632e1c224f60e11b8b5260848b019230908c0152608060248c01525180925260a48a0195938b905b8382106105a55750505050505086866105748a8296610565878597879f87899d9b0301604488015261185d565b918483030160648501526117c2565b03925af190811561059c575061058957505080f35b61059290611937565b6105995780f35b80fd5b513d84823e3d90fd5b855181168852968201969482019490840190610538565b8a80fd5b8c9f508a6106059b9e9b7fec97b8914cfb6741ca720b49246676ddcc2c227e4046450a8d815244c93673da949e9361763360f01b939e96989a9c97999b9e3691611a98565b81815191012092516106168161197b565b60028152015203610728579461065f948b94610651948e9f9b99946106d29f9b998d519b8c9963ad3a5f4760e01b908b015260248a016123b7565b03601f198101845283611996565b6106a4845161066d81611960565b602181527f52657175657374696e672042616c616e63657220563320666c617368206c6f6188820152603760f91b868201526125b5565b858360018060a01b0360015416928651998a95869485936348c8949160e01b855284015260248301906117c2565b03925af190811561071f57506106e9575b50505080f35b3d8085853e6106f88185611996565b83019183830312610325578251908111610325576107169201612483565b503880806106e3565b513d86823e3d90fd5b8c5162461bcd60e51b81528089018c9052601e60248201527f556e737570706f7274656420666c617368206c6f616e2076657273696f6e00006044820152606490fd5b6107d4949c509183918c93602095518b8b8237808c019182529081900386019020546001600160a01b0316926107a2841515611d45565b5163118e31b760e01b81526001600160a01b039283169181019182529190931660208401529384928391829160400190565b03915afa908115610828578e916107f2575b50978b8b8f8f906103e3565b90506020813d8211610820575b8161080c60209383611996565b8101031261081b5751386107e6565b600080fd5b3d91506107ff565b8e8d51903d90823e3d90fd5b8980fd5b8680fd5b8480fd5b5082346108a55760203660031901126108a55780356001600160401b038111610325576020939161087391369101611acf565b836108868451928381519384920161179f565b810191825290819003830190205490516001600160a01b039091168152f35b8280fd5b5091819234610ade576108bb366118e2565b95939190928086519384378201918783526109ea60018060a01b0393888584602080968195030190205416956108f2871515611b1d565b610954828b5161090181611960565b603c81527f5472616e7366657272696e6720746f6b656e732066726f6d207573657220746f868201527f207468697320636f6e747261637420666f722072657061796d656e74000000008d820152612604565b851661096282308a84611b7a565b6109b58a5161097081611960565b602f81527f417070726f76696e67206761746577617920746f207370656e6420746f6b656e858201526e1cc8199bdc881c995c185e5b595b9d608a1b8c8201526125b5565b895163095ea7b360e01b81526001600160a01b038816818b01908152602081019390935293849283918e918391604090910190565b03925af18015610ad45790610a519291610aa7575b507f466f7277617264696e672072657061792063616c6c20746f2074686520617070875191610a2d83611960565b603083528201526f726f707269617465206761746577617960801b878201526125b5565b813b15610838578451631da649cf60e01b81526001600160a01b039182169481019485529216602084015260408301949094529284918491908290849082906060015b03925af190811561059c57506105895750f35b610ac690823d8411610acd575b610abe8183611996565b810190611b62565b50386109ff565b503d610ab4565b87513d8b823e3d90fd5b5050fd5b503461032957610b5b610af436611891565b918086989298519485378301868152839003602090810190932054929687936001600160a01b031691610b28831515611b1d565b865163118e31b760e01b81526001600160a01b039283169181019182529190931660208401529384928391829160400190565b03915afa928315610ba25792610b73575b5051908152f35b9091508281813d8311610b9b575b610b8b8183611996565b8101031261081b57519038610b6c565b503d610b81565b8251903d90823e3d90fd5b508290346108a55760c03660031901126108a557610bc9611738565b91610bd261170c565b6001600160401b0391604435918660643585811161032957610bf790369085016119ce565b946084358181116108a557610c0f90369086016116df565b91909860a43591821161032557610ca56020988887610cb48d610cff9f610cac90610c5b9a610c448f610cba9c3691016116df565b99909460018060a01b039d8e600154163314611cc1565b671c9958d95a5d995960c21b815191610c7383611960565b602883527f42616c616e63657220563320666c617368206c6f616e2063616c6c6261636b2060208401528201526125b5565b3691611a98565b953691611a98565b94611e28565b610ccb858260015416838616611d0c565b60015416928651978895869485936315afd40960e01b8552840160209093929193604081019460018060a01b031681520152565b03925af190811561059c5750610d13575080f35b602090813d8111610d34575b610d298183611996565b8101031261081b5780f35b503d610d1f565b5091819234610ade57610d4d366118e2565b9593919092808651938437820191878352610e2a60018060a01b039388858460208096819503019020541695610d84871515611b1d565b610dd7828b51610d9381611960565b602e81527f5472616e7366657272696e6720746f6b656e732066726f6d207573657220746f868201526d081d1a1a5cc818dbdb9d1c9858dd60921b8d820152612604565b8516610de582308a84611b7a565b6109b58a51610df381611960565b602181527f417070726f76696e67206761746577617920746f207370656e6420746f6b656e85820152607360f81b8c8201526125b5565b03925af18015610ad45790610e939291610eda575b507f466f7277617264696e67206465706f7369742063616c6c20746f207468652061875191610e6d83611960565b60328352820152717070726f707269617465206761746577617960701b878201526125b5565b813b15610838578451638340f54960e01b81526001600160a01b03918216948101948552921660208401526040830194909452928491849190829084908290606001610a94565b610ef090823d8411610acd57610abe8183611996565b5038610e3f565b503461032957610b5b610f0936611891565b918086989298519485378301868152839003602090810190932054929687936001600160a01b031691610f3d831515611b1d565b865163d4fac45d60e01b81526001600160a01b039283169181019182529190931660208401529384928391829160400190565b50903461059957606036600319011261059957610f8b611738565b90602435936001600160401b03948581116108a557918091610fb461101f9594369083016116df565b919094610fbf611722565b9280895197883786018481528690036020908101909620546001600160a01b031691610fec831515611b1d565b885163104e999d60e01b81526001600160a01b039283169181019182529190931660208401529586928391829160400190565b03915afa9384156112b0578195829083958497611106575b505090611066611059979695939492825198899860808a5260808a0190611762565b90888203858a015261185d565b908682039087015282518082528282019183808360051b83010195019286915b8383106110d057505050505084820360608601528080855193848152019401925b8281106110b657505050500390f35b835160ff16855286955093810193928101926001016110a7565b91939798509193959486806110f1600193601f198682030187528b516117c2565b99019301930190928998979596949293611086565b965096505092503d8082863e61111c8186611996565b8401926080858503126103295784518681116108a5578461113e91870161249d565b838601518781116103255786019685601f8901121561032557875197611163896119b7565b9861117085519a8b611996565b808a5286808b019160051b830101918883116108385787809101915b8383106112a057505050508287015181811161083c5787019686601f8901121561083c578751976111bc896119b7565b986111c986519a8b611996565b808a5287808b019160051b8301019189831161031d57888101915b83831061126b5750505050606081015191821161083c57019480601f87011215610325578551611213816119b7565b9661122085519889611996565b818852868089019260051b820101928311610321578601905b8282106112525750505061106690969594959038611037565b815160ff81168103610838578152908601908601611239565b82518681116108345782018b603f82011215610834578a916112958d838c8680960151910161244e565b8152019201916111e4565b825181529181019188910161118c565b51903d90823e3d90fd5b5034610329576060366003190112610329576112d4611738565b6024356001600160401b0380821161083c573660238301121561083c578186013590808211610321573660248360061b8501011161032157604435908111610321579161132786949793369085016116df565b928387519485938437820186815260018060a01b03948591602094859103019020541693611356851515611d45565b8188519a8b976328d0a61b60e21b89528360448a019216908901528960248901525260246064870194019287915b898484106113f25750505050505082809103915afa9283156113e7578280946113bc575b50506113b89051928392836117e7565b0390f35b6113de9294506113b893503d8091833e6113d68183611996565b810190612503565b929091386113a8565b5051903d90823e3d90fd5b91949750929597508060019295846114098a61174e565b168152858901358682015201960193018995939289979592611384565b503461032957606036600319011261032957611440611738565b6044356001600160401b038111610325579383916114646114bf96369084016116df565b80865192833781018481528190036020019020546001600160a01b03169061148d821515611d91565b8451636ae2b0eb60e11b81526001600160a01b0390911692810192835260243560208401529586928391829160400190565b03915afa9283156113e7578280946113bc5750506113b89051928392836117e7565b509134610329576101003660031901126103295780356001600160401b0381116108a55761151290369083016116df565b93909161151d61170c565b92611526611722565b906064359460a4359760ff891680990361031d578086519384378201878152829003602001909120546001600160a01b039081169190611567831515611b1d565b8116803b1561031d5785519863d505accf60e01b8a5233868b01523060248b01528760448b015260843560648b015260848a015260c43560a48a015260e43560c48a0152878960e48183855af180156116745761167e575b8798506115ce87303384611b7a565b855163095ea7b360e01b81526001600160a01b03841686820190815260208181018a90529192839182908c90829060400103925af1801561167457611656575b50813b15610838578451638340f54960e01b81526001600160a01b03918216948101948552921660208401526040830194909452928491849190829084908290606001610a94565b61166d9060203d8111610acd57610abe8183611996565b503861160e565b86513d8a823e3d90fd5b96909761168a90611937565b9587906115bf565b503461032957816003193601126103295760025490516001600160a01b039091168152602090f35b8390346103295781600319360112610329576001546001600160a01b03168152602090f35b9181601f8401121561081b578235916001600160401b03831161081b576020838186019501011161081b57565b602435906001600160a01b038216820361081b57565b604435906001600160a01b038216820361081b57565b600435906001600160a01b038216820361081b57565b35906001600160a01b038216820361081b57565b90815180825260208080930193019160005b828110611782575050505090565b83516001600160a01b031685529381019392810192600101611774565b60005b8381106117b25750506000910152565b81810151838201526020016117a2565b906020916117db8151809281855285808601910161179f565b601f01601f1916010190565b906117fa90604083526040830190611762565b90602090818184039101528251908183528083019281808460051b8301019501936000915b84831061182f5750505050505090565b909192939495848061184d600193601f198682030187528a516117c2565b980193019301919493929061181f565b90815180825260208080930193019160005b82811061187d575050505090565b83518552938101939281019260010161186f565b606060031982011261081b57600435906001600160401b03821161081b576118bb916004016116df565b90916001600160a01b0390602435828116810361081b5791604435908116810361081b5790565b608060031982011261081b57600435906001600160401b03821161081b5761190c916004016116df565b90916001600160a01b0390602435828116810361081b5791604435908116810361081b579060643590565b6001600160401b03811161194a57604052565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761194a57604052565b604081019081106001600160401b0382111761194a57604052565b90601f801991011681019081106001600160401b0382111761194a57604052565b6001600160401b03811161194a5760051b60200190565b81601f8201121561081b578035906119e5826119b7565b926040926119f584519586611996565b808552602091828087019260061b8501019381851161081b578301915b848310611a225750505050505090565b858383031261081b57855190868201908282106001600160401b03831117611a6857879286928452611a538661174e565b81528286013583820152815201920191611a12565b60246000634e487b7160e01b81526041600452fd5b6001600160401b03811161194a57601f01601f191660200190565b929192611aa482611a7d565b91611ab26040519384611996565b82948184528183011161081b578281602093846000960137010152565b9080601f8301121561081b57816020611aea93359101611a98565b90565b9181601f8401121561081b578235916001600160401b03831161081b576020808501948460051b01011161081b57565b15611b2457565b60405162461bcd60e51b8152602060048201526016602482015275141c9bdd1bd8dbdb081b9bdd081cdd5c1c1bdc9d195960521b6044820152606490fd5b9081602091031261081b5751801515810361081b5790565b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064820192909252611bc191611bbc8260848101610651565b611bc3565b565b600080611c0d9260018060a01b03169360208151910182865af13d15611c56573d90611bee82611a7d565b91611bfc6040519384611996565b82523d6000602084013e5b83611c5e565b8051908115159182611c3b575b5050611c235750565b60249060405190635274afe760e01b82526004820152fd5b611c4e9250602080918301019101611b62565b153880611c1a565b606090611c07565b90611c855750805115611c7357805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580611cb8575b611c96575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15611c8e565b15611cc857565b606460405162461bcd60e51b815260206004820152602060248201527f556e617574686f72697a656420666c617368206c6f616e2070726f76696465726044820152fd5b60405163a9059cbb60e01b60208201526001600160a01b0390921660248301526044820192909252611bc191611bbc8260648101610651565b15611d4c57565b60405162461bcd60e51b815260206004820152601b60248201527f46726f6d2070726f746f636f6c206e6f7420737570706f7274656400000000006044820152606490fd5b15611d9857565b60405162461bcd60e51b815260206004820152601960248201527f546f2070726f746f636f6c206e6f7420737570706f72746564000000000000006044820152606490fd5b805115611dea5760200190565b634e487b7160e01b600052603260045260246000fd5b8051821015611dea5760209160051b010190565b51906001600160a01b038216820361081b57565b939492959091956000956020611e47604051928381519384920161179f565b81019087825260208160018060a01b0393030190205416936020611e74604051928381519384920161179f565b81018781528190036020019020546001600160a01b031691611e97851515611d45565b611ea2831515611d91565b60405163095ea7b360e01b81526001600160a01b038616600482015260248101899052602081806044810103818b6001600160a01b038a165af1801561236c57612377575b5060405163118e31b760e01b81526001600160a01b03858116600483015287166024820152602081604481895afa90811561236c57889161233a575b50853b1561031d57604051631da649cf60e01b81526001600160a01b03868116600483015288166024820152604481018a90528881606481838b5af1801561217357612327575b5060405163118e31b760e01b81526001600160a01b038681166004830152881660248201526020816044818a5afa9081156121735789916122f5575b5010156122a057865b82518110156121e6576001600160a01b03611fca8285611e00565b5151166020611fd98386611e00565b510151604051635820ba6360e01b81526001600160a01b0388811660048301526024820193909352918916604483015260648201526020816084818c8b5af19081156121735789916121a8575b5061206a6020806120378588611e00565b51015160405163095ea7b360e01b81526001600160a01b0389166004820152602481019190915291829081906044820190565b03818d6001600160a01b0387165af1801561219d5761217e575b506120d660405161209481611960565b602a81527f4465706f736974696e6720636f6c6c61746572616c20696e746f2074686520746020820152691bc81c1c9bdd1bd8dbdb60b21b60408201526125b5565b60206120e28386611e00565b510151853b1561083457604051634108d0af60e01b81526001600160a01b038881166004830152928316602482015260448101919091529088166064820152888160848183895af180156121735790899161215f575b5050600019811461214b57600101611faf565b634e487b7160e01b88526011600452602488fd5b61216890611937565b61031d578738612138565b6040513d8b823e3d90fd5b6121969060203d602011610acd57610abe8183611996565b5038612084565b6040513d8c823e3d90fd5b90506020813d6020116121de575b816121c360209383611996565b810103126121da576121d490611e14565b38612026565b8880fd5b3d91506121b6565b50969492919350506122366040516121fd81611960565b602181527f426f72726f77696e672064656274206f6e2074686520746f2070726f746f636f6020820152601b60fa1b60408201526125b5565b823b1561083c576040516314890dcb60e21b81526001600160a01b03918216600482015291166024820152604481019290925282908290606490829084905af1801561229557612284575050565b61228e8291611937565b6105995750565b6040513d84823e3d90fd5b60405162461bcd60e51b815260206004820152602760248201527f52657061796d656e7420646964206e6f742072656475636520626f72726f772060448201526662616c616e636560c81b6064820152608490fd5b90506020813d60201161231f575b8161231060209383611996565b8101031261081b575138611fa6565b3d9150612303565b61233390989198611937565b9638611f6a565b90506020813d602011612364575b8161235560209383611996565b8101031261031d575138611f23565b3d9150612348565b6040513d8a823e3d90fd5b61238f9060203d602011610acd57610abe8183611996565b5038611ee7565b908060209392818452848401376000828201840152601f01601f1916010190565b96949198979592909860c088019060018060a01b03809b1689528a60209116818a0152604092838a015260c060608a015285518092528060e08a019601926000905b83821061242c575050505050611aea9697509082918661241e94036080880152612396565b9260a0818503910152612396565b845180518e1689528301518884015296870196938201936001909101906123f9565b9092919261245b81611a7d565b916124696040519384611996565b82948284528282011161081b576020611bc193019061179f565b9080601f8301121561081b578151611aea9260200161244e565b81601f8201121561081b578051916124b4836119b7565b926124c26040519485611996565b808452602092838086019260051b82010192831161081b578301905b8282106124ec575050505090565b8380916124f884611e14565b8152019101906124de565b91909160408184031261081b578051906001600160401b039182811161081b578461252f91830161249d565b93602091828101519084821161081b570181601f8201121561081b578051612556816119b7565b946125646040519687611996565b818652848087019260051b8401019380851161081b57858401925b858410612590575050505050505090565b835183811161081b5787916125aa848480948a0101612483565b81520193019261257f565b600080916040516125f1816125e3602082019463104c13eb60e21b86526020602484015260448301906117c2565b03601f198101835282611996565b51906a636f6e736f6c652e6c6f675afa50565b6000919082916125f160405180926126356020830195632d839cb360e21b87526040602485015260648401906117c2565b90604483015203601f19810183528261199656fea2646970667358221220ebd58a72c05acba8dd6c990a74795aec01f3ecc2cafbf75e609e6e5a8a409b2864736f6c63430008140033",
  "deployedBytecode": "0x60806040908082526004918236101561001757600080fd5b600091823560e01c9081630acefd35146116ba5750806310c0a1571461169257806325d56916146114e157806340c7dd62146114265780635c738121146112ba5780637a04707d14610f705780637ffe721e14610ef7578063ac3cded814610d3b578063ad3a5f4714610bad578063caf89ac514610ae2578063d7b28d5f146108a9578063db236a1f14610840578063e327d3121461032d5763f04f2707146100bf57600080fd5b34610329576080366003190112610329576001600160401b03908335828111610325576100ef9036908601611aed565b5050602435828111610325576101089036908601611aed565b5050604435828111610325576101219036908601611aed565b916064358481116103215761013990369088016116df565b6002546001600160a01b03949291906101559086163314611cc1565b81019560c08288031261031d5761016b8261174e565b6101776020840161174e565b938584013598606085013584811161031957816101959187016119ce565b93608086013581811161031557826101ae918801611acf565b9560a081013591821161031557916101c8918a9301611acf565b95169761021887516101d981611960565b602881527f42616c616e63657220563220666c617368206c6f616e2063616c6c6261636b206020820152671c9958d95a5d995960c21b898201526125b5565b600181036102b857156102a55735948561026c57509087878761023d96959416611e28565b8301809311610259576102569394506002541690611d0c565b80f35b634e487b7160e01b845260118552602484fd5b5162461bcd60e51b81526020818c01526014602482015273466c617368206c6f616e7320617265206672656560601b6044820152606490fd5b634e487b7160e01b8a5260328b5260248afd5b865162461bcd60e51b81526020818e0152603160248201527f42616c616e63657220563220666c617368206c6f616e2066656520616d6f756e6044820152700e840d8cadccee8d040dad2e6dac2e8c6d607b1b6064820152608490fd5b8c80fd5b8b80fd5b8780fd5b8580fd5b8380fd5b5080fd5b509190346105995760031991610100368401126103295761034c611738565b9361035561170c565b606435801515810361083c576001600160401b03966084358881116108385761038190369087016119ce565b60a43589811161031d5761039890369088016116df565b60c4929192358b8111610834576103b29036908a016116df565b9390928c60e4359d8e11610319578b8a8c9d9e9f9a6103d78e829e9f9d3691016116df565b9c90936044359c61076b575b505050506103f2368b83611a98565b997ff9446b8e937d86f0bc87cac73923491692b123ca5f8761908494703758206adf8d613b1960f11b8d519d60209e8f8092012092516104318161197b565b600281520152036105c0575050509261045c9261046a95928897958b9a998d519b8c988c8a016123b7565b03601f198101855284611996565b8451956104768761197b565b60019081885283880193803686376001600160a01b039687166104988a611ddd565b528751936104a58561197b565b8385528136818701376104b785611ddd565b526104fd88516104c681611960565b602181527f52657175657374696e672042616c616e63657220563220666c617368206c6f6183820152603760f91b8a8201526125b5565b866002541696873b156105bc57929190885199632e1c224f60e11b8b5260848b019230908c0152608060248c01525180925260a48a0195938b905b8382106105a55750505050505086866105748a8296610565878597879f87899d9b0301604488015261185d565b918483030160648501526117c2565b03925af190811561059c575061058957505080f35b61059290611937565b6105995780f35b80fd5b513d84823e3d90fd5b855181168852968201969482019490840190610538565b8a80fd5b8c9f508a6106059b9e9b7fec97b8914cfb6741ca720b49246676ddcc2c227e4046450a8d815244c93673da949e9361763360f01b939e96989a9c97999b9e3691611a98565b81815191012092516106168161197b565b60028152015203610728579461065f948b94610651948e9f9b99946106d29f9b998d519b8c9963ad3a5f4760e01b908b015260248a016123b7565b03601f198101845283611996565b6106a4845161066d81611960565b602181527f52657175657374696e672042616c616e63657220563320666c617368206c6f6188820152603760f91b868201526125b5565b858360018060a01b0360015416928651998a95869485936348c8949160e01b855284015260248301906117c2565b03925af190811561071f57506106e9575b50505080f35b3d8085853e6106f88185611996565b83019183830312610325578251908111610325576107169201612483565b503880806106e3565b513d86823e3d90fd5b8c5162461bcd60e51b81528089018c9052601e60248201527f556e737570706f7274656420666c617368206c6f616e2076657273696f6e00006044820152606490fd5b6107d4949c509183918c93602095518b8b8237808c019182529081900386019020546001600160a01b0316926107a2841515611d45565b5163118e31b760e01b81526001600160a01b039283169181019182529190931660208401529384928391829160400190565b03915afa908115610828578e916107f2575b50978b8b8f8f906103e3565b90506020813d8211610820575b8161080c60209383611996565b8101031261081b5751386107e6565b600080fd5b3d91506107ff565b8e8d51903d90823e3d90fd5b8980fd5b8680fd5b8480fd5b5082346108a55760203660031901126108a55780356001600160401b038111610325576020939161087391369101611acf565b836108868451928381519384920161179f565b810191825290819003830190205490516001600160a01b039091168152f35b8280fd5b5091819234610ade576108bb366118e2565b95939190928086519384378201918783526109ea60018060a01b0393888584602080968195030190205416956108f2871515611b1d565b610954828b5161090181611960565b603c81527f5472616e7366657272696e6720746f6b656e732066726f6d207573657220746f868201527f207468697320636f6e747261637420666f722072657061796d656e74000000008d820152612604565b851661096282308a84611b7a565b6109b58a5161097081611960565b602f81527f417070726f76696e67206761746577617920746f207370656e6420746f6b656e858201526e1cc8199bdc881c995c185e5b595b9d608a1b8c8201526125b5565b895163095ea7b360e01b81526001600160a01b038816818b01908152602081019390935293849283918e918391604090910190565b03925af18015610ad45790610a519291610aa7575b507f466f7277617264696e672072657061792063616c6c20746f2074686520617070875191610a2d83611960565b603083528201526f726f707269617465206761746577617960801b878201526125b5565b813b15610838578451631da649cf60e01b81526001600160a01b039182169481019485529216602084015260408301949094529284918491908290849082906060015b03925af190811561059c57506105895750f35b610ac690823d8411610acd575b610abe8183611996565b810190611b62565b50386109ff565b503d610ab4565b87513d8b823e3d90fd5b5050fd5b503461032957610b5b610af436611891565b918086989298519485378301868152839003602090810190932054929687936001600160a01b031691610b28831515611b1d565b865163118e31b760e01b81526001600160a01b039283169181019182529190931660208401529384928391829160400190565b03915afa928315610ba25792610b73575b5051908152f35b9091508281813d8311610b9b575b610b8b8183611996565b8101031261081b57519038610b6c565b503d610b81565b8251903d90823e3d90fd5b508290346108a55760c03660031901126108a557610bc9611738565b91610bd261170c565b6001600160401b0391604435918660643585811161032957610bf790369085016119ce565b946084358181116108a557610c0f90369086016116df565b91909860a43591821161032557610ca56020988887610cb48d610cff9f610cac90610c5b9a610c448f610cba9c3691016116df565b99909460018060a01b039d8e600154163314611cc1565b671c9958d95a5d995960c21b815191610c7383611960565b602883527f42616c616e63657220563320666c617368206c6f616e2063616c6c6261636b2060208401528201526125b5565b3691611a98565b953691611a98565b94611e28565b610ccb858260015416838616611d0c565b60015416928651978895869485936315afd40960e01b8552840160209093929193604081019460018060a01b031681520152565b03925af190811561059c5750610d13575080f35b602090813d8111610d34575b610d298183611996565b8101031261081b5780f35b503d610d1f565b5091819234610ade57610d4d366118e2565b9593919092808651938437820191878352610e2a60018060a01b039388858460208096819503019020541695610d84871515611b1d565b610dd7828b51610d9381611960565b602e81527f5472616e7366657272696e6720746f6b656e732066726f6d207573657220746f868201526d081d1a1a5cc818dbdb9d1c9858dd60921b8d820152612604565b8516610de582308a84611b7a565b6109b58a51610df381611960565b602181527f417070726f76696e67206761746577617920746f207370656e6420746f6b656e85820152607360f81b8c8201526125b5565b03925af18015610ad45790610e939291610eda575b507f466f7277617264696e67206465706f7369742063616c6c20746f207468652061875191610e6d83611960565b60328352820152717070726f707269617465206761746577617960701b878201526125b5565b813b15610838578451638340f54960e01b81526001600160a01b03918216948101948552921660208401526040830194909452928491849190829084908290606001610a94565b610ef090823d8411610acd57610abe8183611996565b5038610e3f565b503461032957610b5b610f0936611891565b918086989298519485378301868152839003602090810190932054929687936001600160a01b031691610f3d831515611b1d565b865163d4fac45d60e01b81526001600160a01b039283169181019182529190931660208401529384928391829160400190565b50903461059957606036600319011261059957610f8b611738565b90602435936001600160401b03948581116108a557918091610fb461101f9594369083016116df565b919094610fbf611722565b9280895197883786018481528690036020908101909620546001600160a01b031691610fec831515611b1d565b885163104e999d60e01b81526001600160a01b039283169181019182529190931660208401529586928391829160400190565b03915afa9384156112b0578195829083958497611106575b505090611066611059979695939492825198899860808a5260808a0190611762565b90888203858a015261185d565b908682039087015282518082528282019183808360051b83010195019286915b8383106110d057505050505084820360608601528080855193848152019401925b8281106110b657505050500390f35b835160ff16855286955093810193928101926001016110a7565b91939798509193959486806110f1600193601f198682030187528b516117c2565b99019301930190928998979596949293611086565b965096505092503d8082863e61111c8186611996565b8401926080858503126103295784518681116108a5578461113e91870161249d565b838601518781116103255786019685601f8901121561032557875197611163896119b7565b9861117085519a8b611996565b808a5286808b019160051b830101918883116108385787809101915b8383106112a057505050508287015181811161083c5787019686601f8901121561083c578751976111bc896119b7565b986111c986519a8b611996565b808a5287808b019160051b8301019189831161031d57888101915b83831061126b5750505050606081015191821161083c57019480601f87011215610325578551611213816119b7565b9661122085519889611996565b818852868089019260051b820101928311610321578601905b8282106112525750505061106690969594959038611037565b815160ff81168103610838578152908601908601611239565b82518681116108345782018b603f82011215610834578a916112958d838c8680960151910161244e565b8152019201916111e4565b825181529181019188910161118c565b51903d90823e3d90fd5b5034610329576060366003190112610329576112d4611738565b6024356001600160401b0380821161083c573660238301121561083c578186013590808211610321573660248360061b8501011161032157604435908111610321579161132786949793369085016116df565b928387519485938437820186815260018060a01b03948591602094859103019020541693611356851515611d45565b8188519a8b976328d0a61b60e21b89528360448a019216908901528960248901525260246064870194019287915b898484106113f25750505050505082809103915afa9283156113e7578280946113bc575b50506113b89051928392836117e7565b0390f35b6113de9294506113b893503d8091833e6113d68183611996565b810190612503565b929091386113a8565b5051903d90823e3d90fd5b91949750929597508060019295846114098a61174e565b168152858901358682015201960193018995939289979592611384565b503461032957606036600319011261032957611440611738565b6044356001600160401b038111610325579383916114646114bf96369084016116df565b80865192833781018481528190036020019020546001600160a01b03169061148d821515611d91565b8451636ae2b0eb60e11b81526001600160a01b0390911692810192835260243560208401529586928391829160400190565b03915afa9283156113e7578280946113bc5750506113b89051928392836117e7565b509134610329576101003660031901126103295780356001600160401b0381116108a55761151290369083016116df565b93909161151d61170c565b92611526611722565b906064359460a4359760ff891680990361031d578086519384378201878152829003602001909120546001600160a01b039081169190611567831515611b1d565b8116803b1561031d5785519863d505accf60e01b8a5233868b01523060248b01528760448b015260843560648b015260848a015260c43560a48a015260e43560c48a0152878960e48183855af180156116745761167e575b8798506115ce87303384611b7a565b855163095ea7b360e01b81526001600160a01b03841686820190815260208181018a90529192839182908c90829060400103925af1801561167457611656575b50813b15610838578451638340f54960e01b81526001600160a01b03918216948101948552921660208401526040830194909452928491849190829084908290606001610a94565b61166d9060203d8111610acd57610abe8183611996565b503861160e565b86513d8a823e3d90fd5b96909761168a90611937565b9587906115bf565b503461032957816003193601126103295760025490516001600160a01b039091168152602090f35b8390346103295781600319360112610329576001546001600160a01b03168152602090f35b9181601f8401121561081b578235916001600160401b03831161081b576020838186019501011161081b57565b602435906001600160a01b038216820361081b57565b604435906001600160a01b038216820361081b57565b600435906001600160a01b038216820361081b57565b35906001600160a01b038216820361081b57565b90815180825260208080930193019160005b828110611782575050505090565b83516001600160a01b031685529381019392810192600101611774565b60005b8381106117b25750506000910152565b81810151838201526020016117a2565b906020916117db8151809281855285808601910161179f565b601f01601f1916010190565b906117fa90604083526040830190611762565b90602090818184039101528251908183528083019281808460051b8301019501936000915b84831061182f5750505050505090565b909192939495848061184d600193601f198682030187528a516117c2565b980193019301919493929061181f565b90815180825260208080930193019160005b82811061187d575050505090565b83518552938101939281019260010161186f565b606060031982011261081b57600435906001600160401b03821161081b576118bb916004016116df565b90916001600160a01b0390602435828116810361081b5791604435908116810361081b5790565b608060031982011261081b57600435906001600160401b03821161081b5761190c916004016116df565b90916001600160a01b0390602435828116810361081b5791604435908116810361081b579060643590565b6001600160401b03811161194a57604052565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761194a57604052565b604081019081106001600160401b0382111761194a57604052565b90601f801991011681019081106001600160401b0382111761194a57604052565b6001600160401b03811161194a5760051b60200190565b81601f8201121561081b578035906119e5826119b7565b926040926119f584519586611996565b808552602091828087019260061b8501019381851161081b578301915b848310611a225750505050505090565b858383031261081b57855190868201908282106001600160401b03831117611a6857879286928452611a538661174e565b81528286013583820152815201920191611a12565b60246000634e487b7160e01b81526041600452fd5b6001600160401b03811161194a57601f01601f191660200190565b929192611aa482611a7d565b91611ab26040519384611996565b82948184528183011161081b578281602093846000960137010152565b9080601f8301121561081b57816020611aea93359101611a98565b90565b9181601f8401121561081b578235916001600160401b03831161081b576020808501948460051b01011161081b57565b15611b2457565b60405162461bcd60e51b8152602060048201526016602482015275141c9bdd1bd8dbdb081b9bdd081cdd5c1c1bdc9d195960521b6044820152606490fd5b9081602091031261081b5751801515810361081b5790565b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064820192909252611bc191611bbc8260848101610651565b611bc3565b565b600080611c0d9260018060a01b03169360208151910182865af13d15611c56573d90611bee82611a7d565b91611bfc6040519384611996565b82523d6000602084013e5b83611c5e565b8051908115159182611c3b575b5050611c235750565b60249060405190635274afe760e01b82526004820152fd5b611c4e9250602080918301019101611b62565b153880611c1a565b606090611c07565b90611c855750805115611c7357805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580611cb8575b611c96575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15611c8e565b15611cc857565b606460405162461bcd60e51b815260206004820152602060248201527f556e617574686f72697a656420666c617368206c6f616e2070726f76696465726044820152fd5b60405163a9059cbb60e01b60208201526001600160a01b0390921660248301526044820192909252611bc191611bbc8260648101610651565b15611d4c57565b60405162461bcd60e51b815260206004820152601b60248201527f46726f6d2070726f746f636f6c206e6f7420737570706f7274656400000000006044820152606490fd5b15611d9857565b60405162461bcd60e51b815260206004820152601960248201527f546f2070726f746f636f6c206e6f7420737570706f72746564000000000000006044820152606490fd5b805115611dea5760200190565b634e487b7160e01b600052603260045260246000fd5b8051821015611dea5760209160051b010190565b51906001600160a01b038216820361081b57565b939492959091956000956020611e47604051928381519384920161179f565b81019087825260208160018060a01b0393030190205416936020611e74604051928381519384920161179f565b81018781528190036020019020546001600160a01b031691611e97851515611d45565b611ea2831515611d91565b60405163095ea7b360e01b81526001600160a01b038616600482015260248101899052602081806044810103818b6001600160a01b038a165af1801561236c57612377575b5060405163118e31b760e01b81526001600160a01b03858116600483015287166024820152602081604481895afa90811561236c57889161233a575b50853b1561031d57604051631da649cf60e01b81526001600160a01b03868116600483015288166024820152604481018a90528881606481838b5af1801561217357612327575b5060405163118e31b760e01b81526001600160a01b038681166004830152881660248201526020816044818a5afa9081156121735789916122f5575b5010156122a057865b82518110156121e6576001600160a01b03611fca8285611e00565b5151166020611fd98386611e00565b510151604051635820ba6360e01b81526001600160a01b0388811660048301526024820193909352918916604483015260648201526020816084818c8b5af19081156121735789916121a8575b5061206a6020806120378588611e00565b51015160405163095ea7b360e01b81526001600160a01b0389166004820152602481019190915291829081906044820190565b03818d6001600160a01b0387165af1801561219d5761217e575b506120d660405161209481611960565b602a81527f4465706f736974696e6720636f6c6c61746572616c20696e746f2074686520746020820152691bc81c1c9bdd1bd8dbdb60b21b60408201526125b5565b60206120e28386611e00565b510151853b1561083457604051634108d0af60e01b81526001600160a01b038881166004830152928316602482015260448101919091529088166064820152888160848183895af180156121735790899161215f575b5050600019811461214b57600101611faf565b634e487b7160e01b88526011600452602488fd5b61216890611937565b61031d578738612138565b6040513d8b823e3d90fd5b6121969060203d602011610acd57610abe8183611996565b5038612084565b6040513d8c823e3d90fd5b90506020813d6020116121de575b816121c360209383611996565b810103126121da576121d490611e14565b38612026565b8880fd5b3d91506121b6565b50969492919350506122366040516121fd81611960565b602181527f426f72726f77696e672064656274206f6e2074686520746f2070726f746f636f6020820152601b60fa1b60408201526125b5565b823b1561083c576040516314890dcb60e21b81526001600160a01b03918216600482015291166024820152604481019290925282908290606490829084905af1801561229557612284575050565b61228e8291611937565b6105995750565b6040513d84823e3d90fd5b60405162461bcd60e51b815260206004820152602760248201527f52657061796d656e7420646964206e6f742072656475636520626f72726f772060448201526662616c616e636560c81b6064820152608490fd5b90506020813d60201161231f575b8161231060209383611996565b8101031261081b575138611fa6565b3d9150612303565b61233390989198611937565b9638611f6a565b90506020813d602011612364575b8161235560209383611996565b8101031261031d575138611f23565b3d9150612348565b6040513d8a823e3d90fd5b61238f9060203d602011610acd57610abe8183611996565b5038611ee7565b908060209392818452848401376000828201840152601f01601f1916010190565b96949198979592909860c088019060018060a01b03809b1689528a60209116818a0152604092838a015260c060608a015285518092528060e08a019601926000905b83821061242c575050505050611aea9697509082918661241e94036080880152612396565b9260a0818503910152612396565b845180518e1689528301518884015296870196938201936001909101906123f9565b9092919261245b81611a7d565b916124696040519384611996565b82948284528282011161081b576020611bc193019061179f565b9080601f8301121561081b578151611aea9260200161244e565b81601f8201121561081b578051916124b4836119b7565b926124c26040519485611996565b808452602092838086019260051b82010192831161081b578301905b8282106124ec575050505090565b8380916124f884611e14565b8152019101906124de565b91909160408184031261081b578051906001600160401b039182811161081b578461252f91830161249d565b93602091828101519084821161081b570181601f8201121561081b578051612556816119b7565b946125646040519687611996565b818652848087019260051b8401019380851161081b57858401925b858410612590575050505050505090565b835183811161081b5787916125aa848480948a0101612483565b81520193019261257f565b600080916040516125f1816125e3602082019463104c13eb60e21b86526020602484015260448301906117c2565b03601f198101835282611996565b51906a636f6e736f6c652e6c6f675afa50565b6000919082916125f160405180926126356020830195632d839cb360e21b87526040602485015260648401906117c2565b90604483015203601f19810183528261199656fea2646970667358221220ebd58a72c05acba8dd6c990a74795aec01f3ecc2cafbf75e609e6e5a8a409b2864736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3776,
        "contract": "contracts/RouterGateway.sol:RouterGateway",
        "label": "gateways",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_contract(IGateway)7864)"
      },
      {
        "astId": 3779,
        "contract": "contracts/RouterGateway.sol:RouterGateway",
        "label": "balancerV3Vault",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVault)8692"
      },
      {
        "astId": 3782,
        "contract": "contracts/RouterGateway.sol:RouterGateway",
        "label": "balancerV2Vault",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IFlashLoanProvider)3767"
      }
    ],
    "types": {
      "t_contract(IFlashLoanProvider)3767": {
        "encoding": "inplace",
        "label": "contract IFlashLoanProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IGateway)7864": {
        "encoding": "inplace",
        "label": "contract IGateway",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)8692": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_contract(IGateway)7864)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => contract IGateway)",
        "numberOfBytes": "32",
        "value": "t_contract(IGateway)7864"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}