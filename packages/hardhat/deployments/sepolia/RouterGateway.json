{
  "address": "0xc3FEDD5F3CFa9386380C7590a6d0C35b55a42395",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aaveGateway",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "compoundGateway",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "v3vault",
          "type": "address"
        },
        {
          "internalType": "contract IFlashLoanProvider",
          "name": "v2Vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "balancerV2Vault",
      "outputs": [
        {
          "internalType": "contract IFlashLoanProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerV3Vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "gateways",
      "outputs": [
        {
          "internalType": "contract IGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGateway.Collateral[]",
          "name": "collaterals",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "fromProtocol",
          "type": "string"
        }
      ],
      "name": "getFromProtocolApprovalsForMove",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPossibleCollaterals",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "collateralAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "symbols",
          "type": "string[]"
        },
        {
          "internalType": "uint8[]",
          "name": "decimals",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "toProtocol",
          "type": "string"
        }
      ],
      "name": "getToProtocolApprovalsForMove",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "repayAll",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGateway.Collateral[]",
          "name": "collaterals",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "fromProtocol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "toProtocol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "flashLoanVersion",
          "type": "string"
        }
      ],
      "name": "moveDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "feeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "receiveFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGateway.Collateral[]",
          "name": "collaterals",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "fromProtocol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "toProtocol",
          "type": "string"
        }
      ],
      "name": "receiveFlashLoanV3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "supply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "supplyWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf533653214a45df7b1181fe19fb673ff9f63496df4fe66c197485d2c0c525dc3",
  "receipt": {
    "to": null,
    "from": "0x58d21499B5A3374a486B3F412Cca43b76692eF15",
    "contractAddress": "0xc3FEDD5F3CFa9386380C7590a6d0C35b55a42395",
    "transactionIndex": 97,
    "gasUsed": "2807771",
    "logsBloom": "0x
    "blockHash": "0xa62d95e5fd9cf4400ce2d724edba6eb1da906b0742f5f508f3c9e4244099c611",
    "transactionHash": "0xf533653214a45df7b1181fe19fb673ff9f63496df4fe66c197485d2c0c525dc3",
    "logs": [],
    "blockNumber": 7734383,
    "cumulativeGasUsed": "20017780",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBe9e1BE5448d4A4e4f93f43b6D4bdbb5BD417c3E",
    "0xA0991f146B6ff0fFbF81AE6FccAcBf9EB136FdCF",
    "0xbA1333333333a1BA1108E8412f11850A5C319bA9",
    "0xBA12222222228d8Ba445958a75a0704d566BF2C8"
  ],
  "numDeployments": 1,
  "solcInputHash": "7091fb1055ddb464e4bb4684cfd7dd13",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aaveGateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compoundGateway\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"v3vault\",\"type\":\"address\"},{\"internalType\":\"contract IFlashLoanProvider\",\"name\":\"v2Vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"balancerV2Vault\",\"outputs\":[{\"internalType\":\"contract IFlashLoanProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerV3Vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gateways\",\"outputs\":[{\"internalType\":\"contract IGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGateway.Collateral[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"fromProtocol\",\"type\":\"string\"}],\"name\":\"getFromProtocolApprovalsForMove\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPossibleCollaterals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"collateralAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimals\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"toProtocol\",\"type\":\"string\"}],\"name\":\"getToProtocolApprovalsForMove\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"repayAll\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGateway.Collateral[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"fromProtocol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toProtocol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"flashLoanVersion\",\"type\":\"string\"}],\"name\":\"moveDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGateway.Collateral[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"fromProtocol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toProtocol\",\"type\":\"string\"}],\"name\":\"receiveFlashLoanV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"supplyWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RouterGateway.sol\":\"RouterGateway\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/RouterGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IGateway.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/balancer/IVault.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n// Interface for a v2\\u2013style flash loan provider (e.g. Balancer v2)\\ninterface IFlashLoanProvider {\\n    function flashLoan(\\n        address receiver,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata userData\\n    ) external;\\n}\\n\\ncontract RouterGateway {\\n    using SafeERC20 for IERC20;\\n\\n    // Mapping from protocol name to gateway contract\\n    mapping(string => IGateway) public gateways;\\n    IVault public balancerV3Vault;\\n    IFlashLoanProvider public balancerV2Vault;\\n    constructor(address aaveGateway, address compoundGateway, IVault v3vault, IFlashLoanProvider v2Vault) {\\n        gateways[\\\"aave\\\"] = IGateway(aaveGateway);\\n        gateways[\\\"compound\\\"] = IGateway(compoundGateway);\\n        gateways[\\\"compound v3\\\"] = IGateway(compoundGateway);\\n        gateways[\\\"aave v3\\\"] = IGateway(aaveGateway);\\n        balancerV3Vault = v3vault;\\n        balancerV2Vault = v2Vault;\\n    }\\n\\n    function supplyWithPermit(\\n        string calldata protocolName,\\n        address token,\\n        address user,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        // Get the gateway for the specified protocol\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n\\n        // Execute the permit\\n        IERC20Permit(token).permit(\\n            msg.sender,\\n            address(this),\\n            amount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        // Transfer tokens from user to this contract (no need for approval now)\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Approve gateway to spend tokens\\n        IERC20(token).approve(address(gateway), amount);\\n\\n        // Forward deposit call to the appropriate gateway\\n        gateway.deposit(token, user, amount);\\n    }\\n\\n    function supply(\\n        string calldata protocolName,\\n        address token,\\n        address user,\\n        uint256 amount\\n    ) external {\\n        // Get the gateway for the specified protocol\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n\\n        // Transfer tokens from user to this contract\\n        console.log(\\\"Transferring tokens from user to this contract\\\", amount);\\n        IERC20(token).safeTransferFrom(user, address(this), amount);\\n\\n        // Approve gateway to spend tokens\\n        console.log(\\\"Approving gateway to spend tokens\\\");\\n        IERC20(token).approve(address(gateway), amount);\\n\\n        // Forward deposit call to the appropriate gateway\\n        console.log(\\\"Forwarding deposit call to the appropriate gateway\\\");\\n        gateway.deposit(token, user, amount);\\n    }\\n\\n    function repay(\\n        string calldata protocolName,\\n        address token,\\n        address user,\\n        uint256 amount\\n    ) external {\\n        // Get the gateway for the specified protocol\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n\\n        // Transfer tokens from user to this contract\\n        console.log(\\\"Transferring tokens from user to this contract for repayment\\\", amount);\\n        IERC20(token).safeTransferFrom(user, address(this), amount);\\n\\n        // Approve gateway to spend tokens\\n        console.log(\\\"Approving gateway to spend tokens for repayment\\\");\\n        IERC20(token).approve(address(gateway), amount);\\n\\n        // Forward repay call to the appropriate gateway\\n        console.log(\\\"Forwarding repay call to the appropriate gateway\\\");\\n        gateway.repay(token, user, amount);\\n    }\\n\\n    function getBalance(\\n        string calldata protocolName,\\n        address token,\\n        address user\\n    ) external view returns (uint256) {\\n        // Get the gateway for the specified protocol\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n\\n        // Forward balance call to the appropriate gateway\\n        return gateway.getBalance(token, user);\\n    }\\n\\n    function getBorrowBalance(\\n        string calldata protocolName,\\n        address token,\\n        address user\\n    ) external view returns (uint256) {\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n        return gateway.getBorrowBalance(token, user);\\n    }\\n    \\n    // -------------------------------------------------------------------------\\n    // Common Debt Moving Logic (Flash Loan\\u2013agnostic)\\n    // -------------------------------------------------------------------------\\n    //\\n    // This internal function is completely unaware of any flash loan details.\\n    // It simply moves debt from one protocol to another:\\n    // 1. Repays the debt on the \\\"from\\\" protocol.\\n    // 2. Withdraws collateral from the \\\"from\\\" protocol.\\n    // 3. Deposits collateral into the \\\"to\\\" protocol.\\n    // 4. Borrows the same amount on the \\\"to\\\" protocol.\\n    //\\n    function _moveDebtCommon(\\n        address user,\\n        address debtToken,\\n        uint256 debtAmount,\\n        IGateway.Collateral[] memory collaterals,\\n        string memory fromProtocol,\\n        string memory toProtocol\\n    ) internal {\\n        IGateway fromGateway = gateways[fromProtocol];\\n        IGateway toGateway = gateways[toProtocol];\\n        require(address(fromGateway) != address(0), \\\"From protocol not supported\\\");\\n        require(address(toGateway) != address(0), \\\"To protocol not supported\\\");\\n\\n        // Repay the debt on the \\\"from\\\" protocol\\n        {\\n            IERC20(debtToken).approve(address(fromGateway), debtAmount);\\n            uint256 borrowBalanceBefore = fromGateway.getBorrowBalance(debtToken, user);\\n            fromGateway.repay(debtToken, user, debtAmount);\\n            uint256 borrowBalanceAfter = fromGateway.getBorrowBalance(debtToken, user);\\n            require(borrowBalanceAfter < borrowBalanceBefore, \\\"Repayment did not reduce borrow balance\\\");\\n        }\\n        // For each collateral asset, withdraw then deposit into the target protocol.\\n        for (uint i = 0; i < collaterals.length; i++) {\\n            address underlyingReceived = fromGateway.withdrawCollateral(debtToken, collaterals[i].token, user, collaterals[i].amount);\\n            IERC20(underlyingReceived).approve(address(toGateway), collaterals[i].amount);\\n            console.log(\\\"Depositing collateral into the to protocol\\\");\\n            toGateway.depositCollateral(debtToken, underlyingReceived, collaterals[i].amount, user);\\n        }\\n\\n        // Borrow the debt on the \\\"to\\\" protocol.\\n        console.log(\\\"Borrowing debt on the to protocol\\\");\\n        toGateway.borrow(debtToken, user, debtAmount);\\n    }\\n\\n    // -------------------------------------------------------------------------\\n    // Flash Loan Wrapper for Balancer V2\\n    // -------------------------------------------------------------------------\\n    //\\n    // In a Balancer v2 flash loan the tokens are transferred (or \\\"pulled\\\") into this\\n    // contract as soon as they are approved. This function decodes the userData,\\n    // calls the common debt move function, then repays the principal plus fee.\\n    //\\n    function receiveFlashLoan(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata feeAmounts,\\n        bytes calldata userData\\n    ) external {\\n        require(msg.sender == address(balancerV2Vault), \\\"Unauthorized flash loan provider\\\");\\n\\n        // Decode userData to extract move debt parameters.\\n        (\\n            address user,\\n            address debtToken,\\n            uint256 debtAmount,\\n            IGateway.Collateral[] memory collaterals,\\n            string memory fromProtocol,\\n            string memory toProtocol\\n        ) = abi.decode(userData, (address, address, uint256, IGateway.Collateral[], string, string));\\n\\n        console.log(\\\"Balancer V2 flash loan callback received\\\");\\n        require(feeAmounts.length == 1, \\\"Balancer V2 flash loan fee amount length mismatch\\\");\\n        require(feeAmounts[0] == 0, \\\"Flash loans are free\\\");\\n\\n        // Execute the common debt move logic.\\n        _moveDebtCommon(user, debtToken, debtAmount, collaterals, fromProtocol, toProtocol);\\n\\n        // Repay the flash loan provider (principal + fee).\\n        uint256 totalRepayment = debtAmount + feeAmounts[0];\\n        IERC20(debtToken).safeTransfer(address(balancerV2Vault), totalRepayment);\\n    }\\n\\n    // -------------------------------------------------------------------------\\n    // Flash Loan Wrapper for Balancer V3\\n    // -------------------------------------------------------------------------\\n    //\\n    // For Balancer v3, tokens are delivered via a call to sendTo.\\n    // This wrapper assumes that the tokens have been sent before the call.\\n    // After calling the common move debt function, it repays the flash loan,\\n    // then calls settle if required.\\n    //\\n    function receiveFlashLoanV3(\\n        address user,\\n        address debtToken,\\n        uint256 debtAmount,\\n        IGateway.Collateral[] memory collaterals,\\n        string calldata fromProtocol,\\n        string calldata toProtocol\\n    ) external {\\n        require(msg.sender == address(balancerV3Vault), \\\"Unauthorized flash loan provider\\\");\\n\\n        console.log(\\\"Balancer V3 flash loan callback received\\\");\\n\\n        // Execute the common debt move logic.\\n        _moveDebtCommon(user, debtToken, debtAmount, collaterals, fromProtocol, toProtocol);\\n\\n        // Repay the flash loan provider (principal only, assuming no fee).\\n        IERC20(debtToken).safeTransfer(address(balancerV3Vault), debtAmount);\\n\\n        // Optionally settle the flash loan if required by the provider.\\n        balancerV3Vault.settle(debtToken, debtAmount);\\n    }\\n\\n\\n   // -------------------------------------------------------------------------\\n    // moveDebt: Supports both flash loan providers\\n    // -------------------------------------------------------------------------\\n    //\\n    // The caller provides the flashLoanVersion (\\\"v2\\\" or \\\"v3\\\").\\n    // Based on this parameter, the function encodes the debt move parameters\\n    // appropriately and calls either the v2 flashLoan function or the v3 unlock function.\\n    //\\n    function moveDebt(\\n        address user,\\n        address debtToken,\\n        uint256 debtAmount,\\n        bool repayAll,\\n        IGateway.Collateral[] memory collaterals,\\n        string calldata fromProtocol,\\n        string calldata toProtocol,\\n        string calldata flashLoanVersion\\n    ) external {\\n        if (repayAll) {\\n            IGateway fromGateway = gateways[fromProtocol];\\n            require(address(fromGateway) != address(0), \\\"From protocol not supported\\\");\\n            debtAmount = fromGateway.getBorrowBalance(debtToken, user);\\n        }\\n\\n        if (keccak256(bytes(flashLoanVersion)) == keccak256(bytes(\\\"v2\\\"))) {\\n            // For Balancer v2, encode parameters without function selector.\\n            bytes memory data = abi.encode(user, debtToken, debtAmount, collaterals, fromProtocol, toProtocol);\\n            IERC20[] memory tokens = new IERC20[](1);\\n            tokens[0] = IERC20(debtToken);\\n            uint256[] memory amounts = new uint256[](1);\\n            amounts[0] = debtAmount;\\n            console.log(\\\"Requesting Balancer V2 flash loan\\\");\\n            balancerV2Vault.flashLoan(address(this), tokens, amounts, data);\\n        } else if (keccak256(bytes(flashLoanVersion)) == keccak256(bytes(\\\"v3\\\"))) {\\n            // For Balancer v3, encode parameters with the function selector.\\n            bytes memory data = abi.encodeWithSelector(\\n                this.receiveFlashLoanV3.selector,\\n                user,\\n                debtToken,\\n                debtAmount,\\n                collaterals,\\n                fromProtocol,\\n                toProtocol\\n            );\\n            console.log(\\\"Requesting Balancer V3 flash loan\\\");\\n            IVault(address(balancerV3Vault)).unlock(data);\\n        } else {\\n            revert(\\\"Unsupported flash loan version\\\");\\n        }\\n    }\\n\\n    function getPossibleCollaterals(\\n        address token, \\n        string calldata protocolName, \\n        address user\\n    ) external view returns (\\n        address[] memory collateralAddresses,\\n        uint256[] memory balances,\\n        string[] memory symbols,\\n        uint8[] memory decimals\\n    ) {\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n        return gateway.getPossibleCollaterals(token, user);\\n    }\\n\\n    function getFromProtocolApprovalsForMove(address debtToken, IGateway.Collateral[] calldata collaterals, string calldata fromProtocol) external view returns (address[] memory, bytes[] memory) {\\n        IGateway fromGateway = gateways[fromProtocol];\\n        require(address(fromGateway) != address(0), \\\"From protocol not supported\\\");\\n        (address[] memory fromTarget, bytes[] memory fromData) = fromGateway.getEncodedCollateralApprovals(debtToken, collaterals);\\n        return (fromTarget, fromData);\\n    }\\n\\n    function getToProtocolApprovalsForMove(address debtToken, uint256 debtAmount, string calldata toProtocol) external view returns (address[] memory, bytes[] memory) {\\n        IGateway toGateway = gateways[toProtocol];\\n        require(address(toGateway) != address(0), \\\"To protocol not supported\\\");\\n        (address[] memory toTarget, bytes[] memory toData) = toGateway.getEncodedDebtApproval(debtToken, debtAmount);\\n        return (toTarget, toData);\\n    }\\n} \",\"keccak256\":\"0x495d1a3e0454a125fd02ed14cae501c9272bfe7ea241a4f646e0f509ce0f6baf\",\"license\":\"MIT\"},\"contracts/interfaces/IGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IGateway {\\n    function deposit(address token, address user, uint256 amount) external;\\n    \\n    function borrow(address token, address user, uint256 amount) external;\\n    function repay(address token, address user, uint256 amount) external;\\n\\n    function depositCollateral(address market, address collateral, uint256 amount, address receiver) external;\\n    function withdrawCollateral(address market, address collateral, address user, uint256 amount) external returns (address);\\n    \\n\\n    function getBalance(address token, address user) external view returns (uint256);\\n    function getBorrowBalance(address token, address user) external view returns (uint256);\\n    function getBorrowRate(address token) external view returns (uint256, bool);\\n    function getSupplyRate(address token) external view returns (uint256, bool);\\n    function getLtv(address token, address user) external view returns (uint256);\\n    function getPossibleCollaterals(address token, address user) external view returns (\\n        address[] memory collateralAddresses,\\n        uint256[] memory balances,\\n        string[] memory symbols,\\n        uint8[] memory decimals\\n    );\\n\\n    struct Collateral {\\n        address token;\\n        uint256 amount;\\n    }    \\n    function getEncodedCollateralApprovals(address token, Collateral[] calldata collaterals) external view returns (address[] memory target, bytes[] memory data);\\n    function getEncodedDebtApproval(address token, uint256 amount) external view returns (address[] memory target, bytes[] memory data);\\n}\",\"keccak256\":\"0xf636e5db0aeea85814b2c61bfeef3b994095ca1575c2485168878a79bdb482d3\",\"license\":\"MIT\"},\"contracts/interfaces/balancer/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface IVault {\\n    function unlock(bytes calldata data) external returns (bytes memory result);\\n    function sendTo(address token, address to, uint256 amount) external;\\n    function settle(address token, uint256 amountHint) external returns (uint256 credit);\\n}\\n\",\"keccak256\":\"0x557c8d97fb63b697548d4f4dd977017911e332d53657302fe8799dc89570b5b6\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620030fc380380620030fc833981016040819052620000349162000142565b8360006040516200004f90636161766560e01b815260040190565b9081526040805191829003602001822080546001600160a01b039485166001600160a01b0319918216179091556718dbdb5c1bdd5b9960c21b835260006008840181905282519384900360280184208054988616988316891790556a636f6d706f756e6420763360a81b8452600b8401819052825193849003602b01842080548316909817909755666161766520763360c81b8352600783019690965251908190036027019020805485169582169590951790945560018054841692851692909217909155600280549092169216919091179055620001aa565b6001600160a01b03811681146200013f57600080fd5b50565b600080600080608085870312156200015957600080fd5b8451620001668162000129565b6020860151909450620001798162000129565b60408601519093506200018c8162000129565b60608601519092506200019f8162000129565b939692955090935050565b612f4280620001ba6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063ac3cded81161008c578063d7b28d5f11610066578063d7b28d5f146101f8578063db236a1f1461020b578063e327d3121461023f578063f04f27071461025257600080fd5b8063ac3cded8146101bf578063ad3a5f47146101d2578063caf89ac5146101e557600080fd5b806340c7dd62116100c857806340c7dd62146101475780635c738121146101685780637a04707d1461017b5780637ffe721e1461019e57600080fd5b80630acefd35146100ef57806310c0a1571461011f57806325d5691614610132575b600080fd5b600154610102906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600254610102906001600160a01b031681565b610145610140366004611bea565b610265565b005b61015a610155366004611c8c565b610435565b604051610116929190611d7b565b61015a610176366004611ded565b610539565b61018e610189366004611ea0565b610610565b6040516101169493929190611f6a565b6101b16101ac366004612004565b6106ea565b604051908152602001610116565b6101456101cd366004612060565b6107b4565b6101456101e03660046121f8565b610956565b6101b16101f3366004612004565b610ae4565b610145610206366004612060565b610b67565b610102610219366004612332565b80516020818301810180516000825292820191909301209152546001600160a01b031681565b61014561024d366004612387565b610ccf565b6101456102603660046124cc565b6110e5565b6000808a8a60405161027892919061256e565b908152604051908190036020019020546001600160a01b03169050806102b95760405162461bcd60e51b81526004016102b09061257e565b60405180910390fd5b60405163d505accf60e01b8152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c481018390526001600160a01b0389169063d505accf9060e401600060405180830381600087803b15801561032557600080fd5b505af1158015610339573d6000803e3d6000fd5b50610353925050506001600160a01b0389163330896112ac565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820188905289169063095ea7b3906044016020604051808303816000875af11580156103a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c691906125ae565b50604051638340f54960e01b81526001600160a01b03821690638340f549906103f7908b908b908b906004016125cb565b600060405180830381600087803b15801561041157600080fd5b505af1158015610425573d6000803e3d6000fd5b5050505050505050505050505050565b606080600080858560405161044b92919061256e565b908152604051908190036020019020546001600160a01b03169050806104af5760405162461bcd60e51b8152602060048201526019602482015278151bc81c1c9bdd1bd8dbdb081b9bdd081cdd5c1c1bdc9d1959603a1b60448201526064016102b0565b604051636ae2b0eb60e11b81526001600160a01b03888116600483015260248201889052600091829184169063d5c561d690604401600060405180830381865afa158015610501573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261052991908101906126a3565b909a909950975050505050505050565b606080600080858560405161054f92919061256e565b908152604051908190036020019020546001600160a01b03169050806105875760405162461bcd60e51b81526004016102b090612777565b600080826001600160a01b031663a342986c8b8b8b6040518463ffffffff1660e01b81526004016105ba939291906127ae565b600060405180830381865afa1580156105d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105ff91908101906126a3565b909b909a5098505050505050505050565b606080606080600080888860405161062992919061256e565b908152604051908190036020019020546001600160a01b03169050806106615760405162461bcd60e51b81526004016102b09061257e565b60405163104e999d60e01b81526001600160a01b038a81166004830152878116602483015282169063104e999d90604401600060405180830381865afa1580156106af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106d7919081019061290b565b929c919b50995090975095505050505050565b600080600086866040516106ff92919061256e565b908152604051908190036020019020546001600160a01b03169050806107375760405162461bcd60e51b81526004016102b09061257e565b60405163d4fac45d60e01b81526001600160a01b038581166004830152848116602483015282169063d4fac45d906044015b602060405180830381865afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa9190612a0c565b9695505050505050565b60008086866040516107c792919061256e565b908152604051908190036020019020546001600160a01b03169050806107ff5760405162461bcd60e51b81526004016102b09061257e565b6108216040518060600160405280602e8152602001612e3d602e91398361130c565b6108366001600160a01b0385168430856112ac565b610857604051806060016040528060218152602001612dc960219139611355565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af11580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca91906125ae565b506108ec604051806060016040528060328152602001612dea60329139611355565b604051638340f54960e01b81526001600160a01b03821690638340f5499061091c908790879087906004016125cb565b600060405180830381600087803b15801561093657600080fd5b505af115801561094a573d6000803e3d6000fd5b50505050505050505050565b6001546001600160a01b031633146109b05760405162461bcd60e51b815260206004820181905260248201527f556e617574686f72697a656420666c617368206c6f616e2070726f766964657260448201526064016102b0565b6109d1604051806060016040528060288152602001612e9560289139611355565b610a488888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a915089908190840183828082843760009201919091525061139b92505050565b600154610a62906001600160a01b03898116911688611970565b6001546040516315afd40960e01b81526001600160a01b03898116600483015260248201899052909116906315afd409906044016020604051808303816000875af1158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190612a0c565b505050505050505050565b60008060008686604051610af992919061256e565b908152604051908190036020019020546001600160a01b0316905080610b315760405162461bcd60e51b81526004016102b09061257e565b60405163118e31b760e01b81526001600160a01b038581166004830152848116602483015282169063118e31b790604401610769565b6000808686604051610b7a92919061256e565b908152604051908190036020019020546001600160a01b0316905080610bb25760405162461bcd60e51b81526004016102b09061257e565b610bd46040518060600160405280603c8152602001612d6c603c91398361130c565b610be96001600160a01b0385168430856112ac565b610c0a6040518060600160405280602f8152602001612ebd602f9139611355565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af1158015610c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7d91906125ae565b50610c9f604051806060016040528060308152602001612d3c60309139611355565b604051631da649cf60e01b81526001600160a01b03821690631da649cf9061091c908790879087906004016125cb565b8715610d96576000808787604051610ce892919061256e565b908152604051908190036020019020546001600160a01b0316905080610d205760405162461bcd60e51b81526004016102b090612777565b60405163118e31b760e01b81526001600160a01b038c811660048301528d8116602483015282169063118e31b790604401602060405180830381865afa158015610d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d929190612a0c565b9950505b60408051808201825260028152613b1960f11b602090910152517ff9446b8e937d86f0bc87cac73923491692b123ca5f8761908494703758206adf90610ddf908490849061256e565b604051809103902003610f3d5760008b8b8b8a8a8a8a8a604051602001610e0d989796959493929190612a4e565b60408051601f198184030181526001808452838301909252925060009190602080830190803683370190505090508b81600081518110610e4f57610e4f612ae0565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508b81600081518110610ea057610ea0612ae0565b602002602001018181525050610ecd604051806060016040528060218152602001612e1c60219139611355565b600254604051632e1c224f60e11b81526001600160a01b0390911690635c38449e90610f03903090869086908990600401612af6565b600060405180830381600087803b158015610f1d57600080fd5b505af1158015610f31573d6000803e3d6000fd5b505050505050506110d8565b6040805180820182526002815261763360f01b602090910152517fec97b8914cfb6741ca720b49246676ddcc2c227e4046450a8d815244c93673da90610f86908490849061256e565b60405180910390200361109057600063ad3a5f4760e01b8c8c8c8b8b8b8b8b604051602401610fbc989796959493929190612a4e565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050509050611012604051806060016040528060218152602001612da860219139611355565b6001546040516348c8949160e01b81526001600160a01b03909116906348c8949190611042908490600401612b7a565b6000604051808303816000875af1158015611061573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110899190810190612b8d565b50506110d8565b60405162461bcd60e51b815260206004820152601e60248201527f556e737570706f7274656420666c617368206c6f616e2076657273696f6e000060448201526064016102b0565b5050505050505050505050565b6002546001600160a01b0316331461113f5760405162461bcd60e51b815260206004820181905260248201527f556e617574686f72697a656420666c617368206c6f616e2070726f766964657260448201526064016102b0565b6000808080808061115287890189612bc1565b95509550955095509550955061117f604051806060016040528060288152602001612d1460289139611355565b600189146111e95760405162461bcd60e51b815260206004820152603160248201527f42616c616e63657220563220666c617368206c6f616e2066656520616d6f756e6044820152700e840d8cadccee8d040dad2e6dac2e8c6d607b1b60648201526084016102b0565b898960008181106111fc576111fc612ae0565b905060200201356000146112495760405162461bcd60e51b8152602060048201526014602482015273466c617368206c6f616e7320617265206672656560601b60448201526064016102b0565b61125786868686868661139b565b60008a8a600081811061126c5761126c612ae0565b905060200201358561127e9190612c8c565b60025490915061129b906001600160a01b03888116911683611970565b505050505050505050505050505050565b61130684856001600160a01b03166323b872dd8686866040516024016112d4939291906125cb565b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506119a6565b50505050565b6113518282604051602401611322929190612c9f565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052611a09565b5050565b611398816040516024016113699190612b7a565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052611a09565b50565b600080836040516113ac9190612cc1565b908152604051908190036020018120546001600160a01b0316915060009081906113d7908590612cc1565b908152604051908190036020019020546001600160a01b03908116915082166114125760405162461bcd60e51b81526004016102b090612777565b6001600160a01b0381166114645760405162461bcd60e51b8152602060048201526019602482015278151bc81c1c9bdd1bd8dbdb081b9bdd081cdd5c1c1bdc9d1959603a1b60448201526064016102b0565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820188905288169063095ea7b3906044016020604051808303816000875af11580156114b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d791906125ae565b5060405163118e31b760e01b81526001600160a01b03888116600483015289811660248301526000919084169063118e31b790604401602060405180830381865afa15801561152a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154e9190612a0c565b604051631da649cf60e01b81529091506001600160a01b03841690631da649cf90611581908b908d908c906004016125cb565b600060405180830381600087803b15801561159b57600080fd5b505af11580156115af573d6000803e3d6000fd5b505060405163118e31b760e01b81526001600160a01b038b811660048301528c81166024830152600093508616915063118e31b790604401602060405180830381865afa158015611604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116289190612a0c565b90508181106116895760405162461bcd60e51b815260206004820152602760248201527f52657061796d656e7420646964206e6f742072656475636520626f72726f772060448201526662616c616e636560c81b60648201526084016102b0565b505060005b85518110156118e2576000836001600160a01b0316635820ba638a8985815181106116bb576116bb612ae0565b6020026020010151600001518d8b87815181106116da576116da612ae0565b60209081029190910181015101516040516001600160e01b031960e087901b1681526001600160a01b03948516600482015292841660248401529216604482015260648101919091526084016020604051808303816000875af1158015611745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117699190612cdd565b9050806001600160a01b031663095ea7b38489858151811061178d5761178d612ae0565b6020026020010151602001516040518363ffffffff1660e01b81526004016117ca9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156117e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180d91906125ae565b5061182f6040518060600160405280602a8152602001612e6b602a9139611355565b826001600160a01b0316634108d0af8a838a868151811061185257611852612ae0565b60209081029190910181015101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015291831660248301526044820152908d166064820152608401600060405180830381600087803b1580156118b657600080fd5b505af11580156118ca573d6000803e3d6000fd5b505050505080806118da90612cfa565b91505061168e565b50611904604051806060016040528060218152602001612eec60219139611355565b6040516314890dcb60e21b81526001600160a01b03821690635224372c90611934908a908c908b906004016125cb565b600060405180830381600087803b15801561194e57600080fd5b505af1158015611962573d6000803e3d6000fd5b505050505050505050505050565b6040516001600160a01b038381166024830152604482018390526119a191859182169063a9059cbb906064016112d4565b505050565b60006119bb6001600160a01b03841683611a12565b905080516000141580156119e05750808060200190518101906119de91906125ae565b155b156119a157604051635274afe760e01b81526001600160a01b03841660048201526024016102b0565b61139881611a29565b6060611a2083836000611a4a565b90505b92915050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b606081471015611a6f5760405163cd78605960e01b81523060048201526024016102b0565b600080856001600160a01b03168486604051611a8b9190612cc1565b60006040518083038185875af1925050503d8060008114611ac8576040519150601f19603f3d011682016040523d82523d6000602084013e611acd565b606091505b5091509150611add868383611ae9565b925050505b9392505050565b606082611afe57611af982611b45565b611ae2565b8151158015611b1557506001600160a01b0384163b155b15611b3e57604051639996b31560e01b81526001600160a01b03851660048201526024016102b0565b5080611ae2565b805115611b555780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60008083601f840112611b8057600080fd5b5081356001600160401b03811115611b9757600080fd5b602083019150836020828501011115611baf57600080fd5b9250929050565b6001600160a01b038116811461139857600080fd5b8035611bd681611bb6565b919050565b60ff8116811461139857600080fd5b60008060008060008060008060006101008a8c031215611c0957600080fd5b89356001600160401b03811115611c1f57600080fd5b611c2b8c828d01611b6e565b909a5098505060208a0135611c3f81611bb6565b965060408a0135611c4f81611bb6565b955060608a0135945060808a0135935060a08a0135611c6d81611bdb565b8093505060c08a0135915060e08a013590509295985092959850929598565b60008060008060608587031215611ca257600080fd5b8435611cad81611bb6565b93506020850135925060408501356001600160401b03811115611ccf57600080fd5b611cdb87828801611b6e565b95989497509550505050565b600081518084526020808501945080840160005b83811015611d205781516001600160a01b031687529582019590820190600101611cfb565b509495945050505050565b60005b83811015611d46578181015183820152602001611d2e565b50506000910152565b60008151808452611d67816020860160208601611d2b565b601f01601f19169290920160200192915050565b604081526000611d8e6040830185611ce7565b6020838203818501528185518084528284019150828160051b85010183880160005b83811015611dde57601f19878403018552611dcc838351611d4f565b94860194925090850190600101611db0565b50909998505050505050505050565b600080600080600060608688031215611e0557600080fd5b8535611e1081611bb6565b945060208601356001600160401b0380821115611e2c57600080fd5b818801915088601f830112611e4057600080fd5b813581811115611e4f57600080fd5b8960208260061b8501011115611e6457600080fd5b602083019650809550506040880135915080821115611e8257600080fd5b50611e8f88828901611b6e565b969995985093965092949392505050565b60008060008060608587031215611eb657600080fd5b8435611ec181611bb6565b935060208501356001600160401b03811115611edc57600080fd5b611ee887828801611b6e565b9094509250506040850135611efc81611bb6565b939692955090935050565b600081518084526020808501945080840160005b83811015611d2057815187529582019590820190600101611f1b565b600081518084526020808501945080840160005b83811015611d2057815160ff1687529582019590820190600101611f4b565b608081526000611f7d6080830187611ce7565b602083820381850152611f908288611f07565b915083820360408501528186518084528284019150828160051b85010183890160005b83811015611fe157601f19878403018552611fcf838351611d4f565b94860194925090850190600101611fb3565b50508681036060880152611ff58189611f37565b9b9a5050505050505050505050565b6000806000806060858703121561201a57600080fd5b84356001600160401b0381111561203057600080fd5b61203c87828801611b6e565b909550935050602085013561205081611bb6565b91506040850135611efc81611bb6565b60008060008060006080868803121561207857600080fd5b85356001600160401b0381111561208e57600080fd5b61209a88828901611b6e565b90965094505060208601356120ae81611bb6565b925060408601356120be81611bb6565b949793965091946060013592915050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715612107576121076120cf565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612135576121356120cf565b604052919050565b60006001600160401b03821115612156576121566120cf565b5060051b60200190565b600082601f83011261217157600080fd5b813560206121866121818361213d565b61210d565b82815260069290921b840181019181810190868411156121a557600080fd5b8286015b848110156121ed57604081890312156121c25760008081fd5b6121ca6120e5565b81356121d581611bb6565b815281850135858201528352918301916040016121a9565b509695505050505050565b60008060008060008060008060c0898b03121561221457600080fd5b883561221f81611bb6565b9750602089013561222f81611bb6565b96506040890135955060608901356001600160401b038082111561225257600080fd5b61225e8c838d01612160565b965060808b013591508082111561227457600080fd5b6122808c838d01611b6e565b909650945060a08b013591508082111561229957600080fd5b506122a68b828c01611b6e565b999c989b5096995094979396929594505050565b60006001600160401b038211156122d3576122d36120cf565b50601f01601f191660200190565b600082601f8301126122f257600080fd5b8135612300612181826122ba565b81815284602083860101111561231557600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561234457600080fd5b81356001600160401b0381111561235a57600080fd5b612366848285016122e1565b949350505050565b801515811461139857600080fd5b8035611bd68161236e565b60008060008060008060008060008060006101008c8e0312156123a957600080fd5b6123b28c611bcb565b9a506123c060208d01611bcb565b995060408c013598506123d560608d0161237c565b97506001600160401b038060808e013511156123f057600080fd5b6124008e60808f01358f01612160565b97508060a08e0135111561241357600080fd5b6124238e60a08f01358f01611b6e565b909750955060c08d013581101561243957600080fd5b6124498e60c08f01358f01611b6e565b909550935060e08d013581101561245f57600080fd5b506124708d60e08e01358e01611b6e565b81935080925050509295989b509295989b9093969950565b60008083601f84011261249a57600080fd5b5081356001600160401b038111156124b157600080fd5b6020830191508360208260051b8501011115611baf57600080fd5b6000806000806000806000806080898b0312156124e857600080fd5b88356001600160401b03808211156124ff57600080fd5b61250b8c838d01612488565b909a50985060208b013591508082111561252457600080fd5b6125308c838d01612488565b909850965060408b013591508082111561254957600080fd5b6125558c838d01612488565b909650945060608b013591508082111561229957600080fd5b8183823760009101908152919050565b602080825260169082015275141c9bdd1bd8dbdb081b9bdd081cdd5c1c1bdc9d195960521b604082015260600190565b6000602082840312156125c057600080fd5b8151611ae28161236e565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600082601f83011261260057600080fd5b815160206126106121818361213d565b82815260059290921b8401810191818101908684111561262f57600080fd5b8286015b848110156121ed57805161264681611bb6565b8352918301918301612633565b6000612661612181846122ba565b905082815283838301111561267557600080fd5b611ae2836020830184611d2b565b600082601f83011261269457600080fd5b611a2083835160208501612653565b600080604083850312156126b657600080fd5b82516001600160401b03808211156126cd57600080fd5b6126d9868387016125ef565b93506020915081850151818111156126f057600080fd5b8501601f8101871361270157600080fd5b805161270f6121818261213d565b81815260059190911b8201840190848101908983111561272e57600080fd5b8584015b838110156127665780518681111561274a5760008081fd5b6127588c8983890101612683565b845250918601918601612732565b508096505050505050509250929050565b6020808252601b908201527f46726f6d2070726f746f636f6c206e6f7420737570706f727465640000000000604082015260600190565b6001600160a01b03848116825260406020808401829052838201859052600092869160608601855b888110156128055784356127e981611bb6565b84168252848301358383015293850193908501906001016127d6565b509998505050505050505050565b600082601f83011261282457600080fd5b815160206128346121818361213d565b82815260059290921b8401810191818101908684111561285357600080fd5b8286015b848110156121ed5780516001600160401b038111156128765760008081fd5b8701603f810189136128885760008081fd5b612899898683015160408401612653565b845250918301918301612857565b600082601f8301126128b857600080fd5b815160206128c86121818361213d565b82815260059290921b840181019181810190868411156128e757600080fd5b8286015b848110156121ed5780516128fe81611bdb565b83529183019183016128eb565b6000806000806080858703121561292157600080fd5b84516001600160401b038082111561293857600080fd5b612944888389016125ef565b955060209150818701518181111561295b57600080fd5b8701601f8101891361296c57600080fd5b805161297a6121818261213d565b81815260059190911b8201840190848101908b83111561299957600080fd5b928501925b828410156129b75783518252928501929085019061299e565b60408b01519098509450505050808211156129d157600080fd5b6129dd88838901612813565b935060608701519150808211156129f357600080fd5b50612a00878288016128a7565b91505092959194509250565b600060208284031215612a1e57600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060c0820160018060a01b03808c1684526020818c168186015260408b8187015260c06060870152838b5180865260e088019150838d01955060005b81811015612ab2578651805187168452850151858401529584019591830191600101612a8b565b50508681036080880152612ac7818b8d612a25565b94505050505082810360a0840152611ff5818587612a25565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b81811015612b44578551851683529483019491830191600101612b26565b50508581036040870152612b588189611f07565b93505050508281036060840152612b6f8185611d4f565b979650505050505050565b602081526000611a206020830184611d4f565b600060208284031215612b9f57600080fd5b81516001600160401b03811115612bb557600080fd5b61236684828501612683565b60008060008060008060c08789031215612bda57600080fd5b8635612be581611bb6565b95506020870135612bf581611bb6565b94506040870135935060608701356001600160401b0380821115612c1857600080fd5b612c248a838b01612160565b94506080890135915080821115612c3a57600080fd5b612c468a838b016122e1565b935060a0890135915080821115612c5c57600080fd5b50612c6989828a016122e1565b9150509295509295509295565b634e487b7160e01b600052601160045260246000fd5b80820180821115611a2357611a23612c76565b604081526000612cb26040830185611d4f565b90508260208301529392505050565b60008251612cd3818460208701611d2b565b9190910192915050565b600060208284031215612cef57600080fd5b8151611ae281611bb6565b600060018201612d0c57612d0c612c76565b506001019056fe42616c616e63657220563220666c617368206c6f616e2063616c6c6261636b207265636569766564466f7277617264696e672072657061792063616c6c20746f2074686520617070726f70726961746520676174657761795472616e7366657272696e6720746f6b656e732066726f6d207573657220746f207468697320636f6e747261637420666f722072657061796d656e7452657175657374696e672042616c616e63657220563320666c617368206c6f616e417070726f76696e67206761746577617920746f207370656e6420746f6b656e73466f7277617264696e67206465706f7369742063616c6c20746f2074686520617070726f707269617465206761746577617952657175657374696e672042616c616e63657220563220666c617368206c6f616e5472616e7366657272696e6720746f6b656e732066726f6d207573657220746f207468697320636f6e74726163744465706f736974696e6720636f6c6c61746572616c20696e746f2074686520746f2070726f746f636f6c42616c616e63657220563320666c617368206c6f616e2063616c6c6261636b207265636569766564417070726f76696e67206761746577617920746f207370656e6420746f6b656e7320666f722072657061796d656e74426f72726f77696e672064656274206f6e2074686520746f2070726f746f636f6ca264697066735822122071f82313b8402bba375772996a11cbe2c880130e5da03dd927f57388a3c1051c64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063ac3cded81161008c578063d7b28d5f11610066578063d7b28d5f146101f8578063db236a1f1461020b578063e327d3121461023f578063f04f27071461025257600080fd5b8063ac3cded8146101bf578063ad3a5f47146101d2578063caf89ac5146101e557600080fd5b806340c7dd62116100c857806340c7dd62146101475780635c738121146101685780637a04707d1461017b5780637ffe721e1461019e57600080fd5b80630acefd35146100ef57806310c0a1571461011f57806325d5691614610132575b600080fd5b600154610102906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600254610102906001600160a01b031681565b610145610140366004611bea565b610265565b005b61015a610155366004611c8c565b610435565b604051610116929190611d7b565b61015a610176366004611ded565b610539565b61018e610189366004611ea0565b610610565b6040516101169493929190611f6a565b6101b16101ac366004612004565b6106ea565b604051908152602001610116565b6101456101cd366004612060565b6107b4565b6101456101e03660046121f8565b610956565b6101b16101f3366004612004565b610ae4565b610145610206366004612060565b610b67565b610102610219366004612332565b80516020818301810180516000825292820191909301209152546001600160a01b031681565b61014561024d366004612387565b610ccf565b6101456102603660046124cc565b6110e5565b6000808a8a60405161027892919061256e565b908152604051908190036020019020546001600160a01b03169050806102b95760405162461bcd60e51b81526004016102b09061257e565b60405180910390fd5b60405163d505accf60e01b8152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c481018390526001600160a01b0389169063d505accf9060e401600060405180830381600087803b15801561032557600080fd5b505af1158015610339573d6000803e3d6000fd5b50610353925050506001600160a01b0389163330896112ac565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820188905289169063095ea7b3906044016020604051808303816000875af11580156103a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c691906125ae565b50604051638340f54960e01b81526001600160a01b03821690638340f549906103f7908b908b908b906004016125cb565b600060405180830381600087803b15801561041157600080fd5b505af1158015610425573d6000803e3d6000fd5b5050505050505050505050505050565b606080600080858560405161044b92919061256e565b908152604051908190036020019020546001600160a01b03169050806104af5760405162461bcd60e51b8152602060048201526019602482015278151bc81c1c9bdd1bd8dbdb081b9bdd081cdd5c1c1bdc9d1959603a1b60448201526064016102b0565b604051636ae2b0eb60e11b81526001600160a01b03888116600483015260248201889052600091829184169063d5c561d690604401600060405180830381865afa158015610501573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261052991908101906126a3565b909a909950975050505050505050565b606080600080858560405161054f92919061256e565b908152604051908190036020019020546001600160a01b03169050806105875760405162461bcd60e51b81526004016102b090612777565b600080826001600160a01b031663a342986c8b8b8b6040518463ffffffff1660e01b81526004016105ba939291906127ae565b600060405180830381865afa1580156105d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105ff91908101906126a3565b909b909a5098505050505050505050565b606080606080600080888860405161062992919061256e565b908152604051908190036020019020546001600160a01b03169050806106615760405162461bcd60e51b81526004016102b09061257e565b60405163104e999d60e01b81526001600160a01b038a81166004830152878116602483015282169063104e999d90604401600060405180830381865afa1580156106af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106d7919081019061290b565b929c919b50995090975095505050505050565b600080600086866040516106ff92919061256e565b908152604051908190036020019020546001600160a01b03169050806107375760405162461bcd60e51b81526004016102b09061257e565b60405163d4fac45d60e01b81526001600160a01b038581166004830152848116602483015282169063d4fac45d906044015b602060405180830381865afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa9190612a0c565b9695505050505050565b60008086866040516107c792919061256e565b908152604051908190036020019020546001600160a01b03169050806107ff5760405162461bcd60e51b81526004016102b09061257e565b6108216040518060600160405280602e8152602001612e3d602e91398361130c565b6108366001600160a01b0385168430856112ac565b610857604051806060016040528060218152602001612dc960219139611355565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af11580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca91906125ae565b506108ec604051806060016040528060328152602001612dea60329139611355565b604051638340f54960e01b81526001600160a01b03821690638340f5499061091c908790879087906004016125cb565b600060405180830381600087803b15801561093657600080fd5b505af115801561094a573d6000803e3d6000fd5b50505050505050505050565b6001546001600160a01b031633146109b05760405162461bcd60e51b815260206004820181905260248201527f556e617574686f72697a656420666c617368206c6f616e2070726f766964657260448201526064016102b0565b6109d1604051806060016040528060288152602001612e9560289139611355565b610a488888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a915089908190840183828082843760009201919091525061139b92505050565b600154610a62906001600160a01b03898116911688611970565b6001546040516315afd40960e01b81526001600160a01b03898116600483015260248201899052909116906315afd409906044016020604051808303816000875af1158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190612a0c565b505050505050505050565b60008060008686604051610af992919061256e565b908152604051908190036020019020546001600160a01b0316905080610b315760405162461bcd60e51b81526004016102b09061257e565b60405163118e31b760e01b81526001600160a01b038581166004830152848116602483015282169063118e31b790604401610769565b6000808686604051610b7a92919061256e565b908152604051908190036020019020546001600160a01b0316905080610bb25760405162461bcd60e51b81526004016102b09061257e565b610bd46040518060600160405280603c8152602001612d6c603c91398361130c565b610be96001600160a01b0385168430856112ac565b610c0a6040518060600160405280602f8152602001612ebd602f9139611355565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af1158015610c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7d91906125ae565b50610c9f604051806060016040528060308152602001612d3c60309139611355565b604051631da649cf60e01b81526001600160a01b03821690631da649cf9061091c908790879087906004016125cb565b8715610d96576000808787604051610ce892919061256e565b908152604051908190036020019020546001600160a01b0316905080610d205760405162461bcd60e51b81526004016102b090612777565b60405163118e31b760e01b81526001600160a01b038c811660048301528d8116602483015282169063118e31b790604401602060405180830381865afa158015610d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d929190612a0c565b9950505b60408051808201825260028152613b1960f11b602090910152517ff9446b8e937d86f0bc87cac73923491692b123ca5f8761908494703758206adf90610ddf908490849061256e565b604051809103902003610f3d5760008b8b8b8a8a8a8a8a604051602001610e0d989796959493929190612a4e565b60408051601f198184030181526001808452838301909252925060009190602080830190803683370190505090508b81600081518110610e4f57610e4f612ae0565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508b81600081518110610ea057610ea0612ae0565b602002602001018181525050610ecd604051806060016040528060218152602001612e1c60219139611355565b600254604051632e1c224f60e11b81526001600160a01b0390911690635c38449e90610f03903090869086908990600401612af6565b600060405180830381600087803b158015610f1d57600080fd5b505af1158015610f31573d6000803e3d6000fd5b505050505050506110d8565b6040805180820182526002815261763360f01b602090910152517fec97b8914cfb6741ca720b49246676ddcc2c227e4046450a8d815244c93673da90610f86908490849061256e565b60405180910390200361109057600063ad3a5f4760e01b8c8c8c8b8b8b8b8b604051602401610fbc989796959493929190612a4e565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050509050611012604051806060016040528060218152602001612da860219139611355565b6001546040516348c8949160e01b81526001600160a01b03909116906348c8949190611042908490600401612b7a565b6000604051808303816000875af1158015611061573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110899190810190612b8d565b50506110d8565b60405162461bcd60e51b815260206004820152601e60248201527f556e737570706f7274656420666c617368206c6f616e2076657273696f6e000060448201526064016102b0565b5050505050505050505050565b6002546001600160a01b0316331461113f5760405162461bcd60e51b815260206004820181905260248201527f556e617574686f72697a656420666c617368206c6f616e2070726f766964657260448201526064016102b0565b6000808080808061115287890189612bc1565b95509550955095509550955061117f604051806060016040528060288152602001612d1460289139611355565b600189146111e95760405162461bcd60e51b815260206004820152603160248201527f42616c616e63657220563220666c617368206c6f616e2066656520616d6f756e6044820152700e840d8cadccee8d040dad2e6dac2e8c6d607b1b60648201526084016102b0565b898960008181106111fc576111fc612ae0565b905060200201356000146112495760405162461bcd60e51b8152602060048201526014602482015273466c617368206c6f616e7320617265206672656560601b60448201526064016102b0565b61125786868686868661139b565b60008a8a600081811061126c5761126c612ae0565b905060200201358561127e9190612c8c565b60025490915061129b906001600160a01b03888116911683611970565b505050505050505050505050505050565b61130684856001600160a01b03166323b872dd8686866040516024016112d4939291906125cb565b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506119a6565b50505050565b6113518282604051602401611322929190612c9f565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052611a09565b5050565b611398816040516024016113699190612b7a565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052611a09565b50565b600080836040516113ac9190612cc1565b908152604051908190036020018120546001600160a01b0316915060009081906113d7908590612cc1565b908152604051908190036020019020546001600160a01b03908116915082166114125760405162461bcd60e51b81526004016102b090612777565b6001600160a01b0381166114645760405162461bcd60e51b8152602060048201526019602482015278151bc81c1c9bdd1bd8dbdb081b9bdd081cdd5c1c1bdc9d1959603a1b60448201526064016102b0565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820188905288169063095ea7b3906044016020604051808303816000875af11580156114b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d791906125ae565b5060405163118e31b760e01b81526001600160a01b03888116600483015289811660248301526000919084169063118e31b790604401602060405180830381865afa15801561152a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154e9190612a0c565b604051631da649cf60e01b81529091506001600160a01b03841690631da649cf90611581908b908d908c906004016125cb565b600060405180830381600087803b15801561159b57600080fd5b505af11580156115af573d6000803e3d6000fd5b505060405163118e31b760e01b81526001600160a01b038b811660048301528c81166024830152600093508616915063118e31b790604401602060405180830381865afa158015611604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116289190612a0c565b90508181106116895760405162461bcd60e51b815260206004820152602760248201527f52657061796d656e7420646964206e6f742072656475636520626f72726f772060448201526662616c616e636560c81b60648201526084016102b0565b505060005b85518110156118e2576000836001600160a01b0316635820ba638a8985815181106116bb576116bb612ae0565b6020026020010151600001518d8b87815181106116da576116da612ae0565b60209081029190910181015101516040516001600160e01b031960e087901b1681526001600160a01b03948516600482015292841660248401529216604482015260648101919091526084016020604051808303816000875af1158015611745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117699190612cdd565b9050806001600160a01b031663095ea7b38489858151811061178d5761178d612ae0565b6020026020010151602001516040518363ffffffff1660e01b81526004016117ca9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156117e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180d91906125ae565b5061182f6040518060600160405280602a8152602001612e6b602a9139611355565b826001600160a01b0316634108d0af8a838a868151811061185257611852612ae0565b60209081029190910181015101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015291831660248301526044820152908d166064820152608401600060405180830381600087803b1580156118b657600080fd5b505af11580156118ca573d6000803e3d6000fd5b505050505080806118da90612cfa565b91505061168e565b50611904604051806060016040528060218152602001612eec60219139611355565b6040516314890dcb60e21b81526001600160a01b03821690635224372c90611934908a908c908b906004016125cb565b600060405180830381600087803b15801561194e57600080fd5b505af1158015611962573d6000803e3d6000fd5b505050505050505050505050565b6040516001600160a01b038381166024830152604482018390526119a191859182169063a9059cbb906064016112d4565b505050565b60006119bb6001600160a01b03841683611a12565b905080516000141580156119e05750808060200190518101906119de91906125ae565b155b156119a157604051635274afe760e01b81526001600160a01b03841660048201526024016102b0565b61139881611a29565b6060611a2083836000611a4a565b90505b92915050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b606081471015611a6f5760405163cd78605960e01b81523060048201526024016102b0565b600080856001600160a01b03168486604051611a8b9190612cc1565b60006040518083038185875af1925050503d8060008114611ac8576040519150601f19603f3d011682016040523d82523d6000602084013e611acd565b606091505b5091509150611add868383611ae9565b925050505b9392505050565b606082611afe57611af982611b45565b611ae2565b8151158015611b1557506001600160a01b0384163b155b15611b3e57604051639996b31560e01b81526001600160a01b03851660048201526024016102b0565b5080611ae2565b805115611b555780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60008083601f840112611b8057600080fd5b5081356001600160401b03811115611b9757600080fd5b602083019150836020828501011115611baf57600080fd5b9250929050565b6001600160a01b038116811461139857600080fd5b8035611bd681611bb6565b919050565b60ff8116811461139857600080fd5b60008060008060008060008060006101008a8c031215611c0957600080fd5b89356001600160401b03811115611c1f57600080fd5b611c2b8c828d01611b6e565b909a5098505060208a0135611c3f81611bb6565b965060408a0135611c4f81611bb6565b955060608a0135945060808a0135935060a08a0135611c6d81611bdb565b8093505060c08a0135915060e08a013590509295985092959850929598565b60008060008060608587031215611ca257600080fd5b8435611cad81611bb6565b93506020850135925060408501356001600160401b03811115611ccf57600080fd5b611cdb87828801611b6e565b95989497509550505050565b600081518084526020808501945080840160005b83811015611d205781516001600160a01b031687529582019590820190600101611cfb565b509495945050505050565b60005b83811015611d46578181015183820152602001611d2e565b50506000910152565b60008151808452611d67816020860160208601611d2b565b601f01601f19169290920160200192915050565b604081526000611d8e6040830185611ce7565b6020838203818501528185518084528284019150828160051b85010183880160005b83811015611dde57601f19878403018552611dcc838351611d4f565b94860194925090850190600101611db0565b50909998505050505050505050565b600080600080600060608688031215611e0557600080fd5b8535611e1081611bb6565b945060208601356001600160401b0380821115611e2c57600080fd5b818801915088601f830112611e4057600080fd5b813581811115611e4f57600080fd5b8960208260061b8501011115611e6457600080fd5b602083019650809550506040880135915080821115611e8257600080fd5b50611e8f88828901611b6e565b969995985093965092949392505050565b60008060008060608587031215611eb657600080fd5b8435611ec181611bb6565b935060208501356001600160401b03811115611edc57600080fd5b611ee887828801611b6e565b9094509250506040850135611efc81611bb6565b939692955090935050565b600081518084526020808501945080840160005b83811015611d2057815187529582019590820190600101611f1b565b600081518084526020808501945080840160005b83811015611d2057815160ff1687529582019590820190600101611f4b565b608081526000611f7d6080830187611ce7565b602083820381850152611f908288611f07565b915083820360408501528186518084528284019150828160051b85010183890160005b83811015611fe157601f19878403018552611fcf838351611d4f565b94860194925090850190600101611fb3565b50508681036060880152611ff58189611f37565b9b9a5050505050505050505050565b6000806000806060858703121561201a57600080fd5b84356001600160401b0381111561203057600080fd5b61203c87828801611b6e565b909550935050602085013561205081611bb6565b91506040850135611efc81611bb6565b60008060008060006080868803121561207857600080fd5b85356001600160401b0381111561208e57600080fd5b61209a88828901611b6e565b90965094505060208601356120ae81611bb6565b925060408601356120be81611bb6565b949793965091946060013592915050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715612107576121076120cf565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612135576121356120cf565b604052919050565b60006001600160401b03821115612156576121566120cf565b5060051b60200190565b600082601f83011261217157600080fd5b813560206121866121818361213d565b61210d565b82815260069290921b840181019181810190868411156121a557600080fd5b8286015b848110156121ed57604081890312156121c25760008081fd5b6121ca6120e5565b81356121d581611bb6565b815281850135858201528352918301916040016121a9565b509695505050505050565b60008060008060008060008060c0898b03121561221457600080fd5b883561221f81611bb6565b9750602089013561222f81611bb6565b96506040890135955060608901356001600160401b038082111561225257600080fd5b61225e8c838d01612160565b965060808b013591508082111561227457600080fd5b6122808c838d01611b6e565b909650945060a08b013591508082111561229957600080fd5b506122a68b828c01611b6e565b999c989b5096995094979396929594505050565b60006001600160401b038211156122d3576122d36120cf565b50601f01601f191660200190565b600082601f8301126122f257600080fd5b8135612300612181826122ba565b81815284602083860101111561231557600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561234457600080fd5b81356001600160401b0381111561235a57600080fd5b612366848285016122e1565b949350505050565b801515811461139857600080fd5b8035611bd68161236e565b60008060008060008060008060008060006101008c8e0312156123a957600080fd5b6123b28c611bcb565b9a506123c060208d01611bcb565b995060408c013598506123d560608d0161237c565b97506001600160401b038060808e013511156123f057600080fd5b6124008e60808f01358f01612160565b97508060a08e0135111561241357600080fd5b6124238e60a08f01358f01611b6e565b909750955060c08d013581101561243957600080fd5b6124498e60c08f01358f01611b6e565b909550935060e08d013581101561245f57600080fd5b506124708d60e08e01358e01611b6e565b81935080925050509295989b509295989b9093969950565b60008083601f84011261249a57600080fd5b5081356001600160401b038111156124b157600080fd5b6020830191508360208260051b8501011115611baf57600080fd5b6000806000806000806000806080898b0312156124e857600080fd5b88356001600160401b03808211156124ff57600080fd5b61250b8c838d01612488565b909a50985060208b013591508082111561252457600080fd5b6125308c838d01612488565b909850965060408b013591508082111561254957600080fd5b6125558c838d01612488565b909650945060608b013591508082111561229957600080fd5b8183823760009101908152919050565b602080825260169082015275141c9bdd1bd8dbdb081b9bdd081cdd5c1c1bdc9d195960521b604082015260600190565b6000602082840312156125c057600080fd5b8151611ae28161236e565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600082601f83011261260057600080fd5b815160206126106121818361213d565b82815260059290921b8401810191818101908684111561262f57600080fd5b8286015b848110156121ed57805161264681611bb6565b8352918301918301612633565b6000612661612181846122ba565b905082815283838301111561267557600080fd5b611ae2836020830184611d2b565b600082601f83011261269457600080fd5b611a2083835160208501612653565b600080604083850312156126b657600080fd5b82516001600160401b03808211156126cd57600080fd5b6126d9868387016125ef565b93506020915081850151818111156126f057600080fd5b8501601f8101871361270157600080fd5b805161270f6121818261213d565b81815260059190911b8201840190848101908983111561272e57600080fd5b8584015b838110156127665780518681111561274a5760008081fd5b6127588c8983890101612683565b845250918601918601612732565b508096505050505050509250929050565b6020808252601b908201527f46726f6d2070726f746f636f6c206e6f7420737570706f727465640000000000604082015260600190565b6001600160a01b03848116825260406020808401829052838201859052600092869160608601855b888110156128055784356127e981611bb6565b84168252848301358383015293850193908501906001016127d6565b509998505050505050505050565b600082601f83011261282457600080fd5b815160206128346121818361213d565b82815260059290921b8401810191818101908684111561285357600080fd5b8286015b848110156121ed5780516001600160401b038111156128765760008081fd5b8701603f810189136128885760008081fd5b612899898683015160408401612653565b845250918301918301612857565b600082601f8301126128b857600080fd5b815160206128c86121818361213d565b82815260059290921b840181019181810190868411156128e757600080fd5b8286015b848110156121ed5780516128fe81611bdb565b83529183019183016128eb565b6000806000806080858703121561292157600080fd5b84516001600160401b038082111561293857600080fd5b612944888389016125ef565b955060209150818701518181111561295b57600080fd5b8701601f8101891361296c57600080fd5b805161297a6121818261213d565b81815260059190911b8201840190848101908b83111561299957600080fd5b928501925b828410156129b75783518252928501929085019061299e565b60408b01519098509450505050808211156129d157600080fd5b6129dd88838901612813565b935060608701519150808211156129f357600080fd5b50612a00878288016128a7565b91505092959194509250565b600060208284031215612a1e57600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060c0820160018060a01b03808c1684526020818c168186015260408b8187015260c06060870152838b5180865260e088019150838d01955060005b81811015612ab2578651805187168452850151858401529584019591830191600101612a8b565b50508681036080880152612ac7818b8d612a25565b94505050505082810360a0840152611ff5818587612a25565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b81811015612b44578551851683529483019491830191600101612b26565b50508581036040870152612b588189611f07565b93505050508281036060840152612b6f8185611d4f565b979650505050505050565b602081526000611a206020830184611d4f565b600060208284031215612b9f57600080fd5b81516001600160401b03811115612bb557600080fd5b61236684828501612683565b60008060008060008060c08789031215612bda57600080fd5b8635612be581611bb6565b95506020870135612bf581611bb6565b94506040870135935060608701356001600160401b0380821115612c1857600080fd5b612c248a838b01612160565b94506080890135915080821115612c3a57600080fd5b612c468a838b016122e1565b935060a0890135915080821115612c5c57600080fd5b50612c6989828a016122e1565b9150509295509295509295565b634e487b7160e01b600052601160045260246000fd5b80820180821115611a2357611a23612c76565b604081526000612cb26040830185611d4f565b90508260208301529392505050565b60008251612cd3818460208701611d2b565b9190910192915050565b600060208284031215612cef57600080fd5b8151611ae281611bb6565b600060018201612d0c57612d0c612c76565b506001019056fe42616c616e63657220563220666c617368206c6f616e2063616c6c6261636b207265636569766564466f7277617264696e672072657061792063616c6c20746f2074686520617070726f70726961746520676174657761795472616e7366657272696e6720746f6b656e732066726f6d207573657220746f207468697320636f6e747261637420666f722072657061796d656e7452657175657374696e672042616c616e63657220563320666c617368206c6f616e417070726f76696e67206761746577617920746f207370656e6420746f6b656e73466f7277617264696e67206465706f7369742063616c6c20746f2074686520617070726f707269617465206761746577617952657175657374696e672042616c616e63657220563220666c617368206c6f616e5472616e7366657272696e6720746f6b656e732066726f6d207573657220746f207468697320636f6e74726163744465706f736974696e6720636f6c6c61746572616c20696e746f2074686520746f2070726f746f636f6c42616c616e63657220563320666c617368206c6f616e2063616c6c6261636b207265636569766564417070726f76696e67206761746577617920746f207370656e6420746f6b656e7320666f722072657061796d656e74426f72726f77696e672064656274206f6e2074686520746f2070726f746f636f6ca264697066735822122071f82313b8402bba375772996a11cbe2c880130e5da03dd927f57388a3c1051c64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 688,
        "contract": "contracts/RouterGateway.sol:RouterGateway",
        "label": "gateways",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_contract(IGateway)1922)"
      },
      {
        "astId": 691,
        "contract": "contracts/RouterGateway.sol:RouterGateway",
        "label": "balancerV3Vault",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVault)1950"
      },
      {
        "astId": 694,
        "contract": "contracts/RouterGateway.sol:RouterGateway",
        "label": "balancerV2Vault",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IFlashLoanProvider)679"
      }
    ],
    "types": {
      "t_contract(IFlashLoanProvider)679": {
        "encoding": "inplace",
        "label": "contract IFlashLoanProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IGateway)1922": {
        "encoding": "inplace",
        "label": "contract IGateway",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)1950": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_contract(IGateway)1922)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => contract IGateway)",
        "numberOfBytes": "32",
        "value": "t_contract(IGateway)1922"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}