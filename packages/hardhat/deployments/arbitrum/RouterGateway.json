{
  "address": "0xa17c2714BA30e61D70dfbBE204C1c9548D604b0f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "v3vault",
          "type": "address"
        },
        {
          "internalType": "contract IFlashLoanProvider",
          "name": "v2Vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "gateway",
          "type": "address"
        }
      ],
      "name": "addGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerV2Vault",
      "outputs": [
        {
          "internalType": "contract IFlashLoanProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerV3Vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fromProtocol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "toProtocol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "canMoveCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canMove",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fromProtocol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "toProtocol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "canMoveSupply",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canMove",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "fromBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "gateways",
      "outputs": [
        {
          "internalType": "contract IGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getEncodedDebtApproval",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "flashLoanVersion",
          "type": "string"
        }
      ],
      "name": "getFlashLoanProviderBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGateway.Collateral[]",
          "name": "collaterals",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "fromProtocol",
          "type": "string"
        }
      ],
      "name": "getFromProtocolApprovalsForMove",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPossibleCollaterals",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "collateralAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "symbols",
          "type": "string[]"
        },
        {
          "internalType": "uint8[]",
          "name": "decimals",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getSupportedCollaterals",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "collateralAddresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "toProtocol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getToProtocolApprovalsForMove",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGateway.Collateral[]",
          "name": "collaterals",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "toProtocol",
          "type": "string"
        }
      ],
      "name": "getToProtocolInboundActions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "isCollateralSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "repayAll",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGateway.Collateral[]",
          "name": "collaterals",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "fromProtocol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "toProtocol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "flashLoanVersion",
          "type": "string"
        }
      ],
      "name": "moveDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGateway.Collateral[]",
          "name": "collaterals",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "fromProtocol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "toProtocol",
          "type": "string"
        }
      ],
      "name": "moveSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "feeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "receiveFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGateway.Collateral[]",
          "name": "collaterals",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "fromProtocol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "toProtocol",
          "type": "string"
        }
      ],
      "name": "receiveFlashLoanV3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "supply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "supplyWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x12ed3f5cef49143bd5c56d6fec7acd85c163e4607fef06081f4e7341872456ac",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x58d21499B5A3374a486B3F412Cca43b76692eF15",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "3647172",
    "logsBloom": "0x
    "blockHash": "0x7f7d5d63c2c6a3ede547051724a18265f0068024199c30a27d3f98330c8b9c6b",
    "transactionHash": "0x12ed3f5cef49143bd5c56d6fec7acd85c163e4607fef06081f4e7341872456ac",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 333592913,
        "transactionHash": "0x12ed3f5cef49143bd5c56d6fec7acd85c163e4607fef06081f4e7341872456ac",
        "address": "0xa17c2714BA30e61D70dfbBE204C1c9548D604b0f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058d21499b5a3374a486b3f412cca43b76692ef15"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x7f7d5d63c2c6a3ede547051724a18265f0068024199c30a27d3f98330c8b9c6b"
      }
    ],
    "blockNumber": 333592913,
    "cumulativeGasUsed": "3873359",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbA1333333333a1BA1108E8412f11850A5C319bA9",
    "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
    "0x58d21499B5A3374a486B3F412Cca43b76692eF15"
  ],
  "numDeployments": 4,
  "solcInputHash": "2ffa62bb0e337677068ddeb7526cd752",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"v3vault\",\"type\":\"address\"},{\"internalType\":\"contract IFlashLoanProvider\",\"name\":\"v2Vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"addGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerV2Vault\",\"outputs\":[{\"internalType\":\"contract IFlashLoanProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerV3Vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fromProtocol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toProtocol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"canMoveCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canMove\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fromProtocol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toProtocol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"canMoveSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canMove\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fromBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gateways\",\"outputs\":[{\"internalType\":\"contract IGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEncodedDebtApproval\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"flashLoanVersion\",\"type\":\"string\"}],\"name\":\"getFlashLoanProviderBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGateway.Collateral[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"fromProtocol\",\"type\":\"string\"}],\"name\":\"getFromProtocolApprovalsForMove\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPossibleCollaterals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"collateralAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimals\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getSupportedCollaterals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"collateralAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"toProtocol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getToProtocolApprovalsForMove\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGateway.Collateral[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"toProtocol\",\"type\":\"string\"}],\"name\":\"getToProtocolInboundActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"isCollateralSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"repayAll\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGateway.Collateral[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"fromProtocol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toProtocol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"flashLoanVersion\",\"type\":\"string\"}],\"name\":\"moveDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGateway.Collateral[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"fromProtocol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toProtocol\",\"type\":\"string\"}],\"name\":\"moveSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGateway.Collateral[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"fromProtocol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toProtocol\",\"type\":\"string\"}],\"name\":\"receiveFlashLoanV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"supplyWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"borrow(string,address,address,uint256)\":{\"params\":{\"amount\":\"The amount to borrow\",\"protocolName\":\"The name of the protocol to borrow from\",\"token\":\"The token to borrow\",\"user\":\"The user to borrow for\"}},\"canMoveCollateral(string,string,address,address)\":{\"params\":{\"collateral\":\"The address of the collateral token to check\",\"fromProtocol\":\"The name of the source protocol\",\"market\":\"The address of the market token\",\"toProtocol\":\"The name of the target protocol\"},\"returns\":{\"canMove\":\"Whether the collateral can be moved between protocols\"}},\"canMoveSupply(string,string,address,address)\":{\"params\":{\"fromProtocol\":\"The name of the source protocol\",\"toProtocol\":\"The name of the target protocol\",\"token\":\"The token to check\",\"user\":\"The user address\"},\"returns\":{\"canMove\":\"Whether the token can be moved between protocols\",\"fromBalance\":\"The user's balance in the source protocol\"}},\"getFlashLoanProviderBalance(address,string)\":{\"params\":{\"flashLoanVersion\":\"The flash loan provider version (\\\"v2\\\" or \\\"v3\\\")\",\"token\":\"The token address to check balance for\"},\"returns\":{\"_0\":\"The token balance in the flash loan provider\"}},\"getFromProtocolApprovalsForMove(address,(address,uint256)[],string)\":{\"params\":{\"collaterals\":\"The collaterals being moved\",\"debtToken\":\"The token being borrowed\",\"fromProtocol\":\"The protocol moving from \"},\"returns\":{\"_0\":\"Array of target addresses and encoded function call data\"}},\"getSupportedCollaterals(string,address)\":{\"params\":{\"market\":\"The address of the market token\",\"protocolName\":\"The name of the protocol to check\"},\"returns\":{\"collateralAddresses\":\"Array of supported collateral token addresses\"}},\"getToProtocolInboundActions(address,(address,uint256)[],string)\":{\"params\":{\"collaterals\":\"The collaterals being moved\",\"debtToken\":\"The token being borrowed\",\"toProtocol\":\"The protocol moving to\"},\"returns\":{\"_0\":\"Array of target addresses and encoded function call data\"}},\"isCollateralSupported(string,address,address)\":{\"params\":{\"collateral\":\"The address of the collateral token to check\",\"market\":\"The address of the market token\",\"protocolName\":\"The name of the protocol to check\"},\"returns\":{\"isSupported\":\"Whether the collateral is supported in the protocol\"}},\"moveSupply(address,(address,uint256)[],string,string)\":{\"params\":{\"collaterals\":\"Array of collateral tokens and amounts to move\",\"fromProtocol\":\"The source protocol name\",\"toProtocol\":\"The destination protocol name\",\"user\":\"The user address whose supply is being moved\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(string,address,address,uint256)\":{\"notice\":\"Borrow tokens from a protocol\"},\"canMoveCollateral(string,string,address,address)\":{\"notice\":\"Check if a collateral can be moved from one protocol to another\"},\"canMoveSupply(string,string,address,address)\":{\"notice\":\"Check if a token can be moved from one protocol to another\"},\"getFlashLoanProviderBalance(address,string)\":{\"notice\":\"Get the balance of a token in a flash loan provider\"},\"getFromProtocolApprovalsForMove(address,(address,uint256)[],string)\":{\"notice\":\"Get approvals for collateral movement from source protocol\"},\"getSupportedCollaterals(string,address)\":{\"notice\":\"Get all supported collaterals for a specific market in a protocol\"},\"getToProtocolInboundActions(address,(address,uint256)[],string)\":{\"notice\":\"Get inbound collateral actions from destination protocol\"},\"isCollateralSupported(string,address,address)\":{\"notice\":\"Check if a collateral token is supported in the target protocol\"},\"moveSupply(address,(address,uint256)[],string,string)\":{\"notice\":\"Move supplied assets from one protocol to another\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RouterGateway.sol\":\"RouterGateway\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/RouterGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IGateway.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/balancer/IVault.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n\\n// Interface for a v2\\u2013style flash loan provider (e.g. Balancer v2)\\ninterface IFlashLoanProvider {\\n    function flashLoan(\\n        address receiver,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata userData\\n    ) external;\\n}\\n\\ncontract RouterGateway is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Mapping from protocol name to gateway contract\\n    mapping(string => IGateway) public gateways;\\n\\n    IVault public balancerV3Vault;\\n    IFlashLoanProvider public balancerV2Vault;\\n\\n    // State variable to track if flash loan is enabled\\n    bool private flashLoanEnabled;\\n\\n    constructor(IVault v3vault, IFlashLoanProvider v2Vault, address owner) Ownable(owner) {\\n        balancerV3Vault = v3vault;\\n        balancerV2Vault = v2Vault;\\n    }\\n\\n    function addGateway(string calldata protocolName, address gateway) external onlyOwner {\\n        gateways[protocolName] = IGateway(gateway);\\n    }\\n\\n    function supplyWithPermit(\\n        string calldata protocolName,\\n        address token,\\n        address user,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external nonReentrant {\\n        // Get the gateway for the specified protocol\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n\\n        // Execute the permit\\n        IERC20Permit(token).permit(\\n            msg.sender,\\n            address(this),\\n            amount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        // Transfer tokens from user to this contract (no need for approval now)\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Approve gateway to spend tokens\\n        IERC20(token).approve(address(gateway), amount);\\n\\n        // Forward deposit call to the appropriate gateway\\n        gateway.deposit(token, user, amount);\\n    }\\n\\n    function supply(\\n        string calldata protocolName,\\n        address token,\\n        address user,\\n        uint256 amount\\n    ) external nonReentrant {\\n        // Get the gateway for the specified protocol\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n\\n        // Transfer tokens from user to this contract\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Approve gateway to spend tokens\\n        IERC20(token).approve(address(gateway), amount);\\n\\n        // Forward deposit call to the appropriate gateway\\n        gateway.deposit(token, user, amount);\\n    }\\n\\n    function repay(\\n        string calldata protocolName,\\n        address token,\\n        address user,\\n        uint256 amount\\n    ) external nonReentrant {\\n        // Get the gateway for the specified protocol\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n\\n        // Transfer tokens from user to this contract\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Approve gateway to spend tokens\\n        IERC20(token).approve(address(gateway), amount);\\n\\n        // Forward repay call to the appropriate gateway\\n        gateway.repay(token, user, amount);\\n    }\\n\\n    function getBalance(\\n        string calldata protocolName,\\n        address token,\\n        address user\\n    ) external view returns (uint256) {\\n        // Get the gateway for the specified protocol\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n\\n        // Forward balance call to the appropriate gateway\\n        return gateway.getBalance(token, user);\\n    }\\n\\n    function getBorrowBalance(\\n        string calldata protocolName,\\n        address token,\\n        address user\\n    ) external view returns (uint256) {\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n        return gateway.getBorrowBalance(token, user);\\n    }\\n    \\n    // -------------------------------------------------------------------------\\n    // Common Debt Moving Logic (Flash Loan\\u2013agnostic)\\n    // -------------------------------------------------------------------------\\n    //\\n    // This internal function is completely unaware of any flash loan details.\\n    // It simply moves debt from one protocol to another:\\n    // 1. Repays the debt on the \\\"from\\\" protocol.\\n    // 2. Withdraws collateral from the \\\"from\\\" protocol.\\n    // 3. Deposits collateral into the \\\"to\\\" protocol.\\n    // 4. Borrows the same amount on the \\\"to\\\" protocol.\\n    //\\n    function _moveDebtCommon(\\n        address user,\\n        address debtToken,\\n        uint256 debtAmount,\\n        IGateway.Collateral[] memory collaterals,\\n        string memory fromProtocol,\\n        string memory toProtocol\\n    ) internal {\\n        IGateway fromGateway = gateways[fromProtocol];\\n        IGateway toGateway = gateways[toProtocol];\\n        require(address(fromGateway) != address(0), \\\"From protocol not supported\\\");\\n        require(address(toGateway) != address(0), \\\"To protocol not supported\\\");\\n\\n        // Repay the debt on the \\\"from\\\" protocol\\n        {\\n            IERC20(debtToken).approve(address(fromGateway), debtAmount);\\n            uint256 borrowBalanceBefore = fromGateway.getBorrowBalanceCurrent(debtToken, user);\\n            fromGateway.repay(debtToken, user, debtAmount);\\n            uint256 borrowBalanceAfter = fromGateway.getBorrowBalanceCurrent(debtToken, user);\\n            require(borrowBalanceAfter < borrowBalanceBefore, \\\"Repayment did not reduce borrow balance\\\");\\n        }\\n        // For each collateral asset, withdraw then deposit into the target protocol.\\n        for (uint i = 0; i < collaterals.length; i++) {\\n            (address underlyingReceived, uint256 amountReceived) = fromGateway.withdrawCollateral(debtToken, collaterals[i].token, user, collaterals[i].amount);\\n            IERC20(underlyingReceived).approve(address(toGateway), amountReceived);\\n            toGateway.depositCollateral(debtToken, underlyingReceived, amountReceived, user);\\n        }\\n\\n        // Borrow the debt on the \\\"to\\\" protocol.\\n        toGateway.borrow(debtToken, user, debtAmount);\\n    }\\n\\n    /**\\n     * @notice Modifier to ensure flash loan callbacks can only be triggered internally\\n     */\\n    modifier enableFlashLoan() {\\n        flashLoanEnabled = true;\\n        _;\\n        flashLoanEnabled = false;\\n    }\\n\\n    /**\\n     * @notice Modifier to verify flash loan was triggered internally\\n     */\\n    modifier flashLoanOnly() {\\n        require(flashLoanEnabled, \\\"Flash loan not enabled\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check if a collateral token is supported in the target protocol\\n     * @param protocolName The name of the protocol to check\\n     * @param market The address of the market token\\n     * @param collateral The address of the collateral token to check\\n     * @return isSupported Whether the collateral is supported in the protocol\\n     */\\n    function isCollateralSupported(\\n        string calldata protocolName,\\n        address market,\\n        address collateral\\n    ) external view returns (bool isSupported) {\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n        \\n        return gateway.isCollateralSupported(market, collateral);\\n    }\\n    \\n    /**\\n     * @notice Get all supported collaterals for a specific market in a protocol\\n     * @param protocolName The name of the protocol to check\\n     * @param market The address of the market token\\n     * @return collateralAddresses Array of supported collateral token addresses\\n     */\\n    function getSupportedCollaterals(\\n        string calldata protocolName,\\n        address market\\n    ) external view returns (address[] memory collateralAddresses) {\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n        \\n        return gateway.getSupportedCollaterals(market);\\n    }\\n    \\n    /**\\n     * @notice Check if a collateral can be moved from one protocol to another\\n     * @param fromProtocol The name of the source protocol\\n     * @param toProtocol The name of the target protocol\\n     * @param market The address of the market token\\n     * @param collateral The address of the collateral token to check\\n     * @return canMove Whether the collateral can be moved between protocols\\n     */\\n    function canMoveCollateral(\\n        string calldata fromProtocol,\\n        string calldata toProtocol,\\n        address market,\\n        address collateral\\n    ) external view returns (bool canMove) {\\n        IGateway fromGateway = gateways[fromProtocol];\\n        IGateway toGateway = gateways[toProtocol];\\n        \\n        require(address(fromGateway) != address(0), \\\"From protocol not supported\\\");\\n        require(address(toGateway) != address(0), \\\"To protocol not supported\\\");\\n        \\n        // Collateral must be supported in both protocols\\n        return fromGateway.isCollateralSupported(market, collateral) && \\n               toGateway.isCollateralSupported(market, collateral);\\n    }\\n\\n    // -------------------------------------------------------------------------\\n    // Flash Loan Wrapper for Balancer V2\\n    // -------------------------------------------------------------------------\\n    //\\n    // In a Balancer v2 flash loan the tokens are transferred (or \\\"pulled\\\") into this\\n    // contract as soon as they are approved. This function decodes the userData,\\n    // calls the common debt move function, then repays the principal plus fee.\\n    //\\n    function receiveFlashLoan(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata feeAmounts,\\n        bytes calldata userData\\n    ) external flashLoanOnly {\\n        require(msg.sender == address(balancerV2Vault), \\\"Unauthorized flash loan provider\\\");\\n\\n        // Decode userData to extract move debt parameters.\\n        (\\n            address user,\\n            address debtToken,\\n            uint256 debtAmount,\\n            IGateway.Collateral[] memory collaterals,\\n            string memory fromProtocol,\\n            string memory toProtocol\\n        ) = abi.decode(userData, (address, address, uint256, IGateway.Collateral[], string, string));\\n\\n        require(feeAmounts.length == 1, \\\"Balancer V2 flash loan fee amount length mismatch\\\");\\n        require(feeAmounts[0] == 0, \\\"Flash loans are free\\\");\\n\\n        // Execute the common debt move logic.\\n        _moveDebtCommon(user, debtToken, debtAmount, collaterals, fromProtocol, toProtocol);\\n\\n        // Repay the flash loan provider (principal + fee).\\n        uint256 totalRepayment = debtAmount + feeAmounts[0];\\n        IERC20(debtToken).safeTransfer(address(balancerV2Vault), totalRepayment);\\n    }\\n\\n    // -------------------------------------------------------------------------\\n    // Flash Loan Wrapper for Balancer V3\\n    // -------------------------------------------------------------------------\\n    //\\n    // For Balancer v3, tokens are delivered via a call to sendTo.\\n    // This wrapper assumes that the tokens have been sent before the call.\\n    // After calling the common move debt function, it repays the flash loan,\\n    // then calls settle if required.\\n    //\\n    function receiveFlashLoanV3(\\n        address user,\\n        address debtToken,\\n        uint256 debtAmount,\\n        IGateway.Collateral[] memory collaterals,\\n        string calldata fromProtocol,\\n        string calldata toProtocol\\n    ) external flashLoanOnly {\\n        require(msg.sender == address(balancerV3Vault), \\\"Unauthorized flash loan provider\\\");\\n\\n        // Send the debt token to this contract.\\n        balancerV3Vault.sendTo(debtToken, address(this), debtAmount);\\n\\n        // Execute the common debt move logic.\\n        _moveDebtCommon(user, debtToken, debtAmount, collaterals, fromProtocol, toProtocol);\\n\\n        // Repay the flash loan provider (principal only, assuming no fee).\\n        IERC20(debtToken).safeTransfer(address(balancerV3Vault), debtAmount);\\n\\n        // Optionally settle the flash loan if required by the provider.\\n        balancerV3Vault.settle(debtToken, debtAmount);\\n    }\\n\\n\\n   // -------------------------------------------------------------------------\\n    // moveDebt: Supports both flash loan providers\\n    // -------------------------------------------------------------------------\\n    //\\n    // The caller provides the flashLoanVersion (\\\"v2\\\" or \\\"v3\\\").\\n    // Based on this parameter, the function encodes the debt move parameters\\n    // appropriately and calls either the v2 flashLoan function or the v3 unlock function.\\n    //\\n    function moveDebt(\\n        address user,\\n        address debtToken,\\n        uint256 debtAmount,\\n        bool repayAll,\\n        IGateway.Collateral[] memory collaterals,\\n        string calldata fromProtocol,\\n        string calldata toProtocol,\\n        string calldata flashLoanVersion\\n    ) external nonReentrant enableFlashLoan {\\n        require(debtAmount > 0, \\\"Debt amount must be greater than zero\\\");\\n        require(user == msg.sender, \\\"User must be the caller\\\");\\n\\n        if (repayAll) {\\n            IGateway fromGateway = gateways[fromProtocol];\\n            require(address(fromGateway) != address(0), \\\"From protocol not supported\\\");\\n            debtAmount = fromGateway.getBorrowBalanceCurrent(debtToken, user);\\n        }\\n\\n        if (keccak256(bytes(flashLoanVersion)) == keccak256(bytes(\\\"v2\\\"))) {\\n            bytes memory data = abi.encode(user, debtToken, debtAmount, collaterals, fromProtocol, toProtocol);\\n            IERC20[] memory tokens = new IERC20[](1);\\n            tokens[0] = IERC20(debtToken);\\n            uint256[] memory amounts = new uint256[](1);\\n            amounts[0] = debtAmount;\\n            balancerV2Vault.flashLoan(address(this), tokens, amounts, data);\\n        } else if (keccak256(bytes(flashLoanVersion)) == keccak256(bytes(\\\"v3\\\"))) {\\n            bytes memory data = abi.encodeWithSelector(\\n                this.receiveFlashLoanV3.selector,\\n                user,\\n                debtToken,\\n                debtAmount,\\n                collaterals,\\n                fromProtocol,\\n                toProtocol\\n            );\\n            IVault(address(balancerV3Vault)).unlock(data);\\n        } else {\\n            revert(\\\"Unsupported flash loan version\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Move supplied assets from one protocol to another\\n     * @param user The user address whose supply is being moved\\n     * @param collaterals Array of collateral tokens and amounts to move\\n     * @param fromProtocol The source protocol name\\n     * @param toProtocol The destination protocol name\\n     */\\n    function moveSupply(\\n        address user,\\n        IGateway.Collateral[] memory collaterals,\\n        string calldata fromProtocol,\\n        string calldata toProtocol\\n    ) external nonReentrant {\\n        require(user == msg.sender, \\\"User must be the caller\\\");\\n        \\n        // Get the gateways for both protocols\\n        IGateway fromGateway = gateways[fromProtocol];\\n        IGateway toGateway = gateways[toProtocol];\\n        \\n        require(address(fromGateway) != address(0), \\\"From protocol not supported\\\");\\n        require(address(toGateway) != address(0), \\\"To protocol not supported\\\");\\n        // Iterate through each collateral and move it\\n        for (uint256 i = 0; i < collaterals.length; i++) {\\n            IGateway.Collateral memory collateral = collaterals[i];\\n\\n            // If amount is 0, move all available balance for this collateral\\n            if (collateral.amount == 0) {\\n                collateral.amount = fromGateway.getBalance(collateral.token, user);\\n                require(collateral.amount > 0, \\\"No balance to move\\\");\\n            }\\n\\n            // Step 1: Withdraw collateral from source protocol\\n            // We use withdrawCollateral as it allows withdrawing supplied assets\\n            // The market parameter is not used in most protocols, so we pass token as both market and collateral\\n            (address receivedToken, uint256 receivedAmount) = fromGateway.withdrawCollateral(\\n                collateral.token,\\n                collateral.token,\\n                user,\\n                collateral.amount\\n            );\\n\\n            // Step 2: Deposit the received tokens to target protocol\\n            // Approve the target gateway to spend the tokens\\n            IERC20(receivedToken).approve(address(toGateway), receivedAmount);\\n\\n            // Deposit to the target protocol\\n            toGateway.deposit(receivedToken, user, receivedAmount);\\n        }\\n    }\\n\\n    function getPossibleCollaterals(\\n        address token, \\n        string calldata protocolName, \\n        address user\\n    ) external view returns (\\n        address[] memory collateralAddresses,\\n        uint256[] memory balances,\\n        string[] memory symbols,\\n        uint8[] memory decimals\\n    ) {\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n        return gateway.getPossibleCollaterals(token, user);\\n    }\\n\\n    function getEncodedDebtApproval(string calldata protocolName, address debtToken, uint256 debtAmount, address user) external view returns (address[] memory, bytes[] memory) {\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n        return gateway.getEncodedDebtApproval(debtToken, debtAmount, user);\\n    }\\n\\n    /**\\n     * @notice Get approvals for collateral movement from source protocol\\n     * @param debtToken The token being borrowed\\n     * @param collaterals The collaterals being moved\\n     * @param fromProtocol The protocol moving from \\n     * @return Array of target addresses and encoded function call data\\n     */\\n    function getFromProtocolApprovalsForMove(\\n        address debtToken, \\n        IGateway.Collateral[] calldata collaterals, \\n        string calldata fromProtocol\\n    ) external view returns (address[] memory, bytes[] memory) {\\n        IGateway fromGateway = gateways[fromProtocol];\\n        require(address(fromGateway) != address(0), \\\"From protocol not supported\\\");\\n        return fromGateway.getEncodedCollateralApprovals(debtToken, collaterals);\\n    }\\n    \\n    /**\\n     * @notice Get inbound collateral actions from destination protocol\\n     * @param debtToken The token being borrowed\\n     * @param collaterals The collaterals being moved\\n     * @param toProtocol The protocol moving to\\n     * @return Array of target addresses and encoded function call data\\n     */\\n    function getToProtocolInboundActions(\\n        address debtToken, \\n        IGateway.Collateral[] calldata collaterals, \\n        string calldata toProtocol\\n    ) external view returns (address[] memory, bytes[] memory) {\\n        IGateway toGateway = gateways[toProtocol];\\n        require(address(toGateway) != address(0), \\\"To protocol not supported\\\");\\n        return toGateway.getInboundCollateralActions(debtToken, collaterals);\\n    }\\n\\n    function getToProtocolApprovalsForMove(\\n        address debtToken,\\n        uint256 debtAmount,\\n        string calldata toProtocol,\\n        address user\\n    ) external view returns (address[] memory, bytes[] memory) {\\n        // For the destination protocol, we need to get debt approval\\n        IGateway toGateway = gateways[toProtocol];\\n        require(address(toGateway) != address(0), \\\"Protocol not supported\\\");\\n        \\n        return toGateway.getEncodedDebtApproval(debtToken, debtAmount, user);\\n    }\\n\\n    /**\\n     * @notice Check if a token can be moved from one protocol to another\\n     * @param fromProtocol The name of the source protocol\\n     * @param toProtocol The name of the target protocol\\n     * @param token The token to check\\n     * @param user The user address\\n     * @return canMove Whether the token can be moved between protocols\\n     * @return fromBalance The user's balance in the source protocol\\n     */\\n    function canMoveSupply(\\n        string calldata fromProtocol,\\n        string calldata toProtocol,\\n        address token,\\n        address user\\n    ) external view returns (bool canMove, uint256 fromBalance) {\\n        IGateway fromGateway = gateways[fromProtocol];\\n        IGateway toGateway = gateways[toProtocol];\\n        \\n        if (address(fromGateway) == address(0) || address(toGateway) == address(0)) {\\n            return (false, 0);\\n        }\\n        \\n        // Check if user has a balance in the source protocol\\n        fromBalance = fromGateway.getBalance(token, user);\\n        \\n        // Both protocols must support the token\\n        return (fromBalance > 0, fromBalance);\\n    }\\n\\n    /**\\n     * @notice Get the balance of a token in a flash loan provider\\n     * @param token The token address to check balance for\\n     * @param flashLoanVersion The flash loan provider version (\\\"v2\\\" or \\\"v3\\\")\\n     * @return The token balance in the flash loan provider\\n     */\\n    function getFlashLoanProviderBalance(address token, string calldata flashLoanVersion) external view returns (uint256) {\\n        if (keccak256(bytes(flashLoanVersion)) == keccak256(bytes(\\\"v2\\\"))) {\\n            return IERC20(token).balanceOf(address(balancerV2Vault));\\n        } else if (keccak256(bytes(flashLoanVersion)) == keccak256(bytes(\\\"v3\\\"))) {\\n            return IERC20(token).balanceOf(address(balancerV3Vault));\\n        } else {\\n            revert(\\\"Unsupported flash loan version\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Borrow tokens from a protocol\\n     * @param protocolName The name of the protocol to borrow from\\n     * @param token The token to borrow\\n     * @param user The user to borrow for\\n     * @param amount The amount to borrow\\n     */\\n    function borrow(\\n        string calldata protocolName,\\n        address token,\\n        address user,\\n        uint256 amount\\n    ) external nonReentrant {\\n        // Get the gateway for the specified protocol\\n        IGateway gateway = gateways[protocolName];\\n        require(address(gateway) != address(0), \\\"Protocol not supported\\\");\\n        require(user == msg.sender, \\\"Can only borrow for yourself\\\");\\n\\n        // Forward borrow call to the appropriate gateway\\n        gateway.borrow(token, user, amount);\\n\\n        // Transfer borrowed tokens to the user\\n        IERC20(token).safeTransfer(user, amount);\\n    }\\n} \",\"keccak256\":\"0xcb38a64c35c32811f60cb18ed5324a80153e5074285903946eaf64563dcbb61b\",\"license\":\"MIT\"},\"contracts/interfaces/IGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IGateway {\\n    function deposit(address token, address user, uint256 amount) external;\\n    \\n    /**\\n     * @notice Borrow tokens from the protocol\\n     * @dev Can be called by Router or directly by the user\\n     * @param token The token to borrow\\n     * @param user The user to borrow for\\n     * @param amount The amount to borrow\\n     */\\n    function borrow(address token, address user, uint256 amount) external;\\n    function repay(address token, address user, uint256 amount) external;\\n\\n    function depositCollateral(address market, address collateral, uint256 amount, address receiver) external;\\n    function withdrawCollateral(address market, address collateral, address user, uint256 amount) external returns (address, uint256);\\n    \\n\\n    function getBalance(address token, address user) external view returns (uint256);\\n    function getBorrowBalance(address token, address user) external view returns (uint256);\\n    function getBorrowBalanceCurrent(address token, address user) external returns (uint256);\\n    function getBorrowRate(address token) external view returns (uint256, bool);\\n    function getSupplyRate(address token) external view returns (uint256, bool);\\n    function getLtv(address token, address user) external view returns (uint256);\\n    function getPossibleCollaterals(address token, address user) external view returns (\\n        address[] memory collateralAddresses,\\n        uint256[] memory balances,\\n        string[] memory symbols,\\n        uint8[] memory decimals\\n    );\\n\\n    /**\\n     * @notice Check if a collateral token is supported for a specific market in this protocol\\n     * @param market The address of the market token\\n     * @param collateral The address of the collateral token to check\\n     * @return isSupported Whether the collateral is supported in the market\\n     */\\n    function isCollateralSupported(address market, address collateral) external view returns (bool isSupported);\\n\\n    /**\\n     * @notice Get all supported collaterals for a specific market in this protocol\\n     * @param market The address of the market token\\n     * @return collateralAddresses Array of supported collateral token addresses\\n     */\\n    function getSupportedCollaterals(address market) external view returns (address[] memory collateralAddresses);\\n\\n    struct Collateral {\\n        address token;\\n        uint256 amount;\\n    }    \\n    function getEncodedCollateralApprovals(address token, Collateral[] calldata collaterals) external view returns (address[] memory target, bytes[] memory data);\\n    function getEncodedDebtApproval(address token, uint256 amount, address user) external view returns (address[] memory target, bytes[] memory data);\\n    \\n    /**\\n     * @notice Get additional actions required for a token when providing collateral\\n     * @param token The token to borrow\\n     * @param collaterals The collaterals to use\\n     * @return target Array of target contract addresses\\n     * @return data Array of encoded function call data\\n     */\\n    function getInboundCollateralActions(address token, Collateral[] calldata collaterals) external view returns (address[] memory target, bytes[] memory data);\\n}\",\"keccak256\":\"0x04c9b3de15aa1177e71bdafe6700ca9e2d997a032da6218c20b6859c66334c27\",\"license\":\"MIT\"},\"contracts/interfaces/balancer/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface IVault {\\n    function unlock(bytes calldata data) external returns (bytes memory result);\\n    function sendTo(address token, address to, uint256 amount) external;\\n    function settle(address token, uint256 amountHint) external returns (uint256 credit);\\n}\\n\",\"keccak256\":\"0x557c8d97fb63b697548d4f4dd977017911e332d53657302fe8799dc89570b5b6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003ec338038062003ec3833981016040819052620000349162000110565b806001600160a01b0381166200006457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006f81620000a7565b505060018055600380546001600160a01b039384166001600160a01b0319918216179091556004805492909316911617905562000164565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200010d57600080fd5b50565b6000806000606084860312156200012657600080fd5b83516200013381620000f7565b60208501519093506200014681620000f7565b60408501519092506200015981620000f7565b809150509250925092565b613d4f80620001746000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c8063ac3cded8116100f9578063d7b28d5f11610097578063e30b155e11610071578063e30b155e146103f6578063e327d31214610409578063f04f27071461041c578063f2fde38b1461042f57600080fd5b8063d7b28d5f1461039c578063db236a1f146103af578063e0b6677a146103e357600080fd5b8063ba71067f116100d3578063ba71067f14610350578063caf89ac514610363578063cc60d11d14610376578063d19210e51461038957600080fd5b8063ac3cded814610317578063ad3a5f471461032a578063b7cf06d71461033d57600080fd5b8063715018a6116101665780637ffe721e116101405780637ffe721e146102bd57806385032044146102d05780638da5cb5b146102f3578063a77e92621461030457600080fd5b8063715018a61461027257806375e9ffb41461027a5780637a04707d1461029a57600080fd5b806303862869146101ae5780630acefd35146101d457806310c0a157146101ff57806325d56916146102125780633428947e146102275780635c73812114610251575b600080fd5b6101c16101bc3660046128dc565b610442565b6040519081526020015b60405180910390f35b6003546101e7906001600160a01b031681565b6040516001600160a01b0390911681526020016101cb565b6004546101e7906001600160a01b031681565b61022561022036600461293f565b6105ef565b005b61023a6102353660046129e1565b6107c8565b6040805192151583526020830191909152016101cb565b61026461025f366004612a75565b6108d7565b6040516101cb929190612bbc565b6102256109aa565b61028d610288366004612c2e565b6109be565b6040516101cb9190612c84565b6102ad6102a8366004612c97565b610a83565b6040516101cb9493929190612d61565b6101c16102cb366004612dfb565b610b5b565b6102e36102de3660046129e1565b610c21565b60405190151581526020016101cb565b6000546001600160a01b03166101e7565b610225610312366004612e57565b610db7565b610225610325366004612e57565b610eeb565b610225610338366004612fef565b611034565b61022561034b3660046130b1565b61124e565b6102e361035e366004612dfb565b6115cf565b6101c1610371366004612dfb565b61168b565b610264610384366004613157565b611706565b610264610397366004612a75565b611792565b6102256103aa366004612e57565b611811565b6101e76103bd366004613242565b80516020818301810180516002825292820191909301209152546001600160a01b031681565b6102646103f136600461327e565b61191e565b610225610404366004612c2e565b6119aa565b6102256104173660046132fc565b6119f9565b61022561042a366004613441565b611e5c565b61022561043d3660046134e3565b612057565b60408051808201825260028152613b1960f11b602090910152516000907ff9446b8e937d86f0bc87cac73923491692b123ca5f8761908494703758206adf9061048e9085908590613500565b60405180910390200361051357600480546040516370a0823160e01b81526001600160a01b03918216928101929092528516906370a08231906024015b602060405180830381865afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c9190613510565b90506105e8565b6040805180820182526002815261763360f01b602090910152517fec97b8914cfb6741ca720b49246676ddcc2c227e4046450a8d815244c93673da9061055c9085908590613500565b60405180910390200361059b576003546040516370a0823160e01b81526001600160a01b039182166004820152908516906370a08231906024016104cb565b60405162461bcd60e51b815260206004820152601e60248201527f556e737570706f7274656420666c617368206c6f616e2076657273696f6e000060448201526064015b60405180910390fd5b9392505050565b6105f7612095565b600060028a8a60405161060b929190613500565b908152604051908190036020019020546001600160a01b03169050806106435760405162461bcd60e51b81526004016105df90613529565b60405163d505accf60e01b8152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c481018390526001600160a01b0389169063d505accf9060e401600060405180830381600087803b1580156106af57600080fd5b505af11580156106c3573d6000803e3d6000fd5b506106dd925050506001600160a01b0389163330896120bf565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820188905289169063095ea7b3906044016020604051808303816000875af115801561072c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107509190613559565b50604051638340f54960e01b81526001600160a01b03821690638340f54990610781908b908b908b90600401613576565b600060405180830381600087803b15801561079b57600080fd5b505af11580156107af573d6000803e3d6000fd5b50505050506107bd60018055565b505050505050505050565b6000806000600289896040516107df929190613500565b908152604051908190036020018120546001600160a01b0316915060009060029061080d908a908a90613500565b908152604051908190036020019020546001600160a01b0390811691508216158061083f57506001600160a01b038116155b15610852576000809350935050506108cc565b60405163d4fac45d60e01b81526001600160a01b0383169063d4fac45d90610880908990899060040161359a565b602060405180830381865afa15801561089d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c19190613510565b925060008311935050505b965096945050505050565b6060806000600285856040516108ee929190613500565b908152604051908190036020019020546001600160a01b03169050806109265760405162461bcd60e51b81526004016105df906135b4565b6040516328d0a61b60e21b81526001600160a01b0382169063a342986c90610956908b908b908b906004016135eb565b600060405180830381865afa158015610973573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261099b9190810190613704565b92509250509550959350505050565b6109b261211f565b6109bc600061214c565b565b60606000600285856040516109d4929190613500565b908152604051908190036020019020546001600160a01b0316905080610a0c5760405162461bcd60e51b81526004016105df90613529565b6040516366e2d09b60e01b81526001600160a01b0384811660048301528216906366e2d09b90602401600060405180830381865afa158015610a52573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7a91908101906137d8565b95945050505050565b606080606080600060028888604051610a9d929190613500565b908152604051908190036020019020546001600160a01b0316905080610ad55760405162461bcd60e51b81526004016105df90613529565b60405163104e999d60e01b81526001600160a01b0382169063104e999d90610b03908c908a9060040161359a565b600060405180830381865afa158015610b20573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b489190810190613904565b929c919b50995090975095505050505050565b60008060028686604051610b70929190613500565b908152604051908190036020019020546001600160a01b0316905080610ba85760405162461bcd60e51b81526004016105df90613529565b60405163d4fac45d60e01b81526001600160a01b0382169063d4fac45d90610bd6908790879060040161359a565b602060405180830381865afa158015610bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c179190613510565b9695505050505050565b60008060028888604051610c36929190613500565b908152604051908190036020018120546001600160a01b03169150600090600290610c649089908990613500565b908152604051908190036020019020546001600160a01b0390811691508216610c9f5760405162461bcd60e51b81526004016105df906135b4565b6001600160a01b038116610cc55760405162461bcd60e51b81526004016105df90613a05565b604051637846611360e01b81526001600160a01b03831690637846611390610cf3908890889060040161359a565b602060405180830381865afa158015610d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d349190613559565b8015610daa5750604051637846611360e01b81526001600160a01b03821690637846611390610d69908890889060040161359a565b602060405180830381865afa158015610d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daa9190613559565b9998505050505050505050565b610dbf612095565b600060028686604051610dd3929190613500565b908152604051908190036020019020546001600160a01b0316905080610e0b5760405162461bcd60e51b81526004016105df90613529565b6001600160a01b0383163314610e635760405162461bcd60e51b815260206004820152601c60248201527f43616e206f6e6c7920626f72726f7720666f7220796f757273656c660000000060448201526064016105df565b6040516314890dcb60e21b81526001600160a01b03821690635224372c90610e9390879087908790600401613576565b600060405180830381600087803b158015610ead57600080fd5b505af1158015610ec1573d6000803e3d6000fd5b50610eda925050506001600160a01b038516848461219c565b50610ee460018055565b5050505050565b610ef3612095565b600060028686604051610f07929190613500565b908152604051908190036020019020546001600160a01b0316905080610f3f5760405162461bcd60e51b81526004016105df90613529565b610f546001600160a01b0385163330856120bf565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af1158015610fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc79190613559565b50604051638340f54960e01b81526001600160a01b03821690638340f54990610ff890879087908790600401613576565b600060405180830381600087803b15801561101257600080fd5b505af1158015611026573d6000803e3d6000fd5b5050505050610ee460018055565b600454600160a01b900460ff166110865760405162461bcd60e51b8152602060048201526016602482015275119b185cda081b1bd85b881b9bdd08195b98589b195960521b60448201526064016105df565b6003546001600160a01b031633146110e05760405162461bcd60e51b815260206004820181905260248201527f556e617574686f72697a656420666c617368206c6f616e2070726f766964657260448201526064016105df565b60035460405163ae63932960e01b81526001600160a01b039091169063ae63932990611114908a9030908b90600401613576565b600060405180830381600087803b15801561112e57600080fd5b505af1158015611142573d6000803e3d6000fd5b505050506111bd8888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a91508990819084018382808284376000920191909152506121d292505050565b6003546111d7906001600160a01b0389811691168861219c565b6003546040516315afd40960e01b81526001600160a01b03898116600483015260248201899052909116906315afd409906044016020604051808303816000875af115801561122a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bd9190613510565b611256612095565b6001600160a01b03861633146112a85760405162461bcd60e51b81526020600482015260176024820152762ab9b2b91036bab9ba103132903a34329031b0b63632b960491b60448201526064016105df565b6000600285856040516112bc929190613500565b908152604051908190036020018120546001600160a01b031691506000906002906112ea9086908690613500565b908152604051908190036020019020546001600160a01b03908116915082166113255760405162461bcd60e51b81526004016105df906135b4565b6001600160a01b03811661134b5760405162461bcd60e51b81526004016105df90613a05565b60005b87518110156115bb57600088828151811061136b5761136b613a3c565b60200260200101519050806020015160000361143957805160405163d4fac45d60e01b81526001600160a01b0386169163d4fac45d916113b091908e9060040161359a565b602060405180830381865afa1580156113cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f19190613510565b602082018190526114395760405162461bcd60e51b81526020600482015260126024820152714e6f2062616c616e636520746f206d6f766560701b60448201526064016105df565b80516020820151604051635820ba6360e01b81526001600160a01b039283166004820181905260248201528c831660448201526064810191909152600091829190871690635820ba639060840160408051808303816000875af11580156114a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c89190613a52565b60405163095ea7b360e01b81526001600160a01b038881166004830152602482018390529294509092509083169063095ea7b3906044016020604051808303816000875af115801561151e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115429190613559565b50846001600160a01b0316638340f549838e846040518463ffffffff1660e01b815260040161157393929190613576565b600060405180830381600087803b15801561158d57600080fd5b505af11580156115a1573d6000803e3d6000fd5b5050505050505080806115b390613a96565b91505061134e565b5050506115c760018055565b505050505050565b600080600286866040516115e4929190613500565b908152604051908190036020019020546001600160a01b031690508061161c5760405162461bcd60e51b81526004016105df90613529565b604051637846611360e01b81526001600160a01b0382169063784661139061164a908790879060040161359a565b602060405180830381865afa158015611667573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c179190613559565b600080600286866040516116a0929190613500565b908152604051908190036020019020546001600160a01b03169050806116d85760405162461bcd60e51b81526004016105df90613529565b60405163118e31b760e01b81526001600160a01b0382169063118e31b790610bd6908790879060040161359a565b60608060006002868660405161171d929190613500565b908152604051908190036020019020546001600160a01b03169050806117555760405162461bcd60e51b81526004016105df90613529565b60405163508a07f160e01b81526001600160a01b03898116600483015260248201899052858116604483015282169063508a07f190606401610956565b6060806000600285856040516117a9929190613500565b908152604051908190036020019020546001600160a01b03169050806117e15760405162461bcd60e51b81526004016105df90613a05565b60405163282a50d760e11b81526001600160a01b03821690635054a1ae90610956908b908b908b906004016135eb565b611819612095565b60006002868660405161182d929190613500565b908152604051908190036020019020546001600160a01b03169050806118655760405162461bcd60e51b81526004016105df90613529565b61187a6001600160a01b0385163330856120bf565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af11580156118c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ed9190613559565b50604051631da649cf60e01b81526001600160a01b03821690631da649cf90610ff890879087908790600401613576565b606080600060028888604051611935929190613500565b908152604051908190036020019020546001600160a01b031690508061196d5760405162461bcd60e51b81526004016105df90613529565b60405163508a07f160e01b81526001600160a01b03878116600483015260248201879052858116604483015282169063508a07f190606401610956565b6119b261211f565b80600284846040516119c5929190613500565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055505050565b611a01612095565b6004805460ff60a01b1916600160a01b17905588611a6f5760405162461bcd60e51b815260206004820152602560248201527f4465627420616d6f756e74206d7573742062652067726561746572207468616e604482015264207a65726f60d81b60648201526084016105df565b6001600160a01b038b163314611ac15760405162461bcd60e51b81526020600482015260176024820152762ab9b2b91036bab9ba103132903a34329031b0b63632b960491b60448201526064016105df565b8715611b8857600060028787604051611adb929190613500565b908152604051908190036020019020546001600160a01b0316905080611b135760405162461bcd60e51b81526004016105df906135b4565b806001600160a01b031663e94201c78c8e6040518363ffffffff1660e01b8152600401611b4192919061359a565b6020604051808303816000875af1158015611b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b849190613510565b9950505b60408051808201825260028152613b1960f11b602090910152517ff9446b8e937d86f0bc87cac73923491692b123ca5f8761908494703758206adf90611bd19084908490613500565b604051809103902003611d0c5760008b8b8b8a8a8a8a8a604051602001611bff989796959493929190613ad8565b60408051601f198184030181526001808452838301909252925060009190602080830190803683370190505090508b81600081518110611c4157611c41613a3c565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508b81600081518110611c9257611c92613a3c565b602090810291909101015260048054604051632e1c224f60e11b81526001600160a01b0390911691635c38449e91611cd2913091879187918a9101613b6a565b600060405180830381600087803b158015611cec57600080fd5b505af1158015611d00573d6000803e3d6000fd5b50505050505050611e39565b6040805180820182526002815261763360f01b602090910152517fec97b8914cfb6741ca720b49246676ddcc2c227e4046450a8d815244c93673da90611d559084908490613500565b60405180910390200361059b57600063ad3a5f4760e01b8c8c8c8b8b8b8b8b604051602401611d8b989796959493929190613ad8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925260035491516348c8949160e01b81529092506001600160a01b03909116906348c8949190611def908490600401613bee565b6000604051808303816000875af1158015611e0e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e369190810190613c01565b50505b6004805460ff60a01b19169055611e4f60018055565b5050505050505050505050565b600454600160a01b900460ff16611eae5760405162461bcd60e51b8152602060048201526016602482015275119b185cda081b1bd85b881b9bdd08195b98589b195960521b60448201526064016105df565b6004546001600160a01b03163314611f085760405162461bcd60e51b815260206004820181905260248201527f556e617574686f72697a656420666c617368206c6f616e2070726f766964657260448201526064016105df565b60008080808080611f1b87890189613c35565b95509550955095509550955089899050600114611f945760405162461bcd60e51b815260206004820152603160248201527f42616c616e63657220563220666c617368206c6f616e2066656520616d6f756e6044820152700e840d8cadccee8d040dad2e6dac2e8c6d607b1b60648201526084016105df565b89896000818110611fa757611fa7613a3c565b90506020020135600014611ff45760405162461bcd60e51b8152602060048201526014602482015273466c617368206c6f616e7320617265206672656560601b60448201526064016105df565b6120028686868686866121d2565b60008a8a600081811061201757612017613a3c565b90506020020135856120299190613cea565b600454909150612046906001600160a01b0388811691168361219c565b505050505050505050505050505050565b61205f61211f565b6001600160a01b03811661208957604051631e4fbdf760e01b8152600060048201526024016105df565b6120928161214c565b50565b6002600154036120b857604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b61211984856001600160a01b03166323b872dd8686866040516024016120e793929190613576565b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506126e2565b50505050565b6000546001600160a01b031633146109bc5760405163118cdaa760e01b81523360048201526024016105df565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b038381166024830152604482018390526121cd91859182169063a9059cbb906064016120e7565b505050565b60006002836040516121e49190613cfd565b908152604051908190036020018120546001600160a01b03169150600090600290612210908590613cfd565b908152604051908190036020019020546001600160a01b039081169150821661224b5760405162461bcd60e51b81526004016105df906135b4565b6001600160a01b0381166122715760405162461bcd60e51b81526004016105df90613a05565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820188905288169063095ea7b3906044016020604051808303816000875af11580156122c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e49190613559565b5060405163e94201c760e01b81526000906001600160a01b0384169063e94201c790612316908b908d9060040161359a565b6020604051808303816000875af1158015612335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123599190613510565b604051631da649cf60e01b81529091506001600160a01b03841690631da649cf9061238c908b908d908c90600401613576565b600060405180830381600087803b1580156123a657600080fd5b505af11580156123ba573d6000803e3d6000fd5b505060405163e94201c760e01b8152600092506001600160a01b038616915063e94201c7906123ef908c908e9060040161359a565b6020604051808303816000875af115801561240e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124329190613510565b90508181106124935760405162461bcd60e51b815260206004820152602760248201527f52657061796d656e7420646964206e6f742072656475636520626f72726f772060448201526662616c616e636560c81b60648201526084016105df565b505060005b855181101561267557600080846001600160a01b0316635820ba638b8a86815181106124c6576124c6613a3c565b6020026020010151600001518e8c88815181106124e5576124e5613a3c565b60209081029190910181015101516040516001600160e01b031960e087901b1681526001600160a01b039485166004820152928416602484015292166044820152606481019190915260840160408051808303816000875af115801561254f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125739190613a52565b60405163095ea7b360e01b81526001600160a01b038781166004830152602482018390529294509092509083169063095ea7b3906044016020604051808303816000875af11580156125c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ed9190613559565b50604051634108d0af60e01b81526001600160a01b038b811660048301528381166024830152604482018390528c81166064830152851690634108d0af90608401600060405180830381600087803b15801561264857600080fd5b505af115801561265c573d6000803e3d6000fd5b505050505050808061266d90613a96565b915050612498565b506040516314890dcb60e21b81526001600160a01b03821690635224372c906126a6908a908c908b90600401613576565b600060405180830381600087803b1580156126c057600080fd5b505af11580156126d4573d6000803e3d6000fd5b505050505050505050505050565b60006126f76001600160a01b03841683612745565b9050805160001415801561271c57508080602001905181019061271a9190613559565b155b156121cd57604051635274afe760e01b81526001600160a01b03841660048201526024016105df565b60606127538383600061275c565b90505b92915050565b6060814710156127815760405163cd78605960e01b81523060048201526024016105df565b600080856001600160a01b0316848660405161279d9190613cfd565b60006040518083038185875af1925050503d80600081146127da576040519150601f19603f3d011682016040523d82523d6000602084013e6127df565b606091505b5091509150610c178683836060826127ff576127fa82612846565b6105e8565b815115801561281657506001600160a01b0384163b155b1561283f57604051639996b31560e01b81526001600160a01b03851660048201526024016105df565b50806105e8565b8051156128565780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b038116811461209257600080fd5b803561288f8161286f565b919050565b60008083601f8401126128a657600080fd5b5081356001600160401b038111156128bd57600080fd5b6020830191508360208285010111156128d557600080fd5b9250929050565b6000806000604084860312156128f157600080fd5b83356128fc8161286f565b925060208401356001600160401b0381111561291757600080fd5b61292386828701612894565b9497909650939450505050565b60ff8116811461209257600080fd5b60008060008060008060008060006101008a8c03121561295e57600080fd5b89356001600160401b0381111561297457600080fd5b6129808c828d01612894565b909a5098505060208a01356129948161286f565b965060408a01356129a48161286f565b955060608a0135945060808a0135935060a08a01356129c281612930565b8093505060c08a0135915060e08a013590509295985092959850929598565b600080600080600080608087890312156129fa57600080fd5b86356001600160401b0380821115612a1157600080fd5b612a1d8a838b01612894565b90985096506020890135915080821115612a3657600080fd5b50612a4389828a01612894565b9095509350506040870135612a578161286f565b91506060870135612a678161286f565b809150509295509295509295565b600080600080600060608688031215612a8d57600080fd5b8535612a988161286f565b945060208601356001600160401b0380821115612ab457600080fd5b818801915088601f830112612ac857600080fd5b813581811115612ad757600080fd5b8960208260061b8501011115612aec57600080fd5b602083019650809550506040880135915080821115612b0a57600080fd5b50612b1788828901612894565b969995985093965092949392505050565b600081518084526020808501945080840160005b83811015612b615781516001600160a01b031687529582019590820190600101612b3c565b509495945050505050565b60005b83811015612b87578181015183820152602001612b6f565b50506000910152565b60008151808452612ba8816020860160208601612b6c565b601f01601f19169290920160200192915050565b604081526000612bcf6040830185612b28565b6020838203818501528185518084528284019150828160051b85010183880160005b83811015612c1f57601f19878403018552612c0d838351612b90565b94860194925090850190600101612bf1565b50909998505050505050505050565b600080600060408486031215612c4357600080fd5b83356001600160401b03811115612c5957600080fd5b612c6586828701612894565b9094509250506020840135612c798161286f565b809150509250925092565b6020815260006127536020830184612b28565b60008060008060608587031215612cad57600080fd5b8435612cb88161286f565b935060208501356001600160401b03811115612cd357600080fd5b612cdf87828801612894565b9094509250506040850135612cf38161286f565b939692955090935050565b600081518084526020808501945080840160005b83811015612b6157815187529582019590820190600101612d12565b600081518084526020808501945080840160005b83811015612b6157815160ff1687529582019590820190600101612d42565b608081526000612d746080830187612b28565b602083820381850152612d878288612cfe565b915083820360408501528186518084528284019150828160051b85010183890160005b83811015612dd857601f19878403018552612dc6838351612b90565b94860194925090850190600101612daa565b50508681036060880152612dec8189612d2e565b9b9a5050505050505050505050565b60008060008060608587031215612e1157600080fd5b84356001600160401b03811115612e2757600080fd5b612e3387828801612894565b9095509350506020850135612e478161286f565b91506040850135612cf38161286f565b600080600080600060808688031215612e6f57600080fd5b85356001600160401b03811115612e8557600080fd5b612e9188828901612894565b9096509450506020860135612ea58161286f565b92506040860135612eb58161286f565b949793965091946060013592915050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715612efe57612efe612ec6565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612f2c57612f2c612ec6565b604052919050565b60006001600160401b03821115612f4d57612f4d612ec6565b5060051b60200190565b600082601f830112612f6857600080fd5b81356020612f7d612f7883612f34565b612f04565b82815260069290921b84018101918181019086841115612f9c57600080fd5b8286015b84811015612fe45760408189031215612fb95760008081fd5b612fc1612edc565b8135612fcc8161286f565b81528185013585820152835291830191604001612fa0565b509695505050505050565b60008060008060008060008060c0898b03121561300b57600080fd5b88356130168161286f565b975060208901356130268161286f565b96506040890135955060608901356001600160401b038082111561304957600080fd5b6130558c838d01612f57565b965060808b013591508082111561306b57600080fd5b6130778c838d01612894565b909650945060a08b013591508082111561309057600080fd5b5061309d8b828c01612894565b999c989b5096995094979396929594505050565b600080600080600080608087890312156130ca57600080fd5b86356130d58161286f565b955060208701356001600160401b03808211156130f157600080fd5b6130fd8a838b01612f57565b9650604089013591508082111561311357600080fd5b61311f8a838b01612894565b9096509450606089013591508082111561313857600080fd5b5061314589828a01612894565b979a9699509497509295939492505050565b60008060008060006080868803121561316f57600080fd5b853561317a8161286f565b94506020860135935060408601356001600160401b0381111561319c57600080fd5b6131a888828901612894565b90945092505060608601356131bc8161286f565b809150509295509295909350565b60006001600160401b038211156131e3576131e3612ec6565b50601f01601f191660200190565b600082601f83011261320257600080fd5b8135613210612f78826131ca565b81815284602083860101111561322557600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561325457600080fd5b81356001600160401b0381111561326a57600080fd5b613276848285016131f1565b949350505050565b60008060008060006080868803121561329657600080fd5b85356001600160401b038111156132ac57600080fd5b6132b888828901612894565b90965094505060208601356132cc8161286f565b92506040860135915060608601356131bc8161286f565b801515811461209257600080fd5b803561288f816132e3565b60008060008060008060008060008060006101008c8e03121561331e57600080fd5b6133278c612884565b9a5061333560208d01612884565b995060408c0135985061334a60608d016132f1565b97506001600160401b038060808e0135111561336557600080fd5b6133758e60808f01358f01612f57565b97508060a08e0135111561338857600080fd5b6133988e60a08f01358f01612894565b909750955060c08d01358110156133ae57600080fd5b6133be8e60c08f01358f01612894565b909550935060e08d01358110156133d457600080fd5b506133e58d60e08e01358e01612894565b81935080925050509295989b509295989b9093969950565b60008083601f84011261340f57600080fd5b5081356001600160401b0381111561342657600080fd5b6020830191508360208260051b85010111156128d557600080fd5b6000806000806000806000806080898b03121561345d57600080fd5b88356001600160401b038082111561347457600080fd5b6134808c838d016133fd565b909a50985060208b013591508082111561349957600080fd5b6134a58c838d016133fd565b909850965060408b01359150808211156134be57600080fd5b6134ca8c838d016133fd565b909650945060608b013591508082111561309057600080fd5b6000602082840312156134f557600080fd5b81356105e88161286f565b8183823760009101908152919050565b60006020828403121561352257600080fd5b5051919050565b602080825260169082015275141c9bdd1bd8dbdb081b9bdd081cdd5c1c1bdc9d195960521b604082015260600190565b60006020828403121561356b57600080fd5b81516105e8816132e3565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6020808252601b908201527f46726f6d2070726f746f636f6c206e6f7420737570706f727465640000000000604082015260600190565b6001600160a01b03848116825260406020808401829052838201859052600092869160608601855b888110156136425784356136268161286f565b8416825284830135838301529385019390850190600101613613565b509998505050505050505050565b600082601f83011261366157600080fd5b81516020613671612f7883612f34565b82815260059290921b8401810191818101908684111561369057600080fd5b8286015b84811015612fe45780516136a78161286f565b8352918301918301613694565b60006136c2612f78846131ca565b90508281528383830111156136d657600080fd5b6105e8836020830184612b6c565b600082601f8301126136f557600080fd5b612753838351602085016136b4565b6000806040838503121561371757600080fd5b82516001600160401b038082111561372e57600080fd5b61373a86838701613650565b935060209150818501518181111561375157600080fd5b8501601f8101871361376257600080fd5b8051613770612f7882612f34565b81815260059190911b8201840190848101908983111561378f57600080fd5b8584015b838110156137c7578051868111156137ab5760008081fd5b6137b98c89838901016136e4565b845250918601918601613793565b508096505050505050509250929050565b6000602082840312156137ea57600080fd5b81516001600160401b0381111561380057600080fd5b61327684828501613650565b600082601f83011261381d57600080fd5b8151602061382d612f7883612f34565b82815260059290921b8401810191818101908684111561384c57600080fd5b8286015b84811015612fe45780516001600160401b0381111561386f5760008081fd5b8701603f810189136138815760008081fd5b6138928986830151604084016136b4565b845250918301918301613850565b600082601f8301126138b157600080fd5b815160206138c1612f7883612f34565b82815260059290921b840181019181810190868411156138e057600080fd5b8286015b84811015612fe45780516138f781612930565b83529183019183016138e4565b6000806000806080858703121561391a57600080fd5b84516001600160401b038082111561393157600080fd5b61393d88838901613650565b955060209150818701518181111561395457600080fd5b8701601f8101891361396557600080fd5b8051613973612f7882612f34565b81815260059190911b8201840190848101908b83111561399257600080fd5b928501925b828410156139b057835182529285019290850190613997565b60408b01519098509450505050808211156139ca57600080fd5b6139d68883890161380c565b935060608701519150808211156139ec57600080fd5b506139f9878288016138a0565b91505092959194509250565b60208082526019908201527f546f2070726f746f636f6c206e6f7420737570706f7274656400000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60008060408385031215613a6557600080fd5b8251613a708161286f565b6020939093015192949293505050565b634e487b7160e01b600052601160045260246000fd5b600060018201613aa857613aa8613a80565b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060c0820160018060a01b03808c1684526020818c168186015260408b8187015260c06060870152838b5180865260e088019150838d01955060005b81811015613b3c578651805187168452850151858401529584019591830191600101613b15565b50508681036080880152613b51818b8d613aaf565b94505050505082810360a0840152612dec818587613aaf565b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b81811015613bb8578551851683529483019491830191600101613b9a565b50508581036040870152613bcc8189612cfe565b93505050508281036060840152613be38185612b90565b979650505050505050565b6020815260006127536020830184612b90565b600060208284031215613c1357600080fd5b81516001600160401b03811115613c2957600080fd5b613276848285016136e4565b60008060008060008060c08789031215613c4e57600080fd5b8635613c598161286f565b95506020870135613c698161286f565b94506040870135935060608701356001600160401b0380821115613c8c57600080fd5b613c988a838b01612f57565b94506080890135915080821115613cae57600080fd5b613cba8a838b016131f1565b935060a0890135915080821115613cd057600080fd5b50613cdd89828a016131f1565b9150509295509295509295565b8082018082111561275657612756613a80565b60008251613d0f818460208701612b6c565b919091019291505056fea26469706673582212203de02f2c9d0f74ceacadaa3128b350e221990e1a80aec8c0bf7fe8c2f4c8b3e964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c8063ac3cded8116100f9578063d7b28d5f11610097578063e30b155e11610071578063e30b155e146103f6578063e327d31214610409578063f04f27071461041c578063f2fde38b1461042f57600080fd5b8063d7b28d5f1461039c578063db236a1f146103af578063e0b6677a146103e357600080fd5b8063ba71067f116100d3578063ba71067f14610350578063caf89ac514610363578063cc60d11d14610376578063d19210e51461038957600080fd5b8063ac3cded814610317578063ad3a5f471461032a578063b7cf06d71461033d57600080fd5b8063715018a6116101665780637ffe721e116101405780637ffe721e146102bd57806385032044146102d05780638da5cb5b146102f3578063a77e92621461030457600080fd5b8063715018a61461027257806375e9ffb41461027a5780637a04707d1461029a57600080fd5b806303862869146101ae5780630acefd35146101d457806310c0a157146101ff57806325d56916146102125780633428947e146102275780635c73812114610251575b600080fd5b6101c16101bc3660046128dc565b610442565b6040519081526020015b60405180910390f35b6003546101e7906001600160a01b031681565b6040516001600160a01b0390911681526020016101cb565b6004546101e7906001600160a01b031681565b61022561022036600461293f565b6105ef565b005b61023a6102353660046129e1565b6107c8565b6040805192151583526020830191909152016101cb565b61026461025f366004612a75565b6108d7565b6040516101cb929190612bbc565b6102256109aa565b61028d610288366004612c2e565b6109be565b6040516101cb9190612c84565b6102ad6102a8366004612c97565b610a83565b6040516101cb9493929190612d61565b6101c16102cb366004612dfb565b610b5b565b6102e36102de3660046129e1565b610c21565b60405190151581526020016101cb565b6000546001600160a01b03166101e7565b610225610312366004612e57565b610db7565b610225610325366004612e57565b610eeb565b610225610338366004612fef565b611034565b61022561034b3660046130b1565b61124e565b6102e361035e366004612dfb565b6115cf565b6101c1610371366004612dfb565b61168b565b610264610384366004613157565b611706565b610264610397366004612a75565b611792565b6102256103aa366004612e57565b611811565b6101e76103bd366004613242565b80516020818301810180516002825292820191909301209152546001600160a01b031681565b6102646103f136600461327e565b61191e565b610225610404366004612c2e565b6119aa565b6102256104173660046132fc565b6119f9565b61022561042a366004613441565b611e5c565b61022561043d3660046134e3565b612057565b60408051808201825260028152613b1960f11b602090910152516000907ff9446b8e937d86f0bc87cac73923491692b123ca5f8761908494703758206adf9061048e9085908590613500565b60405180910390200361051357600480546040516370a0823160e01b81526001600160a01b03918216928101929092528516906370a08231906024015b602060405180830381865afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c9190613510565b90506105e8565b6040805180820182526002815261763360f01b602090910152517fec97b8914cfb6741ca720b49246676ddcc2c227e4046450a8d815244c93673da9061055c9085908590613500565b60405180910390200361059b576003546040516370a0823160e01b81526001600160a01b039182166004820152908516906370a08231906024016104cb565b60405162461bcd60e51b815260206004820152601e60248201527f556e737570706f7274656420666c617368206c6f616e2076657273696f6e000060448201526064015b60405180910390fd5b9392505050565b6105f7612095565b600060028a8a60405161060b929190613500565b908152604051908190036020019020546001600160a01b03169050806106435760405162461bcd60e51b81526004016105df90613529565b60405163d505accf60e01b8152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c481018390526001600160a01b0389169063d505accf9060e401600060405180830381600087803b1580156106af57600080fd5b505af11580156106c3573d6000803e3d6000fd5b506106dd925050506001600160a01b0389163330896120bf565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820188905289169063095ea7b3906044016020604051808303816000875af115801561072c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107509190613559565b50604051638340f54960e01b81526001600160a01b03821690638340f54990610781908b908b908b90600401613576565b600060405180830381600087803b15801561079b57600080fd5b505af11580156107af573d6000803e3d6000fd5b50505050506107bd60018055565b505050505050505050565b6000806000600289896040516107df929190613500565b908152604051908190036020018120546001600160a01b0316915060009060029061080d908a908a90613500565b908152604051908190036020019020546001600160a01b0390811691508216158061083f57506001600160a01b038116155b15610852576000809350935050506108cc565b60405163d4fac45d60e01b81526001600160a01b0383169063d4fac45d90610880908990899060040161359a565b602060405180830381865afa15801561089d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c19190613510565b925060008311935050505b965096945050505050565b6060806000600285856040516108ee929190613500565b908152604051908190036020019020546001600160a01b03169050806109265760405162461bcd60e51b81526004016105df906135b4565b6040516328d0a61b60e21b81526001600160a01b0382169063a342986c90610956908b908b908b906004016135eb565b600060405180830381865afa158015610973573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261099b9190810190613704565b92509250509550959350505050565b6109b261211f565b6109bc600061214c565b565b60606000600285856040516109d4929190613500565b908152604051908190036020019020546001600160a01b0316905080610a0c5760405162461bcd60e51b81526004016105df90613529565b6040516366e2d09b60e01b81526001600160a01b0384811660048301528216906366e2d09b90602401600060405180830381865afa158015610a52573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7a91908101906137d8565b95945050505050565b606080606080600060028888604051610a9d929190613500565b908152604051908190036020019020546001600160a01b0316905080610ad55760405162461bcd60e51b81526004016105df90613529565b60405163104e999d60e01b81526001600160a01b0382169063104e999d90610b03908c908a9060040161359a565b600060405180830381865afa158015610b20573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b489190810190613904565b929c919b50995090975095505050505050565b60008060028686604051610b70929190613500565b908152604051908190036020019020546001600160a01b0316905080610ba85760405162461bcd60e51b81526004016105df90613529565b60405163d4fac45d60e01b81526001600160a01b0382169063d4fac45d90610bd6908790879060040161359a565b602060405180830381865afa158015610bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c179190613510565b9695505050505050565b60008060028888604051610c36929190613500565b908152604051908190036020018120546001600160a01b03169150600090600290610c649089908990613500565b908152604051908190036020019020546001600160a01b0390811691508216610c9f5760405162461bcd60e51b81526004016105df906135b4565b6001600160a01b038116610cc55760405162461bcd60e51b81526004016105df90613a05565b604051637846611360e01b81526001600160a01b03831690637846611390610cf3908890889060040161359a565b602060405180830381865afa158015610d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d349190613559565b8015610daa5750604051637846611360e01b81526001600160a01b03821690637846611390610d69908890889060040161359a565b602060405180830381865afa158015610d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daa9190613559565b9998505050505050505050565b610dbf612095565b600060028686604051610dd3929190613500565b908152604051908190036020019020546001600160a01b0316905080610e0b5760405162461bcd60e51b81526004016105df90613529565b6001600160a01b0383163314610e635760405162461bcd60e51b815260206004820152601c60248201527f43616e206f6e6c7920626f72726f7720666f7220796f757273656c660000000060448201526064016105df565b6040516314890dcb60e21b81526001600160a01b03821690635224372c90610e9390879087908790600401613576565b600060405180830381600087803b158015610ead57600080fd5b505af1158015610ec1573d6000803e3d6000fd5b50610eda925050506001600160a01b038516848461219c565b50610ee460018055565b5050505050565b610ef3612095565b600060028686604051610f07929190613500565b908152604051908190036020019020546001600160a01b0316905080610f3f5760405162461bcd60e51b81526004016105df90613529565b610f546001600160a01b0385163330856120bf565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af1158015610fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc79190613559565b50604051638340f54960e01b81526001600160a01b03821690638340f54990610ff890879087908790600401613576565b600060405180830381600087803b15801561101257600080fd5b505af1158015611026573d6000803e3d6000fd5b5050505050610ee460018055565b600454600160a01b900460ff166110865760405162461bcd60e51b8152602060048201526016602482015275119b185cda081b1bd85b881b9bdd08195b98589b195960521b60448201526064016105df565b6003546001600160a01b031633146110e05760405162461bcd60e51b815260206004820181905260248201527f556e617574686f72697a656420666c617368206c6f616e2070726f766964657260448201526064016105df565b60035460405163ae63932960e01b81526001600160a01b039091169063ae63932990611114908a9030908b90600401613576565b600060405180830381600087803b15801561112e57600080fd5b505af1158015611142573d6000803e3d6000fd5b505050506111bd8888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a91508990819084018382808284376000920191909152506121d292505050565b6003546111d7906001600160a01b0389811691168861219c565b6003546040516315afd40960e01b81526001600160a01b03898116600483015260248201899052909116906315afd409906044016020604051808303816000875af115801561122a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bd9190613510565b611256612095565b6001600160a01b03861633146112a85760405162461bcd60e51b81526020600482015260176024820152762ab9b2b91036bab9ba103132903a34329031b0b63632b960491b60448201526064016105df565b6000600285856040516112bc929190613500565b908152604051908190036020018120546001600160a01b031691506000906002906112ea9086908690613500565b908152604051908190036020019020546001600160a01b03908116915082166113255760405162461bcd60e51b81526004016105df906135b4565b6001600160a01b03811661134b5760405162461bcd60e51b81526004016105df90613a05565b60005b87518110156115bb57600088828151811061136b5761136b613a3c565b60200260200101519050806020015160000361143957805160405163d4fac45d60e01b81526001600160a01b0386169163d4fac45d916113b091908e9060040161359a565b602060405180830381865afa1580156113cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f19190613510565b602082018190526114395760405162461bcd60e51b81526020600482015260126024820152714e6f2062616c616e636520746f206d6f766560701b60448201526064016105df565b80516020820151604051635820ba6360e01b81526001600160a01b039283166004820181905260248201528c831660448201526064810191909152600091829190871690635820ba639060840160408051808303816000875af11580156114a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c89190613a52565b60405163095ea7b360e01b81526001600160a01b038881166004830152602482018390529294509092509083169063095ea7b3906044016020604051808303816000875af115801561151e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115429190613559565b50846001600160a01b0316638340f549838e846040518463ffffffff1660e01b815260040161157393929190613576565b600060405180830381600087803b15801561158d57600080fd5b505af11580156115a1573d6000803e3d6000fd5b5050505050505080806115b390613a96565b91505061134e565b5050506115c760018055565b505050505050565b600080600286866040516115e4929190613500565b908152604051908190036020019020546001600160a01b031690508061161c5760405162461bcd60e51b81526004016105df90613529565b604051637846611360e01b81526001600160a01b0382169063784661139061164a908790879060040161359a565b602060405180830381865afa158015611667573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c179190613559565b600080600286866040516116a0929190613500565b908152604051908190036020019020546001600160a01b03169050806116d85760405162461bcd60e51b81526004016105df90613529565b60405163118e31b760e01b81526001600160a01b0382169063118e31b790610bd6908790879060040161359a565b60608060006002868660405161171d929190613500565b908152604051908190036020019020546001600160a01b03169050806117555760405162461bcd60e51b81526004016105df90613529565b60405163508a07f160e01b81526001600160a01b03898116600483015260248201899052858116604483015282169063508a07f190606401610956565b6060806000600285856040516117a9929190613500565b908152604051908190036020019020546001600160a01b03169050806117e15760405162461bcd60e51b81526004016105df90613a05565b60405163282a50d760e11b81526001600160a01b03821690635054a1ae90610956908b908b908b906004016135eb565b611819612095565b60006002868660405161182d929190613500565b908152604051908190036020019020546001600160a01b03169050806118655760405162461bcd60e51b81526004016105df90613529565b61187a6001600160a01b0385163330856120bf565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af11580156118c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ed9190613559565b50604051631da649cf60e01b81526001600160a01b03821690631da649cf90610ff890879087908790600401613576565b606080600060028888604051611935929190613500565b908152604051908190036020019020546001600160a01b031690508061196d5760405162461bcd60e51b81526004016105df90613529565b60405163508a07f160e01b81526001600160a01b03878116600483015260248201879052858116604483015282169063508a07f190606401610956565b6119b261211f565b80600284846040516119c5929190613500565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055505050565b611a01612095565b6004805460ff60a01b1916600160a01b17905588611a6f5760405162461bcd60e51b815260206004820152602560248201527f4465627420616d6f756e74206d7573742062652067726561746572207468616e604482015264207a65726f60d81b60648201526084016105df565b6001600160a01b038b163314611ac15760405162461bcd60e51b81526020600482015260176024820152762ab9b2b91036bab9ba103132903a34329031b0b63632b960491b60448201526064016105df565b8715611b8857600060028787604051611adb929190613500565b908152604051908190036020019020546001600160a01b0316905080611b135760405162461bcd60e51b81526004016105df906135b4565b806001600160a01b031663e94201c78c8e6040518363ffffffff1660e01b8152600401611b4192919061359a565b6020604051808303816000875af1158015611b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b849190613510565b9950505b60408051808201825260028152613b1960f11b602090910152517ff9446b8e937d86f0bc87cac73923491692b123ca5f8761908494703758206adf90611bd19084908490613500565b604051809103902003611d0c5760008b8b8b8a8a8a8a8a604051602001611bff989796959493929190613ad8565b60408051601f198184030181526001808452838301909252925060009190602080830190803683370190505090508b81600081518110611c4157611c41613a3c565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508b81600081518110611c9257611c92613a3c565b602090810291909101015260048054604051632e1c224f60e11b81526001600160a01b0390911691635c38449e91611cd2913091879187918a9101613b6a565b600060405180830381600087803b158015611cec57600080fd5b505af1158015611d00573d6000803e3d6000fd5b50505050505050611e39565b6040805180820182526002815261763360f01b602090910152517fec97b8914cfb6741ca720b49246676ddcc2c227e4046450a8d815244c93673da90611d559084908490613500565b60405180910390200361059b57600063ad3a5f4760e01b8c8c8c8b8b8b8b8b604051602401611d8b989796959493929190613ad8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925260035491516348c8949160e01b81529092506001600160a01b03909116906348c8949190611def908490600401613bee565b6000604051808303816000875af1158015611e0e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e369190810190613c01565b50505b6004805460ff60a01b19169055611e4f60018055565b5050505050505050505050565b600454600160a01b900460ff16611eae5760405162461bcd60e51b8152602060048201526016602482015275119b185cda081b1bd85b881b9bdd08195b98589b195960521b60448201526064016105df565b6004546001600160a01b03163314611f085760405162461bcd60e51b815260206004820181905260248201527f556e617574686f72697a656420666c617368206c6f616e2070726f766964657260448201526064016105df565b60008080808080611f1b87890189613c35565b95509550955095509550955089899050600114611f945760405162461bcd60e51b815260206004820152603160248201527f42616c616e63657220563220666c617368206c6f616e2066656520616d6f756e6044820152700e840d8cadccee8d040dad2e6dac2e8c6d607b1b60648201526084016105df565b89896000818110611fa757611fa7613a3c565b90506020020135600014611ff45760405162461bcd60e51b8152602060048201526014602482015273466c617368206c6f616e7320617265206672656560601b60448201526064016105df565b6120028686868686866121d2565b60008a8a600081811061201757612017613a3c565b90506020020135856120299190613cea565b600454909150612046906001600160a01b0388811691168361219c565b505050505050505050505050505050565b61205f61211f565b6001600160a01b03811661208957604051631e4fbdf760e01b8152600060048201526024016105df565b6120928161214c565b50565b6002600154036120b857604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b61211984856001600160a01b03166323b872dd8686866040516024016120e793929190613576565b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506126e2565b50505050565b6000546001600160a01b031633146109bc5760405163118cdaa760e01b81523360048201526024016105df565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b038381166024830152604482018390526121cd91859182169063a9059cbb906064016120e7565b505050565b60006002836040516121e49190613cfd565b908152604051908190036020018120546001600160a01b03169150600090600290612210908590613cfd565b908152604051908190036020019020546001600160a01b039081169150821661224b5760405162461bcd60e51b81526004016105df906135b4565b6001600160a01b0381166122715760405162461bcd60e51b81526004016105df90613a05565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820188905288169063095ea7b3906044016020604051808303816000875af11580156122c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e49190613559565b5060405163e94201c760e01b81526000906001600160a01b0384169063e94201c790612316908b908d9060040161359a565b6020604051808303816000875af1158015612335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123599190613510565b604051631da649cf60e01b81529091506001600160a01b03841690631da649cf9061238c908b908d908c90600401613576565b600060405180830381600087803b1580156123a657600080fd5b505af11580156123ba573d6000803e3d6000fd5b505060405163e94201c760e01b8152600092506001600160a01b038616915063e94201c7906123ef908c908e9060040161359a565b6020604051808303816000875af115801561240e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124329190613510565b90508181106124935760405162461bcd60e51b815260206004820152602760248201527f52657061796d656e7420646964206e6f742072656475636520626f72726f772060448201526662616c616e636560c81b60648201526084016105df565b505060005b855181101561267557600080846001600160a01b0316635820ba638b8a86815181106124c6576124c6613a3c565b6020026020010151600001518e8c88815181106124e5576124e5613a3c565b60209081029190910181015101516040516001600160e01b031960e087901b1681526001600160a01b039485166004820152928416602484015292166044820152606481019190915260840160408051808303816000875af115801561254f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125739190613a52565b60405163095ea7b360e01b81526001600160a01b038781166004830152602482018390529294509092509083169063095ea7b3906044016020604051808303816000875af11580156125c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ed9190613559565b50604051634108d0af60e01b81526001600160a01b038b811660048301528381166024830152604482018390528c81166064830152851690634108d0af90608401600060405180830381600087803b15801561264857600080fd5b505af115801561265c573d6000803e3d6000fd5b505050505050808061266d90613a96565b915050612498565b506040516314890dcb60e21b81526001600160a01b03821690635224372c906126a6908a908c908b90600401613576565b600060405180830381600087803b1580156126c057600080fd5b505af11580156126d4573d6000803e3d6000fd5b505050505050505050505050565b60006126f76001600160a01b03841683612745565b9050805160001415801561271c57508080602001905181019061271a9190613559565b155b156121cd57604051635274afe760e01b81526001600160a01b03841660048201526024016105df565b60606127538383600061275c565b90505b92915050565b6060814710156127815760405163cd78605960e01b81523060048201526024016105df565b600080856001600160a01b0316848660405161279d9190613cfd565b60006040518083038185875af1925050503d80600081146127da576040519150601f19603f3d011682016040523d82523d6000602084013e6127df565b606091505b5091509150610c178683836060826127ff576127fa82612846565b6105e8565b815115801561281657506001600160a01b0384163b155b1561283f57604051639996b31560e01b81526001600160a01b03851660048201526024016105df565b50806105e8565b8051156128565780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b038116811461209257600080fd5b803561288f8161286f565b919050565b60008083601f8401126128a657600080fd5b5081356001600160401b038111156128bd57600080fd5b6020830191508360208285010111156128d557600080fd5b9250929050565b6000806000604084860312156128f157600080fd5b83356128fc8161286f565b925060208401356001600160401b0381111561291757600080fd5b61292386828701612894565b9497909650939450505050565b60ff8116811461209257600080fd5b60008060008060008060008060006101008a8c03121561295e57600080fd5b89356001600160401b0381111561297457600080fd5b6129808c828d01612894565b909a5098505060208a01356129948161286f565b965060408a01356129a48161286f565b955060608a0135945060808a0135935060a08a01356129c281612930565b8093505060c08a0135915060e08a013590509295985092959850929598565b600080600080600080608087890312156129fa57600080fd5b86356001600160401b0380821115612a1157600080fd5b612a1d8a838b01612894565b90985096506020890135915080821115612a3657600080fd5b50612a4389828a01612894565b9095509350506040870135612a578161286f565b91506060870135612a678161286f565b809150509295509295509295565b600080600080600060608688031215612a8d57600080fd5b8535612a988161286f565b945060208601356001600160401b0380821115612ab457600080fd5b818801915088601f830112612ac857600080fd5b813581811115612ad757600080fd5b8960208260061b8501011115612aec57600080fd5b602083019650809550506040880135915080821115612b0a57600080fd5b50612b1788828901612894565b969995985093965092949392505050565b600081518084526020808501945080840160005b83811015612b615781516001600160a01b031687529582019590820190600101612b3c565b509495945050505050565b60005b83811015612b87578181015183820152602001612b6f565b50506000910152565b60008151808452612ba8816020860160208601612b6c565b601f01601f19169290920160200192915050565b604081526000612bcf6040830185612b28565b6020838203818501528185518084528284019150828160051b85010183880160005b83811015612c1f57601f19878403018552612c0d838351612b90565b94860194925090850190600101612bf1565b50909998505050505050505050565b600080600060408486031215612c4357600080fd5b83356001600160401b03811115612c5957600080fd5b612c6586828701612894565b9094509250506020840135612c798161286f565b809150509250925092565b6020815260006127536020830184612b28565b60008060008060608587031215612cad57600080fd5b8435612cb88161286f565b935060208501356001600160401b03811115612cd357600080fd5b612cdf87828801612894565b9094509250506040850135612cf38161286f565b939692955090935050565b600081518084526020808501945080840160005b83811015612b6157815187529582019590820190600101612d12565b600081518084526020808501945080840160005b83811015612b6157815160ff1687529582019590820190600101612d42565b608081526000612d746080830187612b28565b602083820381850152612d878288612cfe565b915083820360408501528186518084528284019150828160051b85010183890160005b83811015612dd857601f19878403018552612dc6838351612b90565b94860194925090850190600101612daa565b50508681036060880152612dec8189612d2e565b9b9a5050505050505050505050565b60008060008060608587031215612e1157600080fd5b84356001600160401b03811115612e2757600080fd5b612e3387828801612894565b9095509350506020850135612e478161286f565b91506040850135612cf38161286f565b600080600080600060808688031215612e6f57600080fd5b85356001600160401b03811115612e8557600080fd5b612e9188828901612894565b9096509450506020860135612ea58161286f565b92506040860135612eb58161286f565b949793965091946060013592915050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715612efe57612efe612ec6565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612f2c57612f2c612ec6565b604052919050565b60006001600160401b03821115612f4d57612f4d612ec6565b5060051b60200190565b600082601f830112612f6857600080fd5b81356020612f7d612f7883612f34565b612f04565b82815260069290921b84018101918181019086841115612f9c57600080fd5b8286015b84811015612fe45760408189031215612fb95760008081fd5b612fc1612edc565b8135612fcc8161286f565b81528185013585820152835291830191604001612fa0565b509695505050505050565b60008060008060008060008060c0898b03121561300b57600080fd5b88356130168161286f565b975060208901356130268161286f565b96506040890135955060608901356001600160401b038082111561304957600080fd5b6130558c838d01612f57565b965060808b013591508082111561306b57600080fd5b6130778c838d01612894565b909650945060a08b013591508082111561309057600080fd5b5061309d8b828c01612894565b999c989b5096995094979396929594505050565b600080600080600080608087890312156130ca57600080fd5b86356130d58161286f565b955060208701356001600160401b03808211156130f157600080fd5b6130fd8a838b01612f57565b9650604089013591508082111561311357600080fd5b61311f8a838b01612894565b9096509450606089013591508082111561313857600080fd5b5061314589828a01612894565b979a9699509497509295939492505050565b60008060008060006080868803121561316f57600080fd5b853561317a8161286f565b94506020860135935060408601356001600160401b0381111561319c57600080fd5b6131a888828901612894565b90945092505060608601356131bc8161286f565b809150509295509295909350565b60006001600160401b038211156131e3576131e3612ec6565b50601f01601f191660200190565b600082601f83011261320257600080fd5b8135613210612f78826131ca565b81815284602083860101111561322557600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561325457600080fd5b81356001600160401b0381111561326a57600080fd5b613276848285016131f1565b949350505050565b60008060008060006080868803121561329657600080fd5b85356001600160401b038111156132ac57600080fd5b6132b888828901612894565b90965094505060208601356132cc8161286f565b92506040860135915060608601356131bc8161286f565b801515811461209257600080fd5b803561288f816132e3565b60008060008060008060008060008060006101008c8e03121561331e57600080fd5b6133278c612884565b9a5061333560208d01612884565b995060408c0135985061334a60608d016132f1565b97506001600160401b038060808e0135111561336557600080fd5b6133758e60808f01358f01612f57565b97508060a08e0135111561338857600080fd5b6133988e60a08f01358f01612894565b909750955060c08d01358110156133ae57600080fd5b6133be8e60c08f01358f01612894565b909550935060e08d01358110156133d457600080fd5b506133e58d60e08e01358e01612894565b81935080925050509295989b509295989b9093969950565b60008083601f84011261340f57600080fd5b5081356001600160401b0381111561342657600080fd5b6020830191508360208260051b85010111156128d557600080fd5b6000806000806000806000806080898b03121561345d57600080fd5b88356001600160401b038082111561347457600080fd5b6134808c838d016133fd565b909a50985060208b013591508082111561349957600080fd5b6134a58c838d016133fd565b909850965060408b01359150808211156134be57600080fd5b6134ca8c838d016133fd565b909650945060608b013591508082111561309057600080fd5b6000602082840312156134f557600080fd5b81356105e88161286f565b8183823760009101908152919050565b60006020828403121561352257600080fd5b5051919050565b602080825260169082015275141c9bdd1bd8dbdb081b9bdd081cdd5c1c1bdc9d195960521b604082015260600190565b60006020828403121561356b57600080fd5b81516105e8816132e3565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6020808252601b908201527f46726f6d2070726f746f636f6c206e6f7420737570706f727465640000000000604082015260600190565b6001600160a01b03848116825260406020808401829052838201859052600092869160608601855b888110156136425784356136268161286f565b8416825284830135838301529385019390850190600101613613565b509998505050505050505050565b600082601f83011261366157600080fd5b81516020613671612f7883612f34565b82815260059290921b8401810191818101908684111561369057600080fd5b8286015b84811015612fe45780516136a78161286f565b8352918301918301613694565b60006136c2612f78846131ca565b90508281528383830111156136d657600080fd5b6105e8836020830184612b6c565b600082601f8301126136f557600080fd5b612753838351602085016136b4565b6000806040838503121561371757600080fd5b82516001600160401b038082111561372e57600080fd5b61373a86838701613650565b935060209150818501518181111561375157600080fd5b8501601f8101871361376257600080fd5b8051613770612f7882612f34565b81815260059190911b8201840190848101908983111561378f57600080fd5b8584015b838110156137c7578051868111156137ab5760008081fd5b6137b98c89838901016136e4565b845250918601918601613793565b508096505050505050509250929050565b6000602082840312156137ea57600080fd5b81516001600160401b0381111561380057600080fd5b61327684828501613650565b600082601f83011261381d57600080fd5b8151602061382d612f7883612f34565b82815260059290921b8401810191818101908684111561384c57600080fd5b8286015b84811015612fe45780516001600160401b0381111561386f5760008081fd5b8701603f810189136138815760008081fd5b6138928986830151604084016136b4565b845250918301918301613850565b600082601f8301126138b157600080fd5b815160206138c1612f7883612f34565b82815260059290921b840181019181810190868411156138e057600080fd5b8286015b84811015612fe45780516138f781612930565b83529183019183016138e4565b6000806000806080858703121561391a57600080fd5b84516001600160401b038082111561393157600080fd5b61393d88838901613650565b955060209150818701518181111561395457600080fd5b8701601f8101891361396557600080fd5b8051613973612f7882612f34565b81815260059190911b8201840190848101908b83111561399257600080fd5b928501925b828410156139b057835182529285019290850190613997565b60408b01519098509450505050808211156139ca57600080fd5b6139d68883890161380c565b935060608701519150808211156139ec57600080fd5b506139f9878288016138a0565b91505092959194509250565b60208082526019908201527f546f2070726f746f636f6c206e6f7420737570706f7274656400000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60008060408385031215613a6557600080fd5b8251613a708161286f565b6020939093015192949293505050565b634e487b7160e01b600052601160045260246000fd5b600060018201613aa857613aa8613a80565b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060c0820160018060a01b03808c1684526020818c168186015260408b8187015260c06060870152838b5180865260e088019150838d01955060005b81811015613b3c578651805187168452850151858401529584019591830191600101613b15565b50508681036080880152613b51818b8d613aaf565b94505050505082810360a0840152612dec818587613aaf565b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b81811015613bb8578551851683529483019491830191600101613b9a565b50508581036040870152613bcc8189612cfe565b93505050508281036060840152613be38185612b90565b979650505050505050565b6020815260006127536020830184612b90565b600060208284031215613c1357600080fd5b81516001600160401b03811115613c2957600080fd5b613276848285016136e4565b60008060008060008060c08789031215613c4e57600080fd5b8635613c598161286f565b95506020870135613c698161286f565b94506040870135935060608701356001600160401b0380821115613c8c57600080fd5b613c988a838b01612f57565b94506080890135915080821115613cae57600080fd5b613cba8a838b016131f1565b935060a0890135915080821115613cd057600080fd5b50613cdd89828a016131f1565b9150509295509295509295565b8082018082111561275657612756613a80565b60008251613d0f818460208701612b6c565b919091019291505056fea26469706673582212203de02f2c9d0f74ceacadaa3128b350e221990e1a80aec8c0bf7fe8c2f4c8b3e964736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "borrow(string,address,address,uint256)": {
        "params": {
          "amount": "The amount to borrow",
          "protocolName": "The name of the protocol to borrow from",
          "token": "The token to borrow",
          "user": "The user to borrow for"
        }
      },
      "canMoveCollateral(string,string,address,address)": {
        "params": {
          "collateral": "The address of the collateral token to check",
          "fromProtocol": "The name of the source protocol",
          "market": "The address of the market token",
          "toProtocol": "The name of the target protocol"
        },
        "returns": {
          "canMove": "Whether the collateral can be moved between protocols"
        }
      },
      "canMoveSupply(string,string,address,address)": {
        "params": {
          "fromProtocol": "The name of the source protocol",
          "toProtocol": "The name of the target protocol",
          "token": "The token to check",
          "user": "The user address"
        },
        "returns": {
          "canMove": "Whether the token can be moved between protocols",
          "fromBalance": "The user's balance in the source protocol"
        }
      },
      "getFlashLoanProviderBalance(address,string)": {
        "params": {
          "flashLoanVersion": "The flash loan provider version (\"v2\" or \"v3\")",
          "token": "The token address to check balance for"
        },
        "returns": {
          "_0": "The token balance in the flash loan provider"
        }
      },
      "getFromProtocolApprovalsForMove(address,(address,uint256)[],string)": {
        "params": {
          "collaterals": "The collaterals being moved",
          "debtToken": "The token being borrowed",
          "fromProtocol": "The protocol moving from "
        },
        "returns": {
          "_0": "Array of target addresses and encoded function call data"
        }
      },
      "getSupportedCollaterals(string,address)": {
        "params": {
          "market": "The address of the market token",
          "protocolName": "The name of the protocol to check"
        },
        "returns": {
          "collateralAddresses": "Array of supported collateral token addresses"
        }
      },
      "getToProtocolInboundActions(address,(address,uint256)[],string)": {
        "params": {
          "collaterals": "The collaterals being moved",
          "debtToken": "The token being borrowed",
          "toProtocol": "The protocol moving to"
        },
        "returns": {
          "_0": "Array of target addresses and encoded function call data"
        }
      },
      "isCollateralSupported(string,address,address)": {
        "params": {
          "collateral": "The address of the collateral token to check",
          "market": "The address of the market token",
          "protocolName": "The name of the protocol to check"
        },
        "returns": {
          "isSupported": "Whether the collateral is supported in the protocol"
        }
      },
      "moveSupply(address,(address,uint256)[],string,string)": {
        "params": {
          "collaterals": "Array of collateral tokens and amounts to move",
          "fromProtocol": "The source protocol name",
          "toProtocol": "The destination protocol name",
          "user": "The user address whose supply is being moved"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(string,address,address,uint256)": {
        "notice": "Borrow tokens from a protocol"
      },
      "canMoveCollateral(string,string,address,address)": {
        "notice": "Check if a collateral can be moved from one protocol to another"
      },
      "canMoveSupply(string,string,address,address)": {
        "notice": "Check if a token can be moved from one protocol to another"
      },
      "getFlashLoanProviderBalance(address,string)": {
        "notice": "Get the balance of a token in a flash loan provider"
      },
      "getFromProtocolApprovalsForMove(address,(address,uint256)[],string)": {
        "notice": "Get approvals for collateral movement from source protocol"
      },
      "getSupportedCollaterals(string,address)": {
        "notice": "Get all supported collaterals for a specific market in a protocol"
      },
      "getToProtocolInboundActions(address,(address,uint256)[],string)": {
        "notice": "Get inbound collateral actions from destination protocol"
      },
      "isCollateralSupported(string,address,address)": {
        "notice": "Check if a collateral token is supported in the target protocol"
      },
      "moveSupply(address,(address,uint256)[],string,string)": {
        "notice": "Move supplied assets from one protocol to another"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/RouterGateway.sol:RouterGateway",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 845,
        "contract": "contracts/RouterGateway.sol:RouterGateway",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 940,
        "contract": "contracts/RouterGateway.sol:RouterGateway",
        "label": "gateways",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_contract(IGateway)2753)"
      },
      {
        "astId": 943,
        "contract": "contracts/RouterGateway.sol:RouterGateway",
        "label": "balancerV3Vault",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IVault)2781"
      },
      {
        "astId": 946,
        "contract": "contracts/RouterGateway.sol:RouterGateway",
        "label": "balancerV2Vault",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IFlashLoanProvider)927"
      },
      {
        "astId": 948,
        "contract": "contracts/RouterGateway.sol:RouterGateway",
        "label": "flashLoanEnabled",
        "offset": 20,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFlashLoanProvider)927": {
        "encoding": "inplace",
        "label": "contract IFlashLoanProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IGateway)2753": {
        "encoding": "inplace",
        "label": "contract IGateway",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)2781": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_contract(IGateway)2753)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => contract IGateway)",
        "numberOfBytes": "32",
        "value": "t_contract(IGateway)2753"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}