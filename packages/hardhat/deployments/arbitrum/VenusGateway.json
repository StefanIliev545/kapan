{
  "address": "0x1ccee19016f9E6Aa1637698471Cf90759f6b3CaB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "checkMembership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllVenusMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "symbols",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "uint8[]",
          "name": "decimals",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAssetsIn",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBorrowBalanceCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCollateralStatus",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "isCollateral",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGateway.Collateral[]",
          "name": "collaterals",
          "type": "tuple[]"
        }
      ],
      "name": "getEncodedCollateralApprovals",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "target",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getEncodedDebtApproval",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "target",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEncodedDelegateApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "shouldApprove",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGateway.Collateral[]",
          "name": "collaterals",
          "type": "tuple[]"
        }
      ],
      "name": "getInboundCollateralActions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "target",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getLtv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vTokens",
          "type": "address[]"
        }
      ],
      "name": "getMarketRates",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "supplyRates",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "borrowRates",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPossibleCollaterals",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "collateralAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "symbols",
          "type": "string[]"
        },
        {
          "internalType": "uint8[]",
          "name": "decimals",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getSupplyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getSupportedCollaterals",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "collateralAddresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "borrowBalances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        }
      ],
      "name": "getVTokenForUnderlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "isCollateralSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract ResilientOracleInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptroller",
          "type": "address"
        }
      ],
      "name": "setComptroller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ccef19460287d002601d24efc0e03b666e4dcef9a6a71082ac703e1512e5d24",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x58d21499B5A3374a486B3F412Cca43b76692eF15",
    "contractAddress": null,
    "transactionIndex": 4,
    "gasUsed": "4302048",
    "logsBloom": "0x
    "blockHash": "0x69e1789a63aeecca1465cb0c114ab2a857a842507b14d3e6ebc8302fae321660",
    "transactionHash": "0x6ccef19460287d002601d24efc0e03b666e4dcef9a6a71082ac703e1512e5d24",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 317699463,
        "transactionHash": "0x6ccef19460287d002601d24efc0e03b666e4dcef9a6a71082ac703e1512e5d24",
        "address": "0x1ccee19016f9E6Aa1637698471Cf90759f6b3CaB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x69e1789a63aeecca1465cb0c114ab2a857a842507b14d3e6ebc8302fae321660"
      }
    ],
    "blockNumber": 317699463,
    "cumulativeGasUsed": "4423593",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x317c1A5739F39046E20b08ac9BeEa3f10fD43326",
    "0xd55A98150e0F9f5e3F6280FC25617A5C93d96007",
    "0xAB25FDc3A23514A5651F7b616500049E181F9523"
  ],
  "numDeployments": 1,
  "solcInputHash": "0687e9c7e7ec1d82659b24cd7ab47306",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"checkMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllVenusMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimals\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAssetsIn\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBorrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCollateralStatus\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"isCollateral\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGateway.Collateral[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"}],\"name\":\"getEncodedCollateralApprovals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"target\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEncodedDebtApproval\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"target\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEncodedDelegateApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"shouldApprove\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGateway.Collateral[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"}],\"name\":\"getInboundCollateralActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"target\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLtv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vTokens\",\"type\":\"address[]\"}],\"name\":\"getMarketRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"supplyRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowRates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPossibleCollaterals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"collateralAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimals\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getSupportedCollaterals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"collateralAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"getVTokenForUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"isCollateralSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ResilientOracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"}],\"name\":\"setComptroller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"borrow(address,address,uint256)\":{\"params\":{\"amount\":\"The amount to borrow\",\"token\":\"The underlying token to borrow\",\"user\":\"The account to borrow for\"}},\"checkMembership(address,address)\":{\"params\":{\"account\":\"The account to check\",\"vToken\":\"The vToken market to check\"},\"returns\":{\"_0\":\"True if the account has entered the market\"}},\"deposit(address,address,uint256)\":{\"params\":{\"amount\":\"The amount to supply\",\"token\":\"The underlying token to supply\",\"user\":\"The account to supply for\"}},\"getAccountLiquidity(address)\":{\"params\":{\"account\":\"The address to check\"},\"returns\":{\"_0\":\"error Error code (0=success, otherwise a failure)\",\"_1\":\"liquidity The USD value borrowable by the account\",\"_2\":\"shortfall The USD value of collateral needed to meet obligations\"}},\"getAllMarkets()\":{\"returns\":{\"_0\":\"A list of all vToken addresses\"}},\"getAllVenusMarkets()\":{\"details\":\"This function returns arrays of basic information about all Venus markets\",\"returns\":{\"decimals\":\"Array of token decimals\",\"names\":\"Array of token names\",\"symbols\":\"Array of token symbols\",\"tokens\":\"Array of underlying token addresses\",\"vTokens\":\"Array of vToken addresses\"}},\"getAssetsIn(address)\":{\"params\":{\"account\":\"The account to check\"},\"returns\":{\"_0\":\"A list of vToken addresses the account has entered\"}},\"getBalance(address,address)\":{\"params\":{\"token\":\"The underlying token\",\"user\":\"The account to check\"},\"returns\":{\"_0\":\"The user's supply balance\"}},\"getBorrowBalance(address,address)\":{\"params\":{\"token\":\"The underlying token\",\"user\":\"The account to check\"},\"returns\":{\"_0\":\"The user's borrow balance\"}},\"getBorrowRate(address)\":{\"params\":{\"token\":\"The underlying token\"},\"returns\":{\"_0\":\"The borrow rate and a boolean indicating success\"}},\"getCollateralStatus(address[],address)\":{\"params\":{\"account\":\"The user account to check\",\"vTokens\":\"Array of vToken addresses to check\"},\"returns\":{\"isCollateral\":\"Array of booleans indicating if token is used as collateral\"}},\"getEncodedCollateralApprovals(address,(address,uint256)[])\":{\"details\":\"For Venus, this involves approving token transfers to vToken contracts\",\"params\":{\"collaterals\":\"The collaterals to approve\",\"token\":\"The token to borrow (not used in this implementation)\"},\"returns\":{\"data\":\"Array of encoded function call data\",\"target\":\"Array of target contract addresses\"}},\"getEncodedDebtApproval(address,uint256,address)\":{\"details\":\"For Venus, this involves checking if delegate approval is needed and entering the market\",\"params\":{\"amount\":\"The amount to borrow (not used in this implementation)\",\"token\":\"The token to borrow\",\"user\":\"The user address to check for delegate approval\"},\"returns\":{\"data\":\"Array of encoded function call data\",\"target\":\"Array of target contract addresses\"}},\"getEncodedDelegateApproval()\":{\"returns\":{\"data\":\"The encoded call data for updateDelegate function\",\"shouldApprove\":\"Whether the user should approve the delegate\",\"target\":\"The comptroller address\"}},\"getInboundCollateralActions(address,(address,uint256)[])\":{\"details\":\"For Venus, users need to enter markets for each collateral they want to use\",\"params\":{\"collaterals\":\"The collaterals to use\",\"token\":\"The token to borrow\"},\"returns\":{\"data\":\"Array of encoded function call data\",\"target\":\"Array of target contract addresses\"}},\"getLtv(address,address)\":{\"details\":\"In Venus, the LTV is controlled by the Comptroller and is protocol-wide\",\"params\":{\"token\":\"The token to check LTV for\",\"user\":\"The user address\"},\"returns\":{\"_0\":\"ltv The loan-to-value ratio (percentage multiplied by 1e18)\"}},\"getMarketRates(address[])\":{\"params\":{\"vTokens\":\"Array of vToken addresses to query\"},\"returns\":{\"borrowRates\":\"Array of borrow rates per block\",\"prices\":\"Array of token prices (8 decimals precision)\",\"supplyRates\":\"Array of supply rates per block\"}},\"getPossibleCollaterals(address,address)\":{\"details\":\"In Venus, any supported market can potentially be collateral\",\"params\":{\"token\":\"The underlying token (not used in Venus implementation)\",\"user\":\"The user address to check balances for\"},\"returns\":{\"balances\":\"Array of user balances for each collateral\",\"collateralAddresses\":\"Array of possible collateral token addresses\",\"decimals\":\"Array of token decimals\",\"symbols\":\"Array of token symbols\"}},\"getSupplyRate(address)\":{\"params\":{\"token\":\"The underlying token\"},\"returns\":{\"_0\":\"The supply rate and a boolean indicating success\"}},\"getSupportedCollaterals(address)\":{\"details\":\"In Venus, all markets can be used as collateral for any other market\",\"params\":{\"market\":\"The market token address\"},\"returns\":{\"collateralAddresses\":\"Array of collateral token addresses supported for this market\"}},\"getUserBalances(address[],address)\":{\"params\":{\"account\":\"The user account to check balances for\",\"vTokens\":\"Array of vToken addresses to query\"},\"returns\":{\"balances\":\"Array of user supply balances (in underlying token)\",\"borrowBalances\":\"Array of user borrow balances\"}},\"getVTokenForUnderlying(address)\":{\"details\":\"Iterates through all markets to find the matching vToken\",\"params\":{\"underlyingToken\":\"The underlying token address\"},\"returns\":{\"_0\":\"The vToken address\"}},\"isCollateralSupported(address,address)\":{\"details\":\"In Venus, any market can be used as collateral for any other market\",\"params\":{\"collateral\":\"The collateral token address\",\"market\":\"The market token address\"},\"returns\":{\"isSupported\":\"True if the collateral is supported for the market\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"repay(address,address,uint256)\":{\"params\":{\"amount\":\"The amount to repay\",\"token\":\"The underlying token to repay\",\"user\":\"The account whose debt to repay\"}},\"setComptroller(address)\":{\"params\":{\"_comptroller\":\"The new comptroller address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(address,address,uint256)\":{\"notice\":\"Borrow tokens from the Venus protocol\"},\"checkMembership(address,address)\":{\"notice\":\"Check if an account has entered a specific market\"},\"deposit(address,address,uint256)\":{\"notice\":\"Supply assets to the Venus protocol (implements IGateway.deposit)\"},\"getAccountLiquidity(address)\":{\"notice\":\"Gets account liquidity information\"},\"getAllMarkets()\":{\"notice\":\"Get all available markets in Venus protocol\"},\"getAllVenusMarkets()\":{\"notice\":\"Get basic details for all Venus markets\"},\"getAssetsIn(address)\":{\"notice\":\"Get all markets a user has entered\"},\"getBalance(address,address)\":{\"notice\":\"Get the supply balance of a token for a user\"},\"getBorrowBalance(address,address)\":{\"notice\":\"Get the borrow balance of a token for a user\"},\"getBorrowRate(address)\":{\"notice\":\"Get the current borrow rate for a token\"},\"getCollateralStatus(address[],address)\":{\"notice\":\"Check which markets are being used as collateral by a user\"},\"getEncodedCollateralApprovals(address,(address,uint256)[])\":{\"notice\":\"Generate encoded call data for approving collateral usage\"},\"getEncodedDebtApproval(address,uint256,address)\":{\"notice\":\"Generate encoded call data for approving debt operations\"},\"getEncodedDelegateApproval()\":{\"notice\":\"Generate encoded call data for the user to approve this contract as a delegate for borrowing\"},\"getInboundCollateralActions(address,(address,uint256)[])\":{\"notice\":\"Get additional actions required for a token when providing collateral in Venus protocol\"},\"getLtv(address,address)\":{\"notice\":\"Get the loan-to-value ratio for a user's position with a specific token\"},\"getMarketRates(address[])\":{\"notice\":\"Get market rates and prices for Venus markets\"},\"getPossibleCollaterals(address,address)\":{\"notice\":\"Get possible collaterals for a borrowing position\"},\"getSupplyRate(address)\":{\"notice\":\"Get the current supply rate for a token\"},\"getSupportedCollaterals(address)\":{\"notice\":\"Get all supported collaterals for a market\"},\"getUserBalances(address[],address)\":{\"notice\":\"Get user balances for Venus markets\"},\"getVTokenForUnderlying(address)\":{\"notice\":\"Find the vToken for a given underlying token address\"},\"isCollateralSupported(address,address)\":{\"notice\":\"Check if a collateral is supported for a market\"},\"repay(address,address,uint256)\":{\"notice\":\"Repay borrowed tokens to the Venus protocol\"},\"setComptroller(address)\":{\"notice\":\"Updates the comptroller address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/gateways/VenusGateway.sol\":\"VenusGateway\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/gateways/ProtocolGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ProtocolGateway {\\n    // Immutable router address that can call protected functions\\n    address public immutable ROUTER;\\n\\n    /**\\n     * @notice Modifier to restrict function access to only the router contract\\n     */\\n    modifier onlyRouter() {\\n        require(msg.sender == ROUTER, \\\"Only router can call\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to restrict function access to router or user themselves\\n     * @param user The user the function is being called for\\n     */\\n    modifier onlyRouterOrSelf(address user) {\\n        require(msg.sender == ROUTER || msg.sender == user, \\\"Only router or self can call\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor to set the router address\\n     * @param router The address of the router contract that can call protected functions\\n     */\\n    constructor(address router) {\\n        require(router != address(0), \\\"Router address cannot be zero\\\");\\n        ROUTER = router;\\n    }\\n}\\n\",\"keccak256\":\"0x9333b1d549f1923a1d772cbb9f17d77c919741441a7227f9bbffc6336ada048b\",\"license\":\"MIT\"},\"contracts/gateways/VenusGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"../interfaces/IGateway.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./ProtocolGateway.sol\\\";\\n\\n// Import local interface definitions instead of Venus Protocol package\\nimport \\\"../interfaces/venus/ComptrollerInterface.sol\\\";\\nimport \\\"../interfaces/venus/VTokenInterface.sol\\\";\\nimport \\\"../interfaces/venus/ResilientOracleInterface.sol\\\";\\n\\ncontract VenusGateway is IGateway, ProtocolGateway, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    ComptrollerInterface public comptroller;\\n    ResilientOracleInterface public oracle;\\n\\n    constructor(address _comptroller, address _oracle, address router) \\n        ProtocolGateway(router)\\n        Ownable(msg.sender)\\n    {\\n        comptroller = ComptrollerInterface(_comptroller);\\n        oracle = ResilientOracleInterface(_oracle);\\n    }\\n    \\n    /**\\n     * @notice Updates the comptroller address\\n     * @param _comptroller The new comptroller address\\n     */\\n    function setComptroller(address _comptroller) external onlyOwner {\\n        comptroller = ComptrollerInterface(_comptroller);\\n    }\\n    \\n    /**\\n     * @notice Find the vToken for a given underlying token address\\n     * @dev Iterates through all markets to find the matching vToken\\n     * @param underlyingToken The underlying token address\\n     * @return The vToken address\\n     */\\n    function getVTokenForUnderlying(address underlyingToken) public view returns (address) {\\n        address[] memory vTokenAddresses = this.getAllMarkets();\\n        \\n        for (uint i = 0; i < vTokenAddresses.length; i++) {\\n            address vTokenAddress = vTokenAddresses[i];\\n            \\n            try VTokenInterface(vTokenAddress).underlying() returns (address underlying) {\\n                if (underlying == underlyingToken) {\\n                    return vTokenAddress;\\n                }\\n            } catch {\\n                // Skip if there's an error (e.g., for vBNB which might not have an underlying() function)\\n                continue;\\n            }\\n        }\\n        \\n        revert(\\\"VenusGateway: vToken not found for underlying token\\\");\\n    }\\n    \\n    /**\\n     * @notice Get all markets a user has entered\\n     * @param account The account to check\\n     * @return A list of vToken addresses the account has entered\\n     */\\n    function getAssetsIn(address account) external view returns (address[] memory) {\\n        VTokenInterface[] memory vTokens = comptroller.getAssetsIn(account);\\n        address[] memory vTokenAddresses = new address[](vTokens.length);\\n        \\n        for (uint i = 0; i < vTokens.length; i++) {\\n            vTokenAddresses[i] = address(vTokens[i]);\\n        }\\n        \\n        return vTokenAddresses;\\n    }\\n    \\n    /**\\n     * @notice Check if an account has entered a specific market\\n     * @param account The account to check\\n     * @param vToken The vToken market to check\\n     * @return True if the account has entered the market\\n     */\\n    function checkMembership(address account, address vToken) external view returns (bool) {\\n        return comptroller.checkMembership(account, vToken);\\n    }\\n    \\n    /**\\n     * @notice Get all available markets in Venus protocol\\n     * @return A list of all vToken addresses\\n     */\\n    function getAllMarkets() external view returns (address[] memory) {\\n        VTokenInterface[] memory vTokens = comptroller.getAllMarkets();\\n        address[] memory vTokenAddresses = new address[](vTokens.length);\\n        \\n        for (uint i = 0; i < vTokens.length; i++) {\\n            vTokenAddresses[i] = address(vTokens[i]);\\n        }\\n        \\n        return vTokenAddresses;\\n    }\\n    \\n    /**\\n     * @notice Gets account liquidity information\\n     * @param account The address to check\\n     * @return error Error code (0=success, otherwise a failure)\\n     * @return liquidity The USD value borrowable by the account\\n     * @return shortfall The USD value of collateral needed to meet obligations\\n     */\\n    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\\n        return comptroller.getAccountLiquidity(account);\\n    }\\n    \\n    /**\\n     * @notice Supply assets to the Venus protocol (implements IGateway.deposit)\\n     * @param token The underlying token to supply\\n     * @param user The account to supply for\\n     * @param amount The amount to supply\\n     */\\n    function deposit(address token, address user, uint256 amount) public override onlyRouter nonReentrant {\\n        address vTokenAddress = getVTokenForUnderlying(token);\\n        \\n        // Transfer tokens from the user to this contract\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        // Approve vToken contract to take the tokens\\n        IERC20(token).approve(vTokenAddress, amount);\\n        \\n        // Mint vTokens (supply to Venus) on behalf of the user\\n        uint result = VTokenInterface(vTokenAddress).mint(amount);\\n        require(result == 0, \\\"VenusGateway: deposit failed\\\");\\n        \\n        // Transfer vTokens to the user\\n        uint vTokenBalance = VTokenInterface(vTokenAddress).balanceOf(address(this));\\n        require(vTokenBalance > 0, \\\"VenusGateway: no vTokens minted\\\");\\n        \\n        VTokenInterface(vTokenAddress).transfer(user, vTokenBalance);\\n    }\\n    \\n    /**\\n     * @notice Borrow tokens from the Venus protocol\\n     * @param token The underlying token to borrow\\n     * @param user The account to borrow for\\n     * @param amount The amount to borrow\\n     */\\n    function borrow(address token, address user, uint256 amount) external override onlyRouterOrSelf(user) nonReentrant {\\n        address vTokenAddress = getVTokenForUnderlying(token);\\n        \\n        // User must have entered the market already to borrow\\n        // The borrowed tokens will go directly to the user\\n        uint result = VTokenInterface(vTokenAddress).borrowBehalf(user, amount);\\n        require(result == 0, \\\"VenusGateway: borrow failed\\\");\\n        \\n        // Transfer borrowed tokens to the user\\n        IERC20(token).safeTransfer(msg.sender, amount);\\n    }\\n    \\n    /**\\n     * @notice Repay borrowed tokens to the Venus protocol\\n     * @param token The underlying token to repay\\n     * @param user The account whose debt to repay\\n     * @param amount The amount to repay\\n     */\\n    function repay(address token, address user, uint256 amount) external override onlyRouter nonReentrant {\\n        address vTokenAddress = getVTokenForUnderlying(token);\\n        \\n        // Transfer tokens from msg.sender to this contract\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        // Approve vToken contract to take the tokens\\n        IERC20(token).approve(vTokenAddress, amount);\\n        \\n        // Repay borrow on behalf of the user\\n        uint result = VTokenInterface(vTokenAddress).repayBorrowBehalf(user, amount);\\n        require(result == 0, \\\"VenusGateway: repay failed\\\");\\n    }\\n    \\n    /**\\n     * @notice Get the supply balance of a token for a user\\n     * @param token The underlying token\\n     * @param user The account to check\\n     * @return The user's supply balance\\n     */\\n    function getBalance(address token, address user) external view override returns (uint256) {\\n        address vTokenAddress = getVTokenForUnderlying(token);\\n        \\n        // Get vToken balance\\n        uint vTokenBalance = VTokenInterface(vTokenAddress).balanceOf(user);\\n        \\n        // Convert to underlying amount using exchange rate\\n        uint exchangeRate = VTokenInterface(vTokenAddress).exchangeRateStored();\\n        \\n        // Calculate underlying value (simplified)\\n        // In production, be careful about precision\\n        return (vTokenBalance * exchangeRate) / 1e18;\\n    }\\n    \\n    /**\\n     * @notice Get the borrow balance of a token for a user\\n     * @param token The underlying token\\n     * @param user The account to check\\n     * @return The user's borrow balance\\n     */\\n    function getBorrowBalance(address token, address user) external view override returns (uint256) {\\n        address vTokenAddress = getVTokenForUnderlying(token);\\n        return VTokenInterface(vTokenAddress).borrowBalanceStored(user);\\n    }\\n\\n    function getBorrowBalanceCurrent(address token, address user) external override returns (uint256) {\\n        address vTokenAddress = getVTokenForUnderlying(token);\\n        return VTokenInterface(vTokenAddress).borrowBalanceCurrent(user);\\n    }\\n    \\n    /**\\n     * @notice Get the current borrow rate for a token\\n     * @param token The underlying token\\n     * @return The borrow rate and a boolean indicating success\\n     */\\n    function getBorrowRate(address token) external view override returns (uint256, bool) {\\n        address vTokenAddress = getVTokenForUnderlying(token);\\n        uint borrowRate = VTokenInterface(vTokenAddress).borrowRatePerBlock();\\n        return (borrowRate, true);\\n    }\\n    \\n    /**\\n     * @notice Get the current supply rate for a token\\n     * @param token The underlying token\\n     * @return The supply rate and a boolean indicating success\\n     */\\n    function getSupplyRate(address token) external view override returns (uint256, bool) {\\n        address vTokenAddress = getVTokenForUnderlying(token);\\n        uint supplyRate = VTokenInterface(vTokenAddress).supplyRatePerBlock();\\n        return (supplyRate, true);\\n    }\\n    \\n    /**\\n     * @notice Generate encoded call data for the user to approve this contract as a delegate for borrowing\\n     * @return shouldApprove Whether the user should approve the delegate\\n     * @return target The comptroller address\\n     * @return data The encoded call data for updateDelegate function\\n     */\\n    function getEncodedDelegateApproval() external view returns (bool shouldApprove, address target, bytes memory data) {\\n        // Encode the updateDelegate function call to approve this contract\\n       /* if (comptroller.approvedDelegates(address(this))) {\\n            return (false, address(0x0), bytes(\\\"\\\"));\\n        }*/\\n\\n        target = address(comptroller);\\n        data = abi.encodeWithSelector(\\n            comptroller.updateDelegate.selector,\\n            address(this),  // delegate address (this gateway)\\n            true            // allowBorrows = true\\n        );\\n        \\n        return (true, target, data);\\n    }\\n    \\n    /**\\n     * @notice Get basic details for all Venus markets\\n     * @dev This function returns arrays of basic information about all Venus markets\\n     * @return vTokens Array of vToken addresses\\n     * @return tokens Array of underlying token addresses\\n     * @return symbols Array of token symbols\\n     * @return names Array of token names\\n     * @return decimals Array of token decimals\\n     */\\n    function getAllVenusMarkets() external view returns (\\n        address[] memory vTokens,\\n        address[] memory tokens,\\n        string[] memory symbols,\\n        string[] memory names,\\n        uint8[] memory decimals,\\n        uint256[] memory prices\\n    ) {\\n        // Get all markets from the comptroller\\n        vTokens = this.getAllMarkets();\\n        uint256 marketsCount = vTokens.length;\\n        \\n        // Initialize arrays\\n        tokens = new address[](marketsCount);\\n        symbols = new string[](marketsCount);\\n        names = new string[](marketsCount);\\n        decimals = new uint8[](marketsCount);\\n        prices = new uint256[](marketsCount);\\n        // Populate arrays with basic token information\\n        for (uint i = 0; i < marketsCount; i++) {\\n            address vTokenAddress = vTokens[i];\\n            VTokenInterface vToken = VTokenInterface(vTokenAddress);\\n            \\n            // Get underlying token address directly\\n            try vToken.underlying() returns (address underlyingToken) {\\n                tokens[i] = underlyingToken;\\n                \\n                // Get token metadata\\n                IERC20Metadata underlying = IERC20Metadata(underlyingToken);\\n                \\n                // Try to get symbol from underlying, fallback to vToken\\n                try underlying.symbol() returns (string memory s) {\\n                    symbols[i] = s;\\n                } catch {\\n                    symbols[i] = vToken.symbol();\\n                }\\n                \\n                // Try to get name from underlying, fallback to vToken\\n                try underlying.name() returns (string memory n) {\\n                    names[i] = n;\\n                } catch {\\n                    names[i] = vToken.name();\\n                }\\n                \\n                // Try to get decimals from underlying, fallback to vToken\\n                try underlying.decimals() returns (uint8 d) {\\n                    decimals[i] = d;\\n                } catch {\\n                    decimals[i] = vToken.decimals();\\n                }\\n            } catch {\\n                // For tokens like vBNB that might not have an underlying() function\\n                tokens[i] = address(0);\\n                symbols[i] = vToken.symbol();\\n                names[i] = vToken.name();\\n                decimals[i] = vToken.decimals();\\n            }\\n            prices[i] = oracle.getUnderlyingPrice(vTokenAddress);\\n        }\\n        \\n        return (vTokens, tokens, symbols, names, decimals, prices);\\n    }\\n    \\n    /**\\n     * @notice Get market rates and prices for Venus markets\\n     * @param vTokens Array of vToken addresses to query\\n     * @return prices Array of token prices (8 decimals precision)\\n     * @return supplyRates Array of supply rates per block\\n     * @return borrowRates Array of borrow rates per block\\n     */\\n    function getMarketRates(address[] calldata vTokens) external view returns (\\n        uint256[] memory prices,\\n        uint256[] memory supplyRates,\\n        uint256[] memory borrowRates\\n    ) {\\n        uint256 marketsCount = vTokens.length;\\n        \\n        // Initialize arrays\\n        prices = new uint256[](marketsCount);\\n        supplyRates = new uint256[](marketsCount);\\n        borrowRates = new uint256[](marketsCount);\\n        \\n        // Populate arrays with rate information\\n        for (uint i = 0; i < marketsCount; i++) {\\n            address vTokenAddress = vTokens[i];\\n            VTokenInterface vToken = VTokenInterface(vTokenAddress);\\n            \\n            // Get rates\\n            supplyRates[i] = vToken.supplyRatePerBlock();\\n            borrowRates[i] = vToken.borrowRatePerBlock();\\n            prices[i] = oracle.getUnderlyingPrice(vTokenAddress);\\n        }\\n        \\n        return (prices, supplyRates, borrowRates);\\n    }\\n    \\n    /**\\n     * @notice Get user balances for Venus markets\\n     * @param vTokens Array of vToken addresses to query\\n     * @param account The user account to check balances for\\n     * @return balances Array of user supply balances (in underlying token)\\n     * @return borrowBalances Array of user borrow balances\\n     */\\n    function getUserBalances(address[] calldata vTokens, address account) external view returns (\\n        uint256[] memory balances,\\n        uint256[] memory borrowBalances\\n    ) {\\n        require(account != address(0), \\\"VenusGateway: zero address not allowed\\\");\\n        \\n        uint256 marketsCount = vTokens.length;\\n        \\n        // Initialize arrays\\n        balances = new uint256[](marketsCount);\\n        borrowBalances = new uint256[](marketsCount);\\n        \\n        // Populate arrays with user balance information\\n        for (uint i = 0; i < marketsCount; i++) {\\n            address vTokenAddress = vTokens[i];\\n            VTokenInterface vToken = VTokenInterface(vTokenAddress);\\n            \\n            // Get user balances\\n            try vToken.balanceOf(account) returns (uint256 b) {\\n                // Convert vToken balance to underlying using exchange rate\\n                uint256 exchangeRate = vToken.exchangeRateStored();\\n                balances[i] = (b * exchangeRate) / 1e18;\\n            } catch {\\n                balances[i] = 0;\\n            }\\n            \\n            try vToken.borrowBalanceStored(account) returns (uint256 bb) {\\n                borrowBalances[i] = bb;\\n            } catch {\\n                borrowBalances[i] = 0;\\n            }\\n        }\\n        \\n        return (balances, borrowBalances);\\n    }\\n    \\n    /**\\n     * @notice Check which markets are being used as collateral by a user\\n     * @param vTokens Array of vToken addresses to check\\n     * @param account The user account to check\\n     * @return isCollateral Array of booleans indicating if token is used as collateral\\n     */\\n    function getCollateralStatus(address[] calldata vTokens, address account) external view returns (\\n        bool[] memory isCollateral\\n    ) {\\n        require(account != address(0), \\\"VenusGateway: zero address not allowed\\\");\\n        \\n        uint256 marketsCount = vTokens.length;\\n        isCollateral = new bool[](marketsCount);\\n        \\n        // Get the list of markets the user has entered (used as collateral)\\n        address[] memory enteredMarkets = this.getAssetsIn(account);\\n        \\n        // Check each market if it's being used as collateral\\n        for (uint i = 0; i < marketsCount; i++) {\\n            address vTokenAddress = vTokens[i];\\n            \\n            // Linear search through entered markets\\n            for (uint j = 0; j < enteredMarkets.length; j++) {\\n                if (enteredMarkets[j] == vTokenAddress) {\\n                    isCollateral[i] = true;\\n                    break;\\n                }\\n            }\\n        }\\n        \\n        return isCollateral;\\n    }\\n    \\n    /**\\n     * @notice Get possible collaterals for a borrowing position\\n     * @dev In Venus, any supported market can potentially be collateral\\n     * @param token The underlying token (not used in Venus implementation)\\n     * @param user The user address to check balances for\\n     * @return collateralAddresses Array of possible collateral token addresses\\n     * @return balances Array of user balances for each collateral\\n     * @return symbols Array of token symbols\\n     * @return decimals Array of token decimals\\n     */\\n    function getPossibleCollaterals(address token, address user) external view override returns (\\n        address[] memory collateralAddresses,\\n        uint256[] memory balances,\\n        string[] memory symbols,\\n        uint8[] memory decimals\\n    ) {\\n        // Get all Venus markets information\\n        (\\n            address[] memory vTokens, \\n            address[] memory tokens, \\n            string[] memory tokenSymbols, \\n            string[] memory names, \\n            uint8[] memory tokenDecimals,\\n            uint256[] memory prices\\n        ) = this.getAllVenusMarkets();\\n        \\n        // Create arrays for return values\\n        collateralAddresses = new address[](tokens.length);\\n        symbols = new string[](tokens.length);\\n        decimals = new uint8[](tokens.length);\\n        balances = new uint256[](tokens.length); // Initialize with all zeros by default\\n        \\n        // If user address is provided and not zero, get their balances\\n        if (user != address(0)) {\\n            // Get user balances for all markets\\n            (uint256[] memory userBalances, ) = this.getUserBalances(vTokens, user);\\n            balances = userBalances;\\n        }\\n        \\n        // Copy token information to return arrays\\n        for (uint i = 0; i < tokens.length; i++) {\\n            collateralAddresses[i] = tokens[i];\\n            symbols[i] = tokenSymbols[i];\\n            decimals[i] = tokenDecimals[i];\\n        }\\n        \\n        return (collateralAddresses, balances, symbols, decimals);\\n    }\\n    \\n    /**\\n     * @notice Check if a collateral is supported for a market\\n     * @dev In Venus, any market can be used as collateral for any other market\\n     * @param market The market token address\\n     * @param collateral The collateral token address\\n     * @return isSupported True if the collateral is supported for the market\\n     */\\n    function isCollateralSupported(address market, address collateral) external view override returns (bool isSupported) {\\n        // Get all Venus markets information\\n        (\\n            ,  // vTokens (not needed)\\n            address[] memory tokens, \\n            , // symbols (not needed)\\n            , // names (not needed)\\n            , // decimals (not needed)\\n              // prices (not needed)\\n        ) = this.getAllVenusMarkets();\\n        \\n        // First check that both market and collateral are valid tokens in Venus\\n        bool marketFound = false;\\n        bool collateralFound = false;\\n        \\n        for (uint i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == market) {\\n                marketFound = true;\\n            }\\n            if (tokens[i] == collateral) {\\n                collateralFound = true;\\n            }\\n            \\n            // Early exit if both are found\\n            if (marketFound && collateralFound) {\\n                break;\\n            }\\n        }\\n        \\n        // In Venus, any valid token can be collateral for any other valid token\\n        return marketFound && collateralFound;\\n    }\\n    \\n    /**\\n     * @notice Get all supported collaterals for a market\\n     * @dev In Venus, all markets can be used as collateral for any other market\\n     * @param market The market token address\\n     * @return collateralAddresses Array of collateral token addresses supported for this market\\n     */\\n    function getSupportedCollaterals(address market) external view override returns (address[] memory collateralAddresses) {\\n        // Get all Venus markets information\\n        (\\n            ,  // vTokens (not needed)\\n            address[] memory tokens, \\n            ,  // symbols (not needed)\\n            ,  // names (not needed)\\n            ,// decimals (not needed)\\n            // prices (not needed)\\n        ) = this.getAllVenusMarkets();\\n        \\n        // Check if market is a valid token in Venus\\n        bool marketFound = false;\\n        for (uint i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == market) {\\n                marketFound = true;\\n                break;\\n            }\\n        }\\n        \\n        // If market is not found, return empty array\\n        if (!marketFound) {\\n            return new address[](0);\\n        }\\n        \\n        // In Venus, all tokens can be collateral for any other token\\n        // So we return all tokens except the market itself\\n        collateralAddresses = new address[](tokens.length - 1);\\n        \\n        uint index = 0;\\n        for (uint i = 0; i < tokens.length; i++) {\\n            // Skip the market token itself\\n            if (tokens[i] != market) {\\n                collateralAddresses[index] = tokens[i];\\n                index++;\\n            }\\n        }\\n        \\n        return collateralAddresses;\\n    }\\n    \\n    /**\\n     * @notice Get the loan-to-value ratio for a user's position with a specific token\\n     * @dev In Venus, the LTV is controlled by the Comptroller and is protocol-wide\\n     * @param token The token to check LTV for\\n     * @param user The user address\\n     * @return ltv The loan-to-value ratio (percentage multiplied by 1e18)\\n     */\\n    function getLtv(address token, address user) external view override returns (uint256) {\\n        // For Venus, LTV is typically around 50-75% depending on the asset\\n        // We would ideally get this from the Comptroller's collateralFactors for the specific vToken\\n        \\n        // Get the vToken address for this token\\n        address vTokenAddress;\\n        try this.getVTokenForUnderlying(token) returns (address vToken) {\\n            vTokenAddress = vToken;\\n        } catch {\\n            // If token is not found in Venus, return 0 LTV\\n            return 0;\\n        }\\n        \\n        // In a real implementation, we would get the collateral factor from Comptroller:\\n        // (, uint collateralFactorMantissa) = comptroller.markets(vTokenAddress);\\n        \\n        // For simplicity, we'll return a default LTV of 75% (expressed as 0.75 * 1e18)\\n        // In a production environment, this should be replaced with the actual collateral factor\\n        return 75 * 1e16; // 75% * 1e18 = 75 * 1e16\\n    }\\n    \\n    // Other IGateway methods follow with similar implementation patterns\\n    // The implementation would depend on the specific IGateway interface requirements\\n    // and would leverage the Venus Protocol's functionality\\n\\n    // Placeholder implementations for the remaining IGateway interface methods\\n    function depositCollateral(address market, address collateral, uint256 amount, address receiver) external override onlyRouter {\\n        deposit(collateral, receiver, amount);\\n    }\\n    \\n    function withdrawCollateral(\\n        address market,\\n        address collateral,\\n        address user,\\n        uint256 underlyingAmount // now amount is specified in underlying units\\n    ) external override onlyRouterOrSelf(user) nonReentrant returns (address, uint256) {\\n        address vTokenAddress = this.getVTokenForUnderlying(collateral);\\n        VTokenInterface vToken = VTokenInterface(vTokenAddress);\\n        address underlying = vToken.underlying();\\n        uint256 exchangeRate = vToken.exchangeRateCurrent();\\n\\n        // Calculate the required amount of vTokens to redeem the desired underlying amount.\\n        // rounds up.\\n        uint256 requiredVTokenAmount = (underlyingAmount * 1e18 + exchangeRate - 1) / exchangeRate;\\n\\n\\n        // Transfer the vTokens from the user to this contract.\\n        vToken.transferFrom(user, address(this), requiredVTokenAmount);\\n        // Redeem the required vTokens to get the underlying tokens.\\n        vToken.redeem(requiredVTokenAmount);\\n        IERC20(underlying).safeTransfer(msg.sender, underlyingAmount);\\n        return (underlying, underlyingAmount);\\n    }\\n\\n    \\n    /**\\n     * @notice Generate encoded call data for approving collateral usage\\n     * @dev For Venus, this involves approving token transfers to vToken contracts\\n     * @param token The token to borrow (not used in this implementation)\\n     * @param collaterals The collaterals to approve\\n     * @return target Array of target contract addresses\\n     * @return data Array of encoded function call data\\n     */\\n    function getEncodedCollateralApprovals(address token, Collateral[] calldata collaterals) external view override returns (address[] memory target, bytes[] memory data) {\\n        // In Venus, to use collateral, users need to approve the token transfer to vToken contracts\\n        \\n        // Create arrays for the target addresses and calldata\\n        target = new address[](collaterals.length);\\n        data = new bytes[](collaterals.length);\\n        \\n        for (uint i = 0; i < collaterals.length; i++) {\\n            // Get vToken address for this collateral\\n            address vTokenAddress;\\n            try this.getVTokenForUnderlying(collaterals[i].token) returns (address vToken) {\\n                vTokenAddress = vToken;\\n            } catch {\\n                // Skip if token is not found in Venus\\n                continue;\\n            }\\n            \\n            // Target is the underlying token\\n            target[i] = vTokenAddress;\\n            \\n            // Encode the approve function call - approve the vToken contract to spend the tokens\\n            // Use type(uint256).max for unlimited approval\\n            data[i] = abi.encodeWithSelector(\\n                IERC20.approve.selector,\\n                address(this),\\n                type(uint256).max\\n            );\\n        }\\n        \\n        return (target, data);\\n    }\\n    \\n    /**\\n     * @notice Generate encoded call data for approving debt operations\\n     * @dev For Venus, this involves checking if delegate approval is needed and entering the market\\n     * @param token The token to borrow\\n     * @param amount The amount to borrow (not used in this implementation)\\n     * @param user The user address to check for delegate approval\\n     * @return target Array of target contract addresses\\n     * @return data Array of encoded function call data\\n     */\\n    function getEncodedDebtApproval(address token, uint256 amount, address user) external view override returns (address[] memory target, bytes[] memory data) {\\n        // In Venus, to borrow a token, the user needs to approve this contract as a delegate borrower\\n        \\n        // Get the vToken address for this token\\n        try this.getVTokenForUnderlying(token) returns (address vToken) {\\n            // First check if the user has already approved this gateway\\n            bool isAlreadyApproved = false;\\n            try comptroller.approvedDelegates(user, address(this)) returns (bool approved) {\\n                isAlreadyApproved = approved;\\n            } catch {\\n                // If call fails, assume not approved (continue with normal flow)\\n            }\\n            \\n            // If already approved, return empty arrays\\n            if (isAlreadyApproved) {\\n                return (new address[](0), new bytes[](0));\\n            }\\n            \\n            // Otherwise, get the encoded delegate approval data\\n            target = new address[](1);\\n            data = new bytes[](1);\\n            target[0] = address(comptroller);\\n            data[0] = abi.encodeWithSelector(\\n                comptroller.updateDelegate.selector,\\n                address(this),  // delegate address (this gateway)\\n                true            // allowBorrows = true\\n            );\\n        } catch {\\n            // If token is not found in Venus, return empty approvals\\n            return (new address[](0), new bytes[](0));\\n        }\\n\\n        return (target, data);\\n    }\\n\\n    /**\\n     * @notice Get additional actions required for a token when providing collateral in Venus protocol\\n     * @dev For Venus, users need to enter markets for each collateral they want to use\\n     * @param token The token to borrow\\n     * @param collaterals The collaterals to use\\n     * @return target Array of target contract addresses\\n     * @return data Array of encoded function call data\\n     */\\n    function getInboundCollateralActions(address token, Collateral[] calldata collaterals) external view override returns (address[] memory target, bytes[] memory data) {\\n        // In Venus, users need to enter markets for each collateral they want to use\\n        // We'll create an enterMarkets call for the comptroller\\n        \\n        // We need one target (the comptroller) and one data (enterMarkets call)\\n        target = new address[](1);\\n        data = new bytes[](1);\\n        \\n        // The target is the comptroller\\n        target[0] = address(comptroller);\\n        \\n        // Get vToken addresses for each collateral\\n        address[] memory vTokens = new address[](collaterals.length);\\n        uint validCount = 0;\\n        \\n        for (uint i = 0; i < collaterals.length; i++) {\\n            try this.getVTokenForUnderlying(collaterals[i].token) returns (address vToken) {\\n                vTokens[validCount++] = vToken;\\n            } catch {\\n                // Skip if token is not found in Venus\\n                continue;\\n            }\\n        }\\n        \\n        // If we couldn't find any valid vTokens, return empty arrays\\n        if (validCount == 0) {\\n            return (new address[](0), new bytes[](0));\\n        }\\n        \\n        // If not all collaterals had valid vTokens, resize the array\\n        if (validCount < collaterals.length) {\\n            address[] memory validVTokens = new address[](validCount);\\n            for (uint i = 0; i < validCount; i++) {\\n                validVTokens[i] = vTokens[i];\\n            }\\n            vTokens = validVTokens;\\n        }\\n        \\n        // Encode the enterMarkets function call\\n        data[0] = abi.encodeWithSelector(\\n            comptroller.enterMarkets.selector,\\n            vTokens\\n        );\\n        \\n        return (target, data);\\n    }\\n}\",\"keccak256\":\"0x1e3f0b7bf02324222ed3fc02c19df45c3c3b5d890f95266117084e8b6963646a\",\"license\":\"MIT\"},\"contracts/interfaces/IGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IGateway {\\n    function deposit(address token, address user, uint256 amount) external;\\n    \\n    /**\\n     * @notice Borrow tokens from the protocol\\n     * @dev Can be called by Router or directly by the user\\n     * @param token The token to borrow\\n     * @param user The user to borrow for\\n     * @param amount The amount to borrow\\n     */\\n    function borrow(address token, address user, uint256 amount) external;\\n    function repay(address token, address user, uint256 amount) external;\\n\\n    function depositCollateral(address market, address collateral, uint256 amount, address receiver) external;\\n    function withdrawCollateral(address market, address collateral, address user, uint256 amount) external returns (address, uint256);\\n    \\n\\n    function getBalance(address token, address user) external view returns (uint256);\\n    function getBorrowBalance(address token, address user) external view returns (uint256);\\n    function getBorrowBalanceCurrent(address token, address user) external returns (uint256);\\n    function getBorrowRate(address token) external view returns (uint256, bool);\\n    function getSupplyRate(address token) external view returns (uint256, bool);\\n    function getLtv(address token, address user) external view returns (uint256);\\n    function getPossibleCollaterals(address token, address user) external view returns (\\n        address[] memory collateralAddresses,\\n        uint256[] memory balances,\\n        string[] memory symbols,\\n        uint8[] memory decimals\\n    );\\n\\n    /**\\n     * @notice Check if a collateral token is supported for a specific market in this protocol\\n     * @param market The address of the market token\\n     * @param collateral The address of the collateral token to check\\n     * @return isSupported Whether the collateral is supported in the market\\n     */\\n    function isCollateralSupported(address market, address collateral) external view returns (bool isSupported);\\n\\n    /**\\n     * @notice Get all supported collaterals for a specific market in this protocol\\n     * @param market The address of the market token\\n     * @return collateralAddresses Array of supported collateral token addresses\\n     */\\n    function getSupportedCollaterals(address market) external view returns (address[] memory collateralAddresses);\\n\\n    struct Collateral {\\n        address token;\\n        uint256 amount;\\n    }    \\n    function getEncodedCollateralApprovals(address token, Collateral[] calldata collaterals) external view returns (address[] memory target, bytes[] memory data);\\n    function getEncodedDebtApproval(address token, uint256 amount, address user) external view returns (address[] memory target, bytes[] memory data);\\n    \\n    /**\\n     * @notice Get additional actions required for a token when providing collateral\\n     * @param token The token to borrow\\n     * @param collaterals The collaterals to use\\n     * @return target Array of target contract addresses\\n     * @return data Array of encoded function call data\\n     */\\n    function getInboundCollateralActions(address token, Collateral[] calldata collaterals) external view returns (address[] memory target, bytes[] memory data);\\n}\",\"keccak256\":\"0x04c9b3de15aa1177e71bdafe6700ca9e2d997a032da6218c20b6859c66334c27\",\"license\":\"MIT\"},\"contracts/interfaces/venus/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./VTokenInterface.sol\\\";\\n\\n/**\\n * @title Venus's Comptroller Interface\\n * @notice Interface for interacting with Venus Comptroller\\n * @dev Adapted for compatibility with Solidity ^0.8.10 from Venus v4 documentation\\n * @dev Source: https://docs-v4.venus.io/technical-reference/reference-core-pool/comptroller/diamond/facets/market-facet\\n */\\ninterface ComptrollerInterface {\\n    /**\\n     * @notice Indicator that this is a Comptroller contract (for inspection)\\n     */\\n    function isComptroller() external pure returns (bool);\\n    \\n    /**\\n     * @notice Enters a list of markets (vTokens)\\n     * @param vTokens The list of addresses of the vToken markets to enter\\n     * @return success A list of error codes (0=success, otherwise a failure)\\n     */\\n    function enterMarkets(address[] calldata vTokens) external returns (uint[] memory);\\n    \\n    /**\\n     * @notice Exits a vToken market\\n     * @param vTokenAddress Address of the vToken market to exit\\n     * @return success 0=success, otherwise a failure\\n     */\\n    function exitMarket(address vTokenAddress) external returns (uint);\\n    \\n    /**\\n     * @notice Returns the list of vToken markets an account has entered\\n     * @param account The address of the account to query\\n     * @return The list of vToken markets the account has entered\\n     */\\n    function getAssetsIn(address account) external view returns (VTokenInterface[] memory);\\n    \\n    /**\\n     * @notice Checks if an account is entered into a specific market\\n     * @param account The address of the account to check\\n     * @param vToken The vToken market to check\\n     * @return True if the account is in the market, otherwise false\\n     */\\n    function checkMembership(address account, address vToken) external view returns (bool);\\n    \\n    /**\\n     * @notice Returns a list of all vToken markets\\n     * @return A list of all vToken market addresses\\n     */\\n    function getAllMarkets() external view returns (VTokenInterface[] memory);\\n    \\n    /**\\n     * @notice Determine the amount of vToken that could be seized in a liquidation\\n     * @param vTokenBorrowed The borrowed vToken\\n     * @param vTokenCollateral The collateral vToken\\n     * @param actualRepayAmount The amount of vTokenBorrowed underlying to repay\\n     * @return errorCode 0=success, otherwise a failure\\n     * @return seizeTokens The number of vTokenCollateral tokens to seize\\n     */\\n    function liquidateCalculateSeizeTokens(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint actualRepayAmount\\n    ) external view returns (uint, uint);\\n    \\n    /**\\n     * @notice Calculate amount of tokens to seize in a VAI liquidation\\n     * @param vTokenCollateral The collateral vToken\\n     * @param actualRepayAmount The amount of VAI to repay\\n     * @return errorCode 0=success, otherwise a failure\\n     * @return seizeTokens The number of vTokenCollateral tokens to seize\\n     */\\n    function liquidateVAICalculateSeizeTokens(address vTokenCollateral, uint actualRepayAmount) external view returns (uint, uint);\\n    \\n    /**\\n     * @notice Update delegate status to allow/disallow borrowing on behalf\\n     * @param delegate The delegate address\\n     * @param allowBorrows Whether to allow the delegate to borrow\\n     */\\n    function updateDelegate(address delegate, bool allowBorrows) external;\\n    \\n    function approvedDelegates(address user, address delegate) external view returns (bool);\\n    \\n    /**\\n     * @notice Return information about a specific market\\n     * @param vToken The vToken address to get market data for\\n     * @return isListed Whether the market is listed\\n     * @return collateralFactorMantissa The collateral factor for the market\\n     * @return isComped Whether the market is included in XVS distribution\\n     */\\n    function markets(address vToken) external view returns (bool isListed, uint collateralFactorMantissa, bool isComped);\\n    \\n    /**\\n     * @notice Get the account liquidity information\\n     * @param account The address of the account\\n     * @return error Error code (0=success, otherwise a failure)\\n     * @return liquidity The USD value borrowable by the account\\n     * @return shortfall The USD value of collateral needed to meet obligations\\n     */\\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\\n    \\n    /**\\n     * @notice Check if a specific action is allowed\\n     * @param vToken The vToken market to check\\n     * @param action The action to check (mint=1, redeem=2, borrow=3, repay=4, etc.)\\n     * @return True if the action is allowed\\n     */\\n    function actionAllowed(address vToken, uint8 action) external view returns (bool);\\n    \\n    /**\\n     * @notice Checks if a borrow is allowed\\n     * @param vToken The vToken market to check\\n     * @param borrower The account borrowing\\n     * @param borrowAmount The amount of underlying to borrow\\n     * @return 0=success, otherwise a failure\\n     */\\n    function borrowAllowed(address vToken, address borrower, uint borrowAmount) external returns (uint);\\n    \\n    /**\\n     * @notice Checks if a mint is allowed\\n     * @param vToken The vToken market to check\\n     * @param minter The account minting\\n     * @param mintAmount The amount of underlying to mint\\n     * @return 0=success, otherwise a failure\\n     */\\n    function mintAllowed(address vToken, address minter, uint mintAmount) external returns (uint);\\n    \\n    /**\\n     * @notice Checks if a redeem is allowed\\n     * @param vToken The vToken market to check\\n     * @param redeemer The account redeeming\\n     * @param redeemTokens The amount of vTokens to redeem\\n     * @return 0=success, otherwise a failure\\n     */\\n    function redeemAllowed(address vToken, address redeemer, uint redeemTokens) external returns (uint);\\n    \\n    /**\\n     * @notice Checks if a repay is allowed\\n     * @param vToken The vToken market to check\\n     * @param payer The account paying\\n     * @param borrower The account having their loan repaid\\n     * @param repayAmount The amount of underlying to repay\\n     * @return 0=success, otherwise a failure\\n     */\\n    function repayBorrowAllowed(address vToken, address payer, address borrower, uint repayAmount) external returns (uint);\\n\\n    /**\\n     * @notice Returns the price oracle used by the comptroller\\n     * @return The address of the oracle\\n     */\\n    function oracle() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc823ce998d744f2c70ed6aaf75fc708b4ba0fb981299fa01ab653f7e9e4f809e\",\"license\":\"MIT\"},\"contracts/interfaces/venus/ResilientOracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ninterface OracleInterface {\\n    function getPrice(address asset) external view returns (uint256);\\n}\\n\\ninterface ResilientOracleInterface is OracleInterface {\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\",\"keccak256\":\"0x3066680deb62e100d1492fdee35d47c4ceb964c81bbf19afa31e1b9eb67e2b16\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/venus/VTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Venus's VToken Interface\\n * @notice Interface for interacting with Venus VTokens\\n * @dev Adapted for compatibility with Solidity ^0.8.10 from Venus documentation\\n */\\ninterface VTokenInterface {\\n    /*** Market Events ***/\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address vTokenCollateral, uint seizeTokens);\\n    \\n    /*** VToken State ***/\\n    function underlying() external view returns (address);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function totalBorrows() external view returns (uint);\\n    function totalReserves() external view returns (uint);\\n    function exchangeRateStored() external view returns (uint);\\n    function accrualBlockNumber() external view returns (uint);\\n    function comptroller() external view returns (address);\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function reserveFactorMantissa() external view returns (uint);\\n    function getCash() external view returns (uint);\\n    function borrowIndex() external view returns (uint);\\n    \\n    /*** User Account Functions ***/\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    \\n    /*** VToken Market Functions ***/\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function borrowBehalf(address borrower, uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    \\n    /*** Borrow-Related Functions ***/\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function exchangeRateCurrent() external returns (uint);\\n    function accrueInterest() external returns (uint);\\n    \\n    /*** Liquidation Functions ***/\\n    function liquidateBorrow(address borrower, uint repayAmount, address vTokenCollateral) external returns (uint);\\n    \\n    /*** Admin Functions ***/\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(address newInterestRateModel) external returns (uint);\\n} \",\"keccak256\":\"0x06450e966b937d0dfd3b3b071063871433623fd889615950517044fe6276decb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620046eb380380620046eb833981016040819052620000349162000174565b33816001600160a01b038116620000925760405162461bcd60e51b815260206004820152601d60248201527f526f7574657220616464726573732063616e6e6f74206265207a65726f00000060448201526064015b60405180910390fd5b6001600160a01b039081166080528116620000c457604051631e4fbdf760e01b81526000600482015260240162000089565b620000cf8162000107565b505060018055600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055620001be565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200016f57600080fd5b919050565b6000806000606084860312156200018a57600080fd5b620001958462000157565b9250620001a56020850162000157565b9150620001b56040850162000157565b90509250925092565b6080516144ee620001fd6000396000818161029d0152818161097101528181610ccc0152818161124a015281816113d4015261263901526144ee6000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c80637dc0d1d01161011a578063b0772d0b116100ad578063d71275f61161007c578063d71275f61461055d578063e94201c714610570578063f2fde38b14610583578063f5125d3f14610596578063f639ecd2146105a957600080fd5b8063b0772d0b146104bd578063bad19350146104c5578063be5d6a67146104e5578063d4fac45d1461054a57600080fd5b80638da5cb5b116100e95780638da5cb5b14610473578063929fe9a114610484578063a342986c14610497578063abfceffc146104aa57600080fd5b80637dc0d1d01461041957806381906b801461042c5780638340f5491461044d5780638bad38dd1461046057600080fd5b80635224372c1161019d578063646121321161016c578063646121321461038c57806366e2d09b146103a65780636b5441a9146103c6578063715018a6146103ee57806378466113146103f657600080fd5b80635224372c146103065780635820ba63146103195780635ec88c791461034b5780635fe3b5671461037957600080fd5b806332fe7b26116101d957806332fe7b26146102985780634108d0af146102bf5780635054a1ae146102d2578063508a07f1146102f357600080fd5b8063104e999d1461020b578063118e31b7146102375780631da649cf146102585780632b7be8e81461026d575b600080fd5b61021e610219366004613773565b6105cb565b60405161022e94939291906138f8565b60405180910390f35b61024a610245366004613773565b6108e2565b60405190815260200161022e565b61026b610266366004613950565b610966565b005b61028061027b366004613991565b610b2c565b6040516001600160a01b03909116815260200161022e565b6102807f000000000000000000000000000000000000000000000000000000000000000081565b61026b6102cd3660046139ae565b610cc1565b6102e56102e0366004613a01565b610d1a565b60405161022e929190613a88565b6102e5610301366004613afa565b611070565b61026b610314366004613950565b61123e565b61032c610327366004613b3c565b6113c5565b604080516001600160a01b03909316835260208301919091520161022e565b61035e610359366004613991565b6116ed565b6040805193845260208401929092529082015260600161022e565b600254610280906001600160a01b031681565b61039461176f565b60405161022e96959493929190613b8d565b6103b96103b4366004613991565b611fae565b60405161022e9190613c0f565b6103d96103d4366004613991565b612193565b6040805192835290151560208301520161022e565b61026b612213565b610409610404366004613773565b612227565b604051901515815260200161022e565b600354610280906001600160a01b031681565b61043f61043a366004613c6d565b612349565b60405161022e929190613cb8565b61026b61045b366004613950565b61262e565b61026b61046e366004613991565b61290f565b6000546001600160a01b0316610280565b610409610492366004613773565b612939565b6102e56104a5366004613a01565b6129b7565b6103b96104b8366004613991565b612b9b565b6103b9612cc5565b6104d86104d3366004613c6d565b612df6565b60405161022e9190613ce6565b61053b60025460408051306024820152600160448083018290528351808403909101815260649092019092526020810180516001600160e01b031663ddbf54fd60e01b17905290926001600160a01b0390921691565b60405161022e93929190613d2c565b61024a610558366004613773565b612fa3565b6103d961056b366004613991565b6130a4565b61024a61057e366004613773565b6130f4565b61026b610591366004613991565b61314c565b61024a6105a4366004613773565b61318a565b6105bc6105b7366004613d58565b61320f565b60405161022e93929190613d99565b606080606080600080600080600080306001600160a01b031663646121326040518163ffffffff1660e01b8152600401600060405180830381865afa158015610618573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610640919081019061406c565b95509550955095509550955084516001600160401b0381111561066557610665613dd2565b60405190808252806020026020018201604052801561068e578160200160208202803683370190505b50995084516001600160401b038111156106aa576106aa613dd2565b6040519080825280602002602001820160405280156106dd57816020015b60608152602001906001900390816106c85790505b50975084516001600160401b038111156106f9576106f9613dd2565b604051908082528060200260200182016040528015610722578160200160208202803683370190505b50965084516001600160401b0381111561073e5761073e613dd2565b604051908082528060200260200182016040528015610767578160200160208202803683370190505b5098506001600160a01b038b16156107f3576000306001600160a01b03166381906b80888e6040518363ffffffff1660e01b81526004016107a9929190614160565b600060405180830381865afa1580156107c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107ee919081019061418a565b509950505b60005b85518110156108d257858181518110610811576108116141ed565b60200260200101518b828151811061082b5761082b6141ed565b60200260200101906001600160a01b031690816001600160a01b03168152505084818151811061085d5761085d6141ed565b6020026020010151898281518110610877576108776141ed565b6020026020010181905250828181518110610894576108946141ed565b60200260200101518882815181106108ae576108ae6141ed565b60ff90921660209283029190910190910152806108ca81614219565b9150506107f6565b5050505050505092959194509250565b6000806108ee84610b2c565b6040516395dd919360e01b81526001600160a01b038581166004830152919250908216906395dd919390602401602060405180830381865afa158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190614232565b9150505b92915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109b75760405162461bcd60e51b81526004016109ae9061424b565b60405180910390fd5b6109bf6134c4565b60006109ca84610b2c565b90506109e16001600160a01b0385163330856134ee565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af1158015610a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a549190614279565b506040516304c11f0360e31b81526001600160a01b0384811660048301526024820184905260009190831690632608f818906044016020604051808303816000875af1158015610aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acc9190614232565b90508015610b1c5760405162461bcd60e51b815260206004820152601a60248201527f56656e7573476174657761793a207265706179206661696c656400000000000060448201526064016109ae565b5050610b2760018055565b505050565b600080306001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b6d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b95919081019061429b565b905060005b8151811015610c5c576000828281518110610bb757610bb76141ed565b60200260200101519050806001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610c1b575060408051601f3d908101601f19168201909252610c18918101906142cf565b60015b610c255750610c4a565b856001600160a01b0316816001600160a01b031603610c475750949350505050565b50505b80610c5481614219565b915050610b9a565b5060405162461bcd60e51b815260206004820152603360248201527f56656e7573476174657761793a2076546f6b656e206e6f7420666f756e64206660448201527237b9103ab73232b9363cb4b733903a37b5b2b760691b60648201526084016109ae565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d095760405162461bcd60e51b81526004016109ae9061424b565b610d1483828461262e565b50505050565b6040805160018082528183019092526060918291906020808301908036833701905050604080516001808252818301909252919350816020015b6060815260200190600190039081610d5457505060025483519192506001600160a01b0316908390600090610d8b57610d8b6141ed565b6001600160a01b03909216602092830291909101909101526000836001600160401b03811115610dbd57610dbd613dd2565b604051908082528060200260200182016040528015610de6578160200160208202803683370190505b5090506000805b85811015610eda5730632b7be8e8888884818110610e0d57610e0d6141ed565b610e239260206040909202019081019150613991565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa925050508015610e83575060408051601f3d908101601f19168201909252610e80918101906142cf565b60015b15610ec857808484610e9481614219565b955081518110610ea657610ea66141ed565b60200260200101906001600160a01b031690816001600160a01b031681525050505b80610ed281614219565b915050610ded565b5080600003610f475760005b604051908082528060200260200182016040528015610f0f578160200160208202803683370190505b506040805160008082526020820190925290610f3b565b6060815260200190600190039081610f265790505b50935093505050611068565b84811015610ffa576000816001600160401b03811115610f6957610f69613dd2565b604051908082528060200260200182016040528015610f92578160200160208202803683370190505b50905060005b82811015610ff657838181518110610fb257610fb26141ed565b6020026020010151828281518110610fcc57610fcc6141ed565b6001600160a01b039092166020928302919091019091015280610fee81614219565b915050610f98565b5091505b604051631853304760e31b90611014908490602401613c0f565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050508360008151811061105a5761105a6141ed565b602002602001018190525050505b935093915050565b60405163056f7d1d60e31b81526001600160a01b038416600482015260609081903090632b7be8e890602401602060405180830381865afa9250505080156110d5575060408051601f3d908101601f191682019092526110d2918101906142cf565b60015b611116576040805160008082526020820181815282840190935290919061110c565b60608152602001906001900390816110f75790505b5091509150611068565b600254604051630217306760e31b81526001600160a01b03868116600483015230602483015260009216906310b9833890604401602060405180830381865afa925050508015611183575060408051601f3d908101601f1916820190925261118091810190614279565b60015b1561118b5790505b8015611198576000610ee6565b604080516001808252818301909252906020808301908036833701905050604080516001808252818301909252919550816020015b60608152602001906001900390816111cd57505060025485519194506001600160a01b0316908590600090611204576112046141ed565b6001600160a01b0392909216602092830291909101909101526040513060248201526001604482015263ddbf54fd60e01b90606401611014565b81336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061127e5750336001600160a01b038216145b6112ca5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c7920726f75746572206f722073656c662063616e2063616c6c0000000060448201526064016109ae565b6112d26134c4565b60006112dd85610b2c565b60405163856e5bb360e01b81526001600160a01b0386811660048301526024820186905291925060009183169063856e5bb3906044016020604051808303816000875af1158015611332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113569190614232565b905080156113a65760405162461bcd60e51b815260206004820152601b60248201527f56656e7573476174657761793a20626f72726f77206661696c6564000000000060448201526064016109ae565b6113ba6001600160a01b0387163386613555565b5050610d1460018055565b60008083336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806114085750336001600160a01b038216145b6114545760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c7920726f75746572206f722073656c662063616e2063616c6c0000000060448201526064016109ae565b61145c6134c4565b60405163056f7d1d60e31b81526001600160a01b03871660048201526000903090632b7be8e890602401602060405180830381865afa1580156114a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c791906142cf565b905060008190506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561150e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153291906142cf565b90506000826001600160a01b031663bd6d894d6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159a9190614232565b90506000816001816115b48c670de0b6b3a76400006142ec565b6115be9190614303565b6115c89190614316565b6115d29190614329565b6040516323b872dd60e01b81526001600160a01b038c8116600483015230602483015260448201839052919250908516906323b872dd906064016020604051808303816000875af115801561162b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164f9190614279565b5060405163db006a7560e01b8152600481018290526001600160a01b0385169063db006a75906024016020604051808303816000875af1158015611697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bb9190614232565b506116d06001600160a01b038416338b613555565b509095508694505050506116e360018055565b5094509492505050565b600254604051635ec88c7960e01b81526001600160a01b0383811660048301526000928392839290911690635ec88c7990602401606060405180830381865afa15801561173e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611762919061434b565b9250925092509193909250565b606080606080606080306001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156117b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117de919081019061429b565b8051909650806001600160401b038111156117fb576117fb613dd2565b604051908082528060200260200182016040528015611824578160200160208202803683370190505b509550806001600160401b0381111561183f5761183f613dd2565b60405190808252806020026020018201604052801561187257816020015b606081526020019060019003908161185d5790505b509450806001600160401b0381111561188d5761188d613dd2565b6040519080825280602002602001820160405280156118c057816020015b60608152602001906001900390816118ab5790505b509350806001600160401b038111156118db576118db613dd2565b604051908082528060200260200182016040528015611904578160200160208202803683370190505b509250806001600160401b0381111561191f5761191f613dd2565b604051908082528060200260200182016040528015611948578160200160208202803683370190505b50915060005b81811015611fa457600088828151811061196a5761196a6141ed565b602002602001015190506000819050806001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156119d3575060408051601f3d908101601f191682019092526119d0918101906142cf565b60015b611b9e5760008984815181106119eb576119eb6141ed565b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611a49573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a719190810190614379565b888481518110611a8357611a836141ed565b6020026020010181905250806001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611acc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611af49190810190614379565b878481518110611b0657611b066141ed565b6020026020010181905250806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7391906143ad565b868481518110611b8557611b856141ed565b602002602001019060ff16908160ff1681525050611f03565b808a8581518110611bb157611bb16141ed565b60200260200101906001600160a01b031690816001600160a01b0316815250506000819050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa925050508015611c3557506040513d6000823e601f3d908101601f19168201604052611c329190810190614379565b60015b611cc157826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611c77573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c9f9190810190614379565b8a8681518110611cb157611cb16141ed565b6020026020010181905250611ce1565b808b8781518110611cd457611cd46141ed565b6020026020010181905250505b806001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa925050508015611d4057506040513d6000823e601f3d908101601f19168201604052611d3d9190810190614379565b60015b611dcc57826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611d82573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611daa9190810190614379565b898681518110611dbc57611dbc6141ed565b6020026020010181905250611dec565b808a8781518110611ddf57611ddf6141ed565b6020026020010181905250505b806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611e46575060408051601f3d908101601f19168201909252611e43918101906143ad565b60015b611ed757826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eac91906143ad565b888681518110611ebe57611ebe6141ed565b602002602001019060ff16908160ff1681525050611f00565b80898781518110611eea57611eea6141ed565b602002602001019060ff16908160ff1681525050505b50505b60035460405163fc57d4df60e01b81526001600160a01b0384811660048301529091169063fc57d4df90602401602060405180830381865afa158015611f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f719190614232565b858481518110611f8357611f836141ed565b60200260200101818152505050508080611f9c90614219565b91505061194e565b5050909192939495565b60606000306001600160a01b031663646121326040518163ffffffff1660e01b8152600401600060405180830381865afa158015611ff0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612018919081019061406c565b505050509150506000805b825181101561207957846001600160a01b0316838281518110612048576120486141ed565b60200260200101516001600160a01b0316036120675760019150612079565b8061207181614219565b915050612023565b508061209657505060408051600081526020810190915292915050565b600182516120a49190614316565b6001600160401b038111156120bb576120bb613dd2565b6040519080825280602002602001820160405280156120e4578160200160208202803683370190505b5092506000805b835181101561218a57856001600160a01b0316848281518110612110576121106141ed565b60200260200101516001600160a01b03161461217857838181518110612138576121386141ed565b6020026020010151858381518110612152576121526141ed565b6001600160a01b03909216602092830291909101909101528161217481614219565b9250505b8061218281614219565b9150506120eb565b50505050919050565b60008060006121a184610b2c565b90506000816001600160a01b031663ae9d70b06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122079190614232565b95600195509350505050565b61221b613586565b61222560006135b3565b565b600080306001600160a01b031663646121326040518163ffffffff1660e01b8152600401600060405180830381865afa158015612268573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612290919081019061406c565b5050505091505060008060005b835181101561233457866001600160a01b03168482815181106122c2576122c26141ed565b60200260200101516001600160a01b0316036122dd57600192505b856001600160a01b03168482815181106122f9576122f96141ed565b60200260200101516001600160a01b03160361231457600191505b82801561231e5750815b612334578061232c81614219565b91505061229d565b5081801561233f5750805b9695505050505050565b6060806001600160a01b0383166123725760405162461bcd60e51b81526004016109ae906143c8565b83806001600160401b0381111561238b5761238b613dd2565b6040519080825280602002602001820160405280156123b4578160200160208202803683370190505b509250806001600160401b038111156123cf576123cf613dd2565b6040519080825280602002602001820160405280156123f8578160200160208202803683370190505b50915060005b8181101561262457600087878381811061241a5761241a6141ed565b905060200201602081019061242f9190613991565b6040516370a0823160e01b81526001600160a01b03888116600483015291925082918216906370a0823190602401602060405180830381865afa925050508015612496575060408051601f3d908101601f1916820190925261249391810190614232565b60015b6124bf5760008684815181106124ae576124ae6141ed565b602002602001018181525050612563565b6000826001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125239190614232565b9050670de0b6b3a764000061253882846142ec565b6125429190614329565b888681518110612554576125546141ed565b60200260200101818152505050505b6040516395dd919360e01b81526001600160a01b0388811660048301528216906395dd919390602401602060405180830381865afa9250505080156125c5575060408051601f3d908101601f191682019092526125c291810190614232565b60015b6125ee5760008584815181106125dd576125dd6141ed565b60200260200101818152505061260f565b80868581518110612601576126016141ed565b602002602001018181525050505b5050808061261c90614219565b9150506123fe565b5050935093915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146126765760405162461bcd60e51b81526004016109ae9061424b565b61267e6134c4565b600061268984610b2c565b90506126a06001600160a01b0385163330856134ee565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af11580156126ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127139190614279565b5060405163140e25ad60e31b8152600481018390526000906001600160a01b0383169063a0712d68906024016020604051808303816000875af115801561275e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127829190614232565b905080156127d25760405162461bcd60e51b815260206004820152601c60248201527f56656e7573476174657761793a206465706f736974206661696c65640000000060448201526064016109ae565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283d9190614232565b90506000811161288f5760405162461bcd60e51b815260206004820152601f60248201527f56656e7573476174657761793a206e6f2076546f6b656e73206d696e7465640060448201526064016109ae565b60405163a9059cbb60e01b81526001600160a01b0386811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af11580156128de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129029190614279565b50505050610b2760018055565b612917613586565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60025460405163929fe9a160e01b81526001600160a01b0384811660048301528381166024830152600092169063929fe9a190604401602060405180830381865afa15801561298c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b09190614279565b9392505050565b606080826001600160401b038111156129d2576129d2613dd2565b6040519080825280602002602001820160405280156129fb578160200160208202803683370190505b509150826001600160401b03811115612a1657612a16613dd2565b604051908082528060200260200182016040528015612a4957816020015b6060815260200190600190039081612a345790505b50905060005b83811015612b9257600030632b7be8e8878785818110612a7157612a716141ed565b612a879260206040909202019081019150613991565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa925050508015612ae7575060408051601f3d908101601f19168201909252612ae4918101906142cf565b60015b612af15750612b80565b905080848381518110612b0657612b066141ed565b6001600160a01b03929092166020928302919091018201526040805130602482015260001960448083019190915282518083039091018152606490910190915290810180516001600160e01b031663095ea7b360e01b1790528351849084908110612b7357612b736141ed565b6020026020010181905250505b80612b8a81614219565b915050612a4f565b50935093915050565b600254604051632aff3bff60e21b81526001600160a01b03838116600483015260609260009291169063abfceffc90602401600060405180830381865afa158015612bea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c12919081019061440e565b9050600081516001600160401b03811115612c2f57612c2f613dd2565b604051908082528060200260200182016040528015612c58578160200160208202803683370190505b50905060005b8251811015612cbd57828181518110612c7957612c796141ed565b6020026020010151828281518110612c9357612c936141ed565b6001600160a01b039092166020928302919091019091015280612cb581614219565b915050612c5e565b509392505050565b60606000600260009054906101000a90046001600160a01b03166001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015612d1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612d44919081019061440e565b9050600081516001600160401b03811115612d6157612d61613dd2565b604051908082528060200260200182016040528015612d8a578160200160208202803683370190505b50905060005b8251811015612def57828181518110612dab57612dab6141ed565b6020026020010151828281518110612dc557612dc56141ed565b6001600160a01b039092166020928302919091019091015280612de781614219565b915050612d90565b5092915050565b60606001600160a01b038216612e1e5760405162461bcd60e51b81526004016109ae906143c8565b82806001600160401b03811115612e3757612e37613dd2565b604051908082528060200260200182016040528015612e60578160200160208202803683370190505b50604051632aff3bff60e21b81526001600160a01b0385166004820152909250600090309063abfceffc90602401600060405180830381865afa158015612eab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ed3919081019061429b565b905060005b82811015612f99576000878783818110612ef457612ef46141ed565b9050602002016020810190612f099190613991565b905060005b8351811015612f8457816001600160a01b0316848281518110612f3357612f336141ed565b60200260200101516001600160a01b031603612f72576001868481518110612f5d57612f5d6141ed565b91151560209283029190910190910152612f84565b80612f7c81614219565b915050612f0e565b50508080612f9190614219565b915050612ed8565b5050509392505050565b600080612faf84610b2c565b6040516370a0823160e01b81526001600160a01b0385811660048301529192506000918316906370a0823190602401602060405180830381865afa158015612ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301f9190614232565b90506000826001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613061573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130859190614232565b9050670de0b6b3a764000061309a82846142ec565b61233f9190614329565b60008060006130b284610b2c565b90506000816001600160a01b031663f8f9da286040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121e3573d6000803e3d6000fd5b60008061310084610b2c565b6040516305eff7ef60e21b81526001600160a01b038581166004830152919250908216906317bfdfbc906024016020604051808303816000875af1158015610938573d6000803e3d6000fd5b613154613586565b6001600160a01b03811661317e57604051631e4fbdf760e01b8152600060048201526024016109ae565b613187816135b3565b50565b60405163056f7d1d60e31b81526001600160a01b038316600482015260009081903090632b7be8e890602401602060405180830381865afa9250505080156131ef575060408051601f3d908101601f191682019092526131ec918101906142cf565b60015b6131fd576000915050610960565b50670a688906bd8b0000949350505050565b6060808083806001600160401b0381111561322c5761322c613dd2565b604051908082528060200260200182016040528015613255578160200160208202803683370190505b509350806001600160401b0381111561327057613270613dd2565b604051908082528060200260200182016040528015613299578160200160208202803683370190505b509250806001600160401b038111156132b4576132b4613dd2565b6040519080825280602002602001820160405280156132dd578160200160208202803683370190505b50915060005b818110156134bb5760008787838181106132ff576132ff6141ed565b90506020020160208101906133149190613991565b90506000819050806001600160a01b031663ae9d70b06040518163ffffffff1660e01b8152600401602060405180830381865afa158015613359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061337d9190614232565b86848151811061338f5761338f6141ed565b602002602001018181525050806001600160a01b031663f8f9da286040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133fd9190614232565b85848151811061340f5761340f6141ed565b602090810291909101015260035460405163fc57d4df60e01b81526001600160a01b0384811660048301529091169063fc57d4df90602401602060405180830381865afa158015613464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134889190614232565b87848151811061349a5761349a6141ed565b602002602001018181525050505080806134b390614219565b9150506132e3565b50509250925092565b6002600154036134e757604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6040516001600160a01b038481166024830152838116604483015260648201839052610d149186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050613603565b6040516001600160a01b03838116602483015260448201839052610b2791859182169063a9059cbb90606401613523565b6000546001600160a01b031633146122255760405163118cdaa760e01b81523360048201526024016109ae565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006136186001600160a01b03841683613666565b9050805160001415801561363d57508080602001905181019061363b9190614279565b155b15610b2757604051635274afe760e01b81526001600160a01b03841660048201526024016109ae565b60606129b08383600084600080856001600160a01b0316848660405161368c919061449c565b60006040518083038185875af1925050503d80600081146136c9576040519150601f19603f3d011682016040523d82523d6000602084013e6136ce565b606091505b509150915061233f8683836060826136ee576136e982613735565b6129b0565b815115801561370557506001600160a01b0384163b155b1561372e57604051639996b31560e01b81526001600160a01b03851660048201526024016109ae565b50806129b0565b8051156137455780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b038116811461318757600080fd5b6000806040838503121561378657600080fd5b82356137918161375e565b915060208301356137a18161375e565b809150509250929050565b600081518084526020808501945080840160005b838110156137e55781516001600160a01b0316875295820195908201906001016137c0565b509495945050505050565b600081518084526020808501945080840160005b838110156137e557815187529582019590820190600101613804565b60005b8381101561383b578181015183820152602001613823565b50506000910152565b6000815180845261385c816020860160208601613820565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156138b85782840389526138a6848351613844565b9885019893509084019060010161388e565b5091979650505050505050565b600081518084526020808501945080840160005b838110156137e557815160ff16875295820195908201906001016138d9565b60808152600061390b60808301876137ac565b828103602084015261391d81876137f0565b905082810360408401526139318186613870565b9050828103606084015261394581856138c5565b979650505050505050565b60008060006060848603121561396557600080fd5b83356139708161375e565b925060208401356139808161375e565b929592945050506040919091013590565b6000602082840312156139a357600080fd5b81356129b08161375e565b600080600080608085870312156139c457600080fd5b84356139cf8161375e565b935060208501356139df8161375e565b92506040850135915060608501356139f68161375e565b939692955090935050565b600080600060408486031215613a1657600080fd5b8335613a218161375e565b925060208401356001600160401b0380821115613a3d57600080fd5b818601915086601f830112613a5157600080fd5b813581811115613a6057600080fd5b8760208260061b8501011115613a7557600080fd5b6020830194508093505050509250925092565b604081526000613a9b60408301856137ac565b6020838203818501528185518084528284019150828160051b85010183880160005b83811015613aeb57601f19878403018552613ad9838351613844565b94860194925090850190600101613abd565b50909998505050505050505050565b600080600060608486031215613b0f57600080fd5b8335613b1a8161375e565b9250602084013591506040840135613b318161375e565b809150509250925092565b60008060008060808587031215613b5257600080fd5b8435613b5d8161375e565b93506020850135613b6d8161375e565b92506040850135613b7d8161375e565b9396929550929360600135925050565b60c081526000613ba060c08301896137ac565b8281036020840152613bb281896137ac565b90508281036040840152613bc68188613870565b90508281036060840152613bda8187613870565b90508281036080840152613bee81866138c5565b905082810360a0840152613c0281856137f0565b9998505050505050505050565b6020815260006129b060208301846137ac565b60008083601f840112613c3457600080fd5b5081356001600160401b03811115613c4b57600080fd5b6020830191508360208260051b8501011115613c6657600080fd5b9250929050565b600080600060408486031215613c8257600080fd5b83356001600160401b03811115613c9857600080fd5b613ca486828701613c22565b9094509250506020840135613b318161375e565b604081526000613ccb60408301856137f0565b8281036020840152613cdd81856137f0565b95945050505050565b6020808252825182820181905260009190848201906040850190845b81811015613d20578351151583529284019291840191600101613d02565b50909695505050505050565b83151581526001600160a01b0383166020820152606060408201819052600090613cdd90830184613844565b60008060208385031215613d6b57600080fd5b82356001600160401b03811115613d8157600080fd5b613d8d85828601613c22565b90969095509350505050565b606081526000613dac60608301866137f0565b8281036020840152613dbe81866137f0565b9050828103604084015261233f81856137f0565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613e1057613e10613dd2565b604052919050565b60006001600160401b03821115613e3157613e31613dd2565b5060051b60200190565b600082601f830112613e4c57600080fd5b81516020613e61613e5c83613e18565b613de8565b82815260059290921b84018101918181019086841115613e8057600080fd5b8286015b84811015613ea4578051613e978161375e565b8352918301918301613e84565b509695505050505050565b600082601f830112613ec057600080fd5b81516001600160401b03811115613ed957613ed9613dd2565b613eec601f8201601f1916602001613de8565b818152846020838601011115613f0157600080fd5b613f12826020830160208701613820565b949350505050565b600082601f830112613f2b57600080fd5b81516020613f3b613e5c83613e18565b82815260059290921b84018101918181019086841115613f5a57600080fd5b8286015b84811015613ea45780516001600160401b03811115613f7d5760008081fd5b613f8b8986838b0101613eaf565b845250918301918301613f5e565b805160ff81168114613faa57600080fd5b919050565b600082601f830112613fc057600080fd5b81516020613fd0613e5c83613e18565b82815260059290921b84018101918181019086841115613fef57600080fd5b8286015b84811015613ea45761400481613f99565b8352918301918301613ff3565b600082601f83011261402257600080fd5b81516020614032613e5c83613e18565b82815260059290921b8401810191818101908684111561405157600080fd5b8286015b84811015613ea45780518352918301918301614055565b60008060008060008060c0878903121561408557600080fd5b86516001600160401b038082111561409c57600080fd5b6140a88a838b01613e3b565b975060208901519150808211156140be57600080fd5b6140ca8a838b01613e3b565b965060408901519150808211156140e057600080fd5b6140ec8a838b01613f1a565b9550606089015191508082111561410257600080fd5b61410e8a838b01613f1a565b9450608089015191508082111561412457600080fd5b6141308a838b01613faf565b935060a089015191508082111561414657600080fd5b5061415389828a01614011565b9150509295509295509295565b60408152600061417360408301856137ac565b905060018060a01b03831660208301529392505050565b6000806040838503121561419d57600080fd5b82516001600160401b03808211156141b457600080fd5b6141c086838701614011565b935060208501519150808211156141d657600080fd5b506141e385828601614011565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161422b5761422b614203565b5060010190565b60006020828403121561424457600080fd5b5051919050565b60208082526014908201527313db9b1e481c9bdd5d195c8818d85b8818d85b1b60621b604082015260600190565b60006020828403121561428b57600080fd5b815180151581146129b057600080fd5b6000602082840312156142ad57600080fd5b81516001600160401b038111156142c357600080fd5b61095c84828501613e3b565b6000602082840312156142e157600080fd5b81516129b08161375e565b808202811582820484141761096057610960614203565b8082018082111561096057610960614203565b8181038181111561096057610960614203565b60008261434657634e487b7160e01b600052601260045260246000fd5b500490565b60008060006060848603121561436057600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561438b57600080fd5b81516001600160401b038111156143a157600080fd5b61095c84828501613eaf565b6000602082840312156143bf57600080fd5b6129b082613f99565b60208082526026908201527f56656e7573476174657761793a207a65726f2061646472657373206e6f7420616040820152651b1b1bddd95960d21b606082015260800190565b6000602080838503121561442157600080fd5b82516001600160401b0381111561443757600080fd5b8301601f8101851361444857600080fd5b8051614456613e5c82613e18565b81815260059190911b8201830190838101908783111561447557600080fd5b928401925b8284101561394557835161448d8161375e565b8252928401929084019061447a565b600082516144ae818460208701613820565b919091019291505056fea2646970667358221220481d4fe027fb5f9624cdf7ff5dbfafee87391307341535e5940ea19ac99c35c164736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c80637dc0d1d01161011a578063b0772d0b116100ad578063d71275f61161007c578063d71275f61461055d578063e94201c714610570578063f2fde38b14610583578063f5125d3f14610596578063f639ecd2146105a957600080fd5b8063b0772d0b146104bd578063bad19350146104c5578063be5d6a67146104e5578063d4fac45d1461054a57600080fd5b80638da5cb5b116100e95780638da5cb5b14610473578063929fe9a114610484578063a342986c14610497578063abfceffc146104aa57600080fd5b80637dc0d1d01461041957806381906b801461042c5780638340f5491461044d5780638bad38dd1461046057600080fd5b80635224372c1161019d578063646121321161016c578063646121321461038c57806366e2d09b146103a65780636b5441a9146103c6578063715018a6146103ee57806378466113146103f657600080fd5b80635224372c146103065780635820ba63146103195780635ec88c791461034b5780635fe3b5671461037957600080fd5b806332fe7b26116101d957806332fe7b26146102985780634108d0af146102bf5780635054a1ae146102d2578063508a07f1146102f357600080fd5b8063104e999d1461020b578063118e31b7146102375780631da649cf146102585780632b7be8e81461026d575b600080fd5b61021e610219366004613773565b6105cb565b60405161022e94939291906138f8565b60405180910390f35b61024a610245366004613773565b6108e2565b60405190815260200161022e565b61026b610266366004613950565b610966565b005b61028061027b366004613991565b610b2c565b6040516001600160a01b03909116815260200161022e565b6102807f000000000000000000000000000000000000000000000000000000000000000081565b61026b6102cd3660046139ae565b610cc1565b6102e56102e0366004613a01565b610d1a565b60405161022e929190613a88565b6102e5610301366004613afa565b611070565b61026b610314366004613950565b61123e565b61032c610327366004613b3c565b6113c5565b604080516001600160a01b03909316835260208301919091520161022e565b61035e610359366004613991565b6116ed565b6040805193845260208401929092529082015260600161022e565b600254610280906001600160a01b031681565b61039461176f565b60405161022e96959493929190613b8d565b6103b96103b4366004613991565b611fae565b60405161022e9190613c0f565b6103d96103d4366004613991565b612193565b6040805192835290151560208301520161022e565b61026b612213565b610409610404366004613773565b612227565b604051901515815260200161022e565b600354610280906001600160a01b031681565b61043f61043a366004613c6d565b612349565b60405161022e929190613cb8565b61026b61045b366004613950565b61262e565b61026b61046e366004613991565b61290f565b6000546001600160a01b0316610280565b610409610492366004613773565b612939565b6102e56104a5366004613a01565b6129b7565b6103b96104b8366004613991565b612b9b565b6103b9612cc5565b6104d86104d3366004613c6d565b612df6565b60405161022e9190613ce6565b61053b60025460408051306024820152600160448083018290528351808403909101815260649092019092526020810180516001600160e01b031663ddbf54fd60e01b17905290926001600160a01b0390921691565b60405161022e93929190613d2c565b61024a610558366004613773565b612fa3565b6103d961056b366004613991565b6130a4565b61024a61057e366004613773565b6130f4565b61026b610591366004613991565b61314c565b61024a6105a4366004613773565b61318a565b6105bc6105b7366004613d58565b61320f565b60405161022e93929190613d99565b606080606080600080600080600080306001600160a01b031663646121326040518163ffffffff1660e01b8152600401600060405180830381865afa158015610618573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610640919081019061406c565b95509550955095509550955084516001600160401b0381111561066557610665613dd2565b60405190808252806020026020018201604052801561068e578160200160208202803683370190505b50995084516001600160401b038111156106aa576106aa613dd2565b6040519080825280602002602001820160405280156106dd57816020015b60608152602001906001900390816106c85790505b50975084516001600160401b038111156106f9576106f9613dd2565b604051908082528060200260200182016040528015610722578160200160208202803683370190505b50965084516001600160401b0381111561073e5761073e613dd2565b604051908082528060200260200182016040528015610767578160200160208202803683370190505b5098506001600160a01b038b16156107f3576000306001600160a01b03166381906b80888e6040518363ffffffff1660e01b81526004016107a9929190614160565b600060405180830381865afa1580156107c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107ee919081019061418a565b509950505b60005b85518110156108d257858181518110610811576108116141ed565b60200260200101518b828151811061082b5761082b6141ed565b60200260200101906001600160a01b031690816001600160a01b03168152505084818151811061085d5761085d6141ed565b6020026020010151898281518110610877576108776141ed565b6020026020010181905250828181518110610894576108946141ed565b60200260200101518882815181106108ae576108ae6141ed565b60ff90921660209283029190910190910152806108ca81614219565b9150506107f6565b5050505050505092959194509250565b6000806108ee84610b2c565b6040516395dd919360e01b81526001600160a01b038581166004830152919250908216906395dd919390602401602060405180830381865afa158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190614232565b9150505b92915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109b75760405162461bcd60e51b81526004016109ae9061424b565b60405180910390fd5b6109bf6134c4565b60006109ca84610b2c565b90506109e16001600160a01b0385163330856134ee565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af1158015610a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a549190614279565b506040516304c11f0360e31b81526001600160a01b0384811660048301526024820184905260009190831690632608f818906044016020604051808303816000875af1158015610aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acc9190614232565b90508015610b1c5760405162461bcd60e51b815260206004820152601a60248201527f56656e7573476174657761793a207265706179206661696c656400000000000060448201526064016109ae565b5050610b2760018055565b505050565b600080306001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b6d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b95919081019061429b565b905060005b8151811015610c5c576000828281518110610bb757610bb76141ed565b60200260200101519050806001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610c1b575060408051601f3d908101601f19168201909252610c18918101906142cf565b60015b610c255750610c4a565b856001600160a01b0316816001600160a01b031603610c475750949350505050565b50505b80610c5481614219565b915050610b9a565b5060405162461bcd60e51b815260206004820152603360248201527f56656e7573476174657761793a2076546f6b656e206e6f7420666f756e64206660448201527237b9103ab73232b9363cb4b733903a37b5b2b760691b60648201526084016109ae565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d095760405162461bcd60e51b81526004016109ae9061424b565b610d1483828461262e565b50505050565b6040805160018082528183019092526060918291906020808301908036833701905050604080516001808252818301909252919350816020015b6060815260200190600190039081610d5457505060025483519192506001600160a01b0316908390600090610d8b57610d8b6141ed565b6001600160a01b03909216602092830291909101909101526000836001600160401b03811115610dbd57610dbd613dd2565b604051908082528060200260200182016040528015610de6578160200160208202803683370190505b5090506000805b85811015610eda5730632b7be8e8888884818110610e0d57610e0d6141ed565b610e239260206040909202019081019150613991565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa925050508015610e83575060408051601f3d908101601f19168201909252610e80918101906142cf565b60015b15610ec857808484610e9481614219565b955081518110610ea657610ea66141ed565b60200260200101906001600160a01b031690816001600160a01b031681525050505b80610ed281614219565b915050610ded565b5080600003610f475760005b604051908082528060200260200182016040528015610f0f578160200160208202803683370190505b506040805160008082526020820190925290610f3b565b6060815260200190600190039081610f265790505b50935093505050611068565b84811015610ffa576000816001600160401b03811115610f6957610f69613dd2565b604051908082528060200260200182016040528015610f92578160200160208202803683370190505b50905060005b82811015610ff657838181518110610fb257610fb26141ed565b6020026020010151828281518110610fcc57610fcc6141ed565b6001600160a01b039092166020928302919091019091015280610fee81614219565b915050610f98565b5091505b604051631853304760e31b90611014908490602401613c0f565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050508360008151811061105a5761105a6141ed565b602002602001018190525050505b935093915050565b60405163056f7d1d60e31b81526001600160a01b038416600482015260609081903090632b7be8e890602401602060405180830381865afa9250505080156110d5575060408051601f3d908101601f191682019092526110d2918101906142cf565b60015b611116576040805160008082526020820181815282840190935290919061110c565b60608152602001906001900390816110f75790505b5091509150611068565b600254604051630217306760e31b81526001600160a01b03868116600483015230602483015260009216906310b9833890604401602060405180830381865afa925050508015611183575060408051601f3d908101601f1916820190925261118091810190614279565b60015b1561118b5790505b8015611198576000610ee6565b604080516001808252818301909252906020808301908036833701905050604080516001808252818301909252919550816020015b60608152602001906001900390816111cd57505060025485519194506001600160a01b0316908590600090611204576112046141ed565b6001600160a01b0392909216602092830291909101909101526040513060248201526001604482015263ddbf54fd60e01b90606401611014565b81336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061127e5750336001600160a01b038216145b6112ca5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c7920726f75746572206f722073656c662063616e2063616c6c0000000060448201526064016109ae565b6112d26134c4565b60006112dd85610b2c565b60405163856e5bb360e01b81526001600160a01b0386811660048301526024820186905291925060009183169063856e5bb3906044016020604051808303816000875af1158015611332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113569190614232565b905080156113a65760405162461bcd60e51b815260206004820152601b60248201527f56656e7573476174657761793a20626f72726f77206661696c6564000000000060448201526064016109ae565b6113ba6001600160a01b0387163386613555565b5050610d1460018055565b60008083336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806114085750336001600160a01b038216145b6114545760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c7920726f75746572206f722073656c662063616e2063616c6c0000000060448201526064016109ae565b61145c6134c4565b60405163056f7d1d60e31b81526001600160a01b03871660048201526000903090632b7be8e890602401602060405180830381865afa1580156114a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c791906142cf565b905060008190506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561150e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153291906142cf565b90506000826001600160a01b031663bd6d894d6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159a9190614232565b90506000816001816115b48c670de0b6b3a76400006142ec565b6115be9190614303565b6115c89190614316565b6115d29190614329565b6040516323b872dd60e01b81526001600160a01b038c8116600483015230602483015260448201839052919250908516906323b872dd906064016020604051808303816000875af115801561162b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164f9190614279565b5060405163db006a7560e01b8152600481018290526001600160a01b0385169063db006a75906024016020604051808303816000875af1158015611697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bb9190614232565b506116d06001600160a01b038416338b613555565b509095508694505050506116e360018055565b5094509492505050565b600254604051635ec88c7960e01b81526001600160a01b0383811660048301526000928392839290911690635ec88c7990602401606060405180830381865afa15801561173e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611762919061434b565b9250925092509193909250565b606080606080606080306001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156117b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117de919081019061429b565b8051909650806001600160401b038111156117fb576117fb613dd2565b604051908082528060200260200182016040528015611824578160200160208202803683370190505b509550806001600160401b0381111561183f5761183f613dd2565b60405190808252806020026020018201604052801561187257816020015b606081526020019060019003908161185d5790505b509450806001600160401b0381111561188d5761188d613dd2565b6040519080825280602002602001820160405280156118c057816020015b60608152602001906001900390816118ab5790505b509350806001600160401b038111156118db576118db613dd2565b604051908082528060200260200182016040528015611904578160200160208202803683370190505b509250806001600160401b0381111561191f5761191f613dd2565b604051908082528060200260200182016040528015611948578160200160208202803683370190505b50915060005b81811015611fa457600088828151811061196a5761196a6141ed565b602002602001015190506000819050806001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156119d3575060408051601f3d908101601f191682019092526119d0918101906142cf565b60015b611b9e5760008984815181106119eb576119eb6141ed565b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611a49573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a719190810190614379565b888481518110611a8357611a836141ed565b6020026020010181905250806001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611acc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611af49190810190614379565b878481518110611b0657611b066141ed565b6020026020010181905250806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7391906143ad565b868481518110611b8557611b856141ed565b602002602001019060ff16908160ff1681525050611f03565b808a8581518110611bb157611bb16141ed565b60200260200101906001600160a01b031690816001600160a01b0316815250506000819050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa925050508015611c3557506040513d6000823e601f3d908101601f19168201604052611c329190810190614379565b60015b611cc157826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611c77573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c9f9190810190614379565b8a8681518110611cb157611cb16141ed565b6020026020010181905250611ce1565b808b8781518110611cd457611cd46141ed565b6020026020010181905250505b806001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa925050508015611d4057506040513d6000823e601f3d908101601f19168201604052611d3d9190810190614379565b60015b611dcc57826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611d82573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611daa9190810190614379565b898681518110611dbc57611dbc6141ed565b6020026020010181905250611dec565b808a8781518110611ddf57611ddf6141ed565b6020026020010181905250505b806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611e46575060408051601f3d908101601f19168201909252611e43918101906143ad565b60015b611ed757826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eac91906143ad565b888681518110611ebe57611ebe6141ed565b602002602001019060ff16908160ff1681525050611f00565b80898781518110611eea57611eea6141ed565b602002602001019060ff16908160ff1681525050505b50505b60035460405163fc57d4df60e01b81526001600160a01b0384811660048301529091169063fc57d4df90602401602060405180830381865afa158015611f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f719190614232565b858481518110611f8357611f836141ed565b60200260200101818152505050508080611f9c90614219565b91505061194e565b5050909192939495565b60606000306001600160a01b031663646121326040518163ffffffff1660e01b8152600401600060405180830381865afa158015611ff0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612018919081019061406c565b505050509150506000805b825181101561207957846001600160a01b0316838281518110612048576120486141ed565b60200260200101516001600160a01b0316036120675760019150612079565b8061207181614219565b915050612023565b508061209657505060408051600081526020810190915292915050565b600182516120a49190614316565b6001600160401b038111156120bb576120bb613dd2565b6040519080825280602002602001820160405280156120e4578160200160208202803683370190505b5092506000805b835181101561218a57856001600160a01b0316848281518110612110576121106141ed565b60200260200101516001600160a01b03161461217857838181518110612138576121386141ed565b6020026020010151858381518110612152576121526141ed565b6001600160a01b03909216602092830291909101909101528161217481614219565b9250505b8061218281614219565b9150506120eb565b50505050919050565b60008060006121a184610b2c565b90506000816001600160a01b031663ae9d70b06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122079190614232565b95600195509350505050565b61221b613586565b61222560006135b3565b565b600080306001600160a01b031663646121326040518163ffffffff1660e01b8152600401600060405180830381865afa158015612268573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612290919081019061406c565b5050505091505060008060005b835181101561233457866001600160a01b03168482815181106122c2576122c26141ed565b60200260200101516001600160a01b0316036122dd57600192505b856001600160a01b03168482815181106122f9576122f96141ed565b60200260200101516001600160a01b03160361231457600191505b82801561231e5750815b612334578061232c81614219565b91505061229d565b5081801561233f5750805b9695505050505050565b6060806001600160a01b0383166123725760405162461bcd60e51b81526004016109ae906143c8565b83806001600160401b0381111561238b5761238b613dd2565b6040519080825280602002602001820160405280156123b4578160200160208202803683370190505b509250806001600160401b038111156123cf576123cf613dd2565b6040519080825280602002602001820160405280156123f8578160200160208202803683370190505b50915060005b8181101561262457600087878381811061241a5761241a6141ed565b905060200201602081019061242f9190613991565b6040516370a0823160e01b81526001600160a01b03888116600483015291925082918216906370a0823190602401602060405180830381865afa925050508015612496575060408051601f3d908101601f1916820190925261249391810190614232565b60015b6124bf5760008684815181106124ae576124ae6141ed565b602002602001018181525050612563565b6000826001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125239190614232565b9050670de0b6b3a764000061253882846142ec565b6125429190614329565b888681518110612554576125546141ed565b60200260200101818152505050505b6040516395dd919360e01b81526001600160a01b0388811660048301528216906395dd919390602401602060405180830381865afa9250505080156125c5575060408051601f3d908101601f191682019092526125c291810190614232565b60015b6125ee5760008584815181106125dd576125dd6141ed565b60200260200101818152505061260f565b80868581518110612601576126016141ed565b602002602001018181525050505b5050808061261c90614219565b9150506123fe565b5050935093915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146126765760405162461bcd60e51b81526004016109ae9061424b565b61267e6134c4565b600061268984610b2c565b90506126a06001600160a01b0385163330856134ee565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af11580156126ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127139190614279565b5060405163140e25ad60e31b8152600481018390526000906001600160a01b0383169063a0712d68906024016020604051808303816000875af115801561275e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127829190614232565b905080156127d25760405162461bcd60e51b815260206004820152601c60248201527f56656e7573476174657761793a206465706f736974206661696c65640000000060448201526064016109ae565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283d9190614232565b90506000811161288f5760405162461bcd60e51b815260206004820152601f60248201527f56656e7573476174657761793a206e6f2076546f6b656e73206d696e7465640060448201526064016109ae565b60405163a9059cbb60e01b81526001600160a01b0386811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af11580156128de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129029190614279565b50505050610b2760018055565b612917613586565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60025460405163929fe9a160e01b81526001600160a01b0384811660048301528381166024830152600092169063929fe9a190604401602060405180830381865afa15801561298c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b09190614279565b9392505050565b606080826001600160401b038111156129d2576129d2613dd2565b6040519080825280602002602001820160405280156129fb578160200160208202803683370190505b509150826001600160401b03811115612a1657612a16613dd2565b604051908082528060200260200182016040528015612a4957816020015b6060815260200190600190039081612a345790505b50905060005b83811015612b9257600030632b7be8e8878785818110612a7157612a716141ed565b612a879260206040909202019081019150613991565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa925050508015612ae7575060408051601f3d908101601f19168201909252612ae4918101906142cf565b60015b612af15750612b80565b905080848381518110612b0657612b066141ed565b6001600160a01b03929092166020928302919091018201526040805130602482015260001960448083019190915282518083039091018152606490910190915290810180516001600160e01b031663095ea7b360e01b1790528351849084908110612b7357612b736141ed565b6020026020010181905250505b80612b8a81614219565b915050612a4f565b50935093915050565b600254604051632aff3bff60e21b81526001600160a01b03838116600483015260609260009291169063abfceffc90602401600060405180830381865afa158015612bea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c12919081019061440e565b9050600081516001600160401b03811115612c2f57612c2f613dd2565b604051908082528060200260200182016040528015612c58578160200160208202803683370190505b50905060005b8251811015612cbd57828181518110612c7957612c796141ed565b6020026020010151828281518110612c9357612c936141ed565b6001600160a01b039092166020928302919091019091015280612cb581614219565b915050612c5e565b509392505050565b60606000600260009054906101000a90046001600160a01b03166001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015612d1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612d44919081019061440e565b9050600081516001600160401b03811115612d6157612d61613dd2565b604051908082528060200260200182016040528015612d8a578160200160208202803683370190505b50905060005b8251811015612def57828181518110612dab57612dab6141ed565b6020026020010151828281518110612dc557612dc56141ed565b6001600160a01b039092166020928302919091019091015280612de781614219565b915050612d90565b5092915050565b60606001600160a01b038216612e1e5760405162461bcd60e51b81526004016109ae906143c8565b82806001600160401b03811115612e3757612e37613dd2565b604051908082528060200260200182016040528015612e60578160200160208202803683370190505b50604051632aff3bff60e21b81526001600160a01b0385166004820152909250600090309063abfceffc90602401600060405180830381865afa158015612eab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ed3919081019061429b565b905060005b82811015612f99576000878783818110612ef457612ef46141ed565b9050602002016020810190612f099190613991565b905060005b8351811015612f8457816001600160a01b0316848281518110612f3357612f336141ed565b60200260200101516001600160a01b031603612f72576001868481518110612f5d57612f5d6141ed565b91151560209283029190910190910152612f84565b80612f7c81614219565b915050612f0e565b50508080612f9190614219565b915050612ed8565b5050509392505050565b600080612faf84610b2c565b6040516370a0823160e01b81526001600160a01b0385811660048301529192506000918316906370a0823190602401602060405180830381865afa158015612ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301f9190614232565b90506000826001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613061573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130859190614232565b9050670de0b6b3a764000061309a82846142ec565b61233f9190614329565b60008060006130b284610b2c565b90506000816001600160a01b031663f8f9da286040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121e3573d6000803e3d6000fd5b60008061310084610b2c565b6040516305eff7ef60e21b81526001600160a01b038581166004830152919250908216906317bfdfbc906024016020604051808303816000875af1158015610938573d6000803e3d6000fd5b613154613586565b6001600160a01b03811661317e57604051631e4fbdf760e01b8152600060048201526024016109ae565b613187816135b3565b50565b60405163056f7d1d60e31b81526001600160a01b038316600482015260009081903090632b7be8e890602401602060405180830381865afa9250505080156131ef575060408051601f3d908101601f191682019092526131ec918101906142cf565b60015b6131fd576000915050610960565b50670a688906bd8b0000949350505050565b6060808083806001600160401b0381111561322c5761322c613dd2565b604051908082528060200260200182016040528015613255578160200160208202803683370190505b509350806001600160401b0381111561327057613270613dd2565b604051908082528060200260200182016040528015613299578160200160208202803683370190505b509250806001600160401b038111156132b4576132b4613dd2565b6040519080825280602002602001820160405280156132dd578160200160208202803683370190505b50915060005b818110156134bb5760008787838181106132ff576132ff6141ed565b90506020020160208101906133149190613991565b90506000819050806001600160a01b031663ae9d70b06040518163ffffffff1660e01b8152600401602060405180830381865afa158015613359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061337d9190614232565b86848151811061338f5761338f6141ed565b602002602001018181525050806001600160a01b031663f8f9da286040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133fd9190614232565b85848151811061340f5761340f6141ed565b602090810291909101015260035460405163fc57d4df60e01b81526001600160a01b0384811660048301529091169063fc57d4df90602401602060405180830381865afa158015613464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134889190614232565b87848151811061349a5761349a6141ed565b602002602001018181525050505080806134b390614219565b9150506132e3565b50509250925092565b6002600154036134e757604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6040516001600160a01b038481166024830152838116604483015260648201839052610d149186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050613603565b6040516001600160a01b03838116602483015260448201839052610b2791859182169063a9059cbb90606401613523565b6000546001600160a01b031633146122255760405163118cdaa760e01b81523360048201526024016109ae565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006136186001600160a01b03841683613666565b9050805160001415801561363d57508080602001905181019061363b9190614279565b155b15610b2757604051635274afe760e01b81526001600160a01b03841660048201526024016109ae565b60606129b08383600084600080856001600160a01b0316848660405161368c919061449c565b60006040518083038185875af1925050503d80600081146136c9576040519150601f19603f3d011682016040523d82523d6000602084013e6136ce565b606091505b509150915061233f8683836060826136ee576136e982613735565b6129b0565b815115801561370557506001600160a01b0384163b155b1561372e57604051639996b31560e01b81526001600160a01b03851660048201526024016109ae565b50806129b0565b8051156137455780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b038116811461318757600080fd5b6000806040838503121561378657600080fd5b82356137918161375e565b915060208301356137a18161375e565b809150509250929050565b600081518084526020808501945080840160005b838110156137e55781516001600160a01b0316875295820195908201906001016137c0565b509495945050505050565b600081518084526020808501945080840160005b838110156137e557815187529582019590820190600101613804565b60005b8381101561383b578181015183820152602001613823565b50506000910152565b6000815180845261385c816020860160208601613820565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156138b85782840389526138a6848351613844565b9885019893509084019060010161388e565b5091979650505050505050565b600081518084526020808501945080840160005b838110156137e557815160ff16875295820195908201906001016138d9565b60808152600061390b60808301876137ac565b828103602084015261391d81876137f0565b905082810360408401526139318186613870565b9050828103606084015261394581856138c5565b979650505050505050565b60008060006060848603121561396557600080fd5b83356139708161375e565b925060208401356139808161375e565b929592945050506040919091013590565b6000602082840312156139a357600080fd5b81356129b08161375e565b600080600080608085870312156139c457600080fd5b84356139cf8161375e565b935060208501356139df8161375e565b92506040850135915060608501356139f68161375e565b939692955090935050565b600080600060408486031215613a1657600080fd5b8335613a218161375e565b925060208401356001600160401b0380821115613a3d57600080fd5b818601915086601f830112613a5157600080fd5b813581811115613a6057600080fd5b8760208260061b8501011115613a7557600080fd5b6020830194508093505050509250925092565b604081526000613a9b60408301856137ac565b6020838203818501528185518084528284019150828160051b85010183880160005b83811015613aeb57601f19878403018552613ad9838351613844565b94860194925090850190600101613abd565b50909998505050505050505050565b600080600060608486031215613b0f57600080fd5b8335613b1a8161375e565b9250602084013591506040840135613b318161375e565b809150509250925092565b60008060008060808587031215613b5257600080fd5b8435613b5d8161375e565b93506020850135613b6d8161375e565b92506040850135613b7d8161375e565b9396929550929360600135925050565b60c081526000613ba060c08301896137ac565b8281036020840152613bb281896137ac565b90508281036040840152613bc68188613870565b90508281036060840152613bda8187613870565b90508281036080840152613bee81866138c5565b905082810360a0840152613c0281856137f0565b9998505050505050505050565b6020815260006129b060208301846137ac565b60008083601f840112613c3457600080fd5b5081356001600160401b03811115613c4b57600080fd5b6020830191508360208260051b8501011115613c6657600080fd5b9250929050565b600080600060408486031215613c8257600080fd5b83356001600160401b03811115613c9857600080fd5b613ca486828701613c22565b9094509250506020840135613b318161375e565b604081526000613ccb60408301856137f0565b8281036020840152613cdd81856137f0565b95945050505050565b6020808252825182820181905260009190848201906040850190845b81811015613d20578351151583529284019291840191600101613d02565b50909695505050505050565b83151581526001600160a01b0383166020820152606060408201819052600090613cdd90830184613844565b60008060208385031215613d6b57600080fd5b82356001600160401b03811115613d8157600080fd5b613d8d85828601613c22565b90969095509350505050565b606081526000613dac60608301866137f0565b8281036020840152613dbe81866137f0565b9050828103604084015261233f81856137f0565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613e1057613e10613dd2565b604052919050565b60006001600160401b03821115613e3157613e31613dd2565b5060051b60200190565b600082601f830112613e4c57600080fd5b81516020613e61613e5c83613e18565b613de8565b82815260059290921b84018101918181019086841115613e8057600080fd5b8286015b84811015613ea4578051613e978161375e565b8352918301918301613e84565b509695505050505050565b600082601f830112613ec057600080fd5b81516001600160401b03811115613ed957613ed9613dd2565b613eec601f8201601f1916602001613de8565b818152846020838601011115613f0157600080fd5b613f12826020830160208701613820565b949350505050565b600082601f830112613f2b57600080fd5b81516020613f3b613e5c83613e18565b82815260059290921b84018101918181019086841115613f5a57600080fd5b8286015b84811015613ea45780516001600160401b03811115613f7d5760008081fd5b613f8b8986838b0101613eaf565b845250918301918301613f5e565b805160ff81168114613faa57600080fd5b919050565b600082601f830112613fc057600080fd5b81516020613fd0613e5c83613e18565b82815260059290921b84018101918181019086841115613fef57600080fd5b8286015b84811015613ea45761400481613f99565b8352918301918301613ff3565b600082601f83011261402257600080fd5b81516020614032613e5c83613e18565b82815260059290921b8401810191818101908684111561405157600080fd5b8286015b84811015613ea45780518352918301918301614055565b60008060008060008060c0878903121561408557600080fd5b86516001600160401b038082111561409c57600080fd5b6140a88a838b01613e3b565b975060208901519150808211156140be57600080fd5b6140ca8a838b01613e3b565b965060408901519150808211156140e057600080fd5b6140ec8a838b01613f1a565b9550606089015191508082111561410257600080fd5b61410e8a838b01613f1a565b9450608089015191508082111561412457600080fd5b6141308a838b01613faf565b935060a089015191508082111561414657600080fd5b5061415389828a01614011565b9150509295509295509295565b60408152600061417360408301856137ac565b905060018060a01b03831660208301529392505050565b6000806040838503121561419d57600080fd5b82516001600160401b03808211156141b457600080fd5b6141c086838701614011565b935060208501519150808211156141d657600080fd5b506141e385828601614011565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161422b5761422b614203565b5060010190565b60006020828403121561424457600080fd5b5051919050565b60208082526014908201527313db9b1e481c9bdd5d195c8818d85b8818d85b1b60621b604082015260600190565b60006020828403121561428b57600080fd5b815180151581146129b057600080fd5b6000602082840312156142ad57600080fd5b81516001600160401b038111156142c357600080fd5b61095c84828501613e3b565b6000602082840312156142e157600080fd5b81516129b08161375e565b808202811582820484141761096057610960614203565b8082018082111561096057610960614203565b8181038181111561096057610960614203565b60008261434657634e487b7160e01b600052601260045260246000fd5b500490565b60008060006060848603121561436057600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561438b57600080fd5b81516001600160401b038111156143a157600080fd5b61095c84828501613eaf565b6000602082840312156143bf57600080fd5b6129b082613f99565b60208082526026908201527f56656e7573476174657761793a207a65726f2061646472657373206e6f7420616040820152651b1b1bddd95960d21b606082015260800190565b6000602080838503121561442157600080fd5b82516001600160401b0381111561443757600080fd5b8301601f8101851361444857600080fd5b8051614456613e5c82613e18565b81815260059190911b8201830190838101908783111561447557600080fd5b928401925b8284101561394557835161448d8161375e565b8252928401929084019061447a565b600082516144ae818460208701613820565b919091019291505056fea2646970667358221220481d4fe027fb5f9624cdf7ff5dbfafee87391307341535e5940ea19ac99c35c164736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "borrow(address,address,uint256)": {
        "params": {
          "amount": "The amount to borrow",
          "token": "The underlying token to borrow",
          "user": "The account to borrow for"
        }
      },
      "checkMembership(address,address)": {
        "params": {
          "account": "The account to check",
          "vToken": "The vToken market to check"
        },
        "returns": {
          "_0": "True if the account has entered the market"
        }
      },
      "deposit(address,address,uint256)": {
        "params": {
          "amount": "The amount to supply",
          "token": "The underlying token to supply",
          "user": "The account to supply for"
        }
      },
      "getAccountLiquidity(address)": {
        "params": {
          "account": "The address to check"
        },
        "returns": {
          "_0": "error Error code (0=success, otherwise a failure)",
          "_1": "liquidity The USD value borrowable by the account",
          "_2": "shortfall The USD value of collateral needed to meet obligations"
        }
      },
      "getAllMarkets()": {
        "returns": {
          "_0": "A list of all vToken addresses"
        }
      },
      "getAllVenusMarkets()": {
        "details": "This function returns arrays of basic information about all Venus markets",
        "returns": {
          "decimals": "Array of token decimals",
          "names": "Array of token names",
          "symbols": "Array of token symbols",
          "tokens": "Array of underlying token addresses",
          "vTokens": "Array of vToken addresses"
        }
      },
      "getAssetsIn(address)": {
        "params": {
          "account": "The account to check"
        },
        "returns": {
          "_0": "A list of vToken addresses the account has entered"
        }
      },
      "getBalance(address,address)": {
        "params": {
          "token": "The underlying token",
          "user": "The account to check"
        },
        "returns": {
          "_0": "The user's supply balance"
        }
      },
      "getBorrowBalance(address,address)": {
        "params": {
          "token": "The underlying token",
          "user": "The account to check"
        },
        "returns": {
          "_0": "The user's borrow balance"
        }
      },
      "getBorrowRate(address)": {
        "params": {
          "token": "The underlying token"
        },
        "returns": {
          "_0": "The borrow rate and a boolean indicating success"
        }
      },
      "getCollateralStatus(address[],address)": {
        "params": {
          "account": "The user account to check",
          "vTokens": "Array of vToken addresses to check"
        },
        "returns": {
          "isCollateral": "Array of booleans indicating if token is used as collateral"
        }
      },
      "getEncodedCollateralApprovals(address,(address,uint256)[])": {
        "details": "For Venus, this involves approving token transfers to vToken contracts",
        "params": {
          "collaterals": "The collaterals to approve",
          "token": "The token to borrow (not used in this implementation)"
        },
        "returns": {
          "data": "Array of encoded function call data",
          "target": "Array of target contract addresses"
        }
      },
      "getEncodedDebtApproval(address,uint256,address)": {
        "details": "For Venus, this involves checking if delegate approval is needed and entering the market",
        "params": {
          "amount": "The amount to borrow (not used in this implementation)",
          "token": "The token to borrow",
          "user": "The user address to check for delegate approval"
        },
        "returns": {
          "data": "Array of encoded function call data",
          "target": "Array of target contract addresses"
        }
      },
      "getEncodedDelegateApproval()": {
        "returns": {
          "data": "The encoded call data for updateDelegate function",
          "shouldApprove": "Whether the user should approve the delegate",
          "target": "The comptroller address"
        }
      },
      "getInboundCollateralActions(address,(address,uint256)[])": {
        "details": "For Venus, users need to enter markets for each collateral they want to use",
        "params": {
          "collaterals": "The collaterals to use",
          "token": "The token to borrow"
        },
        "returns": {
          "data": "Array of encoded function call data",
          "target": "Array of target contract addresses"
        }
      },
      "getLtv(address,address)": {
        "details": "In Venus, the LTV is controlled by the Comptroller and is protocol-wide",
        "params": {
          "token": "The token to check LTV for",
          "user": "The user address"
        },
        "returns": {
          "_0": "ltv The loan-to-value ratio (percentage multiplied by 1e18)"
        }
      },
      "getMarketRates(address[])": {
        "params": {
          "vTokens": "Array of vToken addresses to query"
        },
        "returns": {
          "borrowRates": "Array of borrow rates per block",
          "prices": "Array of token prices (8 decimals precision)",
          "supplyRates": "Array of supply rates per block"
        }
      },
      "getPossibleCollaterals(address,address)": {
        "details": "In Venus, any supported market can potentially be collateral",
        "params": {
          "token": "The underlying token (not used in Venus implementation)",
          "user": "The user address to check balances for"
        },
        "returns": {
          "balances": "Array of user balances for each collateral",
          "collateralAddresses": "Array of possible collateral token addresses",
          "decimals": "Array of token decimals",
          "symbols": "Array of token symbols"
        }
      },
      "getSupplyRate(address)": {
        "params": {
          "token": "The underlying token"
        },
        "returns": {
          "_0": "The supply rate and a boolean indicating success"
        }
      },
      "getSupportedCollaterals(address)": {
        "details": "In Venus, all markets can be used as collateral for any other market",
        "params": {
          "market": "The market token address"
        },
        "returns": {
          "collateralAddresses": "Array of collateral token addresses supported for this market"
        }
      },
      "getUserBalances(address[],address)": {
        "params": {
          "account": "The user account to check balances for",
          "vTokens": "Array of vToken addresses to query"
        },
        "returns": {
          "balances": "Array of user supply balances (in underlying token)",
          "borrowBalances": "Array of user borrow balances"
        }
      },
      "getVTokenForUnderlying(address)": {
        "details": "Iterates through all markets to find the matching vToken",
        "params": {
          "underlyingToken": "The underlying token address"
        },
        "returns": {
          "_0": "The vToken address"
        }
      },
      "isCollateralSupported(address,address)": {
        "details": "In Venus, any market can be used as collateral for any other market",
        "params": {
          "collateral": "The collateral token address",
          "market": "The market token address"
        },
        "returns": {
          "isSupported": "True if the collateral is supported for the market"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "repay(address,address,uint256)": {
        "params": {
          "amount": "The amount to repay",
          "token": "The underlying token to repay",
          "user": "The account whose debt to repay"
        }
      },
      "setComptroller(address)": {
        "params": {
          "_comptroller": "The new comptroller address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(address,address,uint256)": {
        "notice": "Borrow tokens from the Venus protocol"
      },
      "checkMembership(address,address)": {
        "notice": "Check if an account has entered a specific market"
      },
      "deposit(address,address,uint256)": {
        "notice": "Supply assets to the Venus protocol (implements IGateway.deposit)"
      },
      "getAccountLiquidity(address)": {
        "notice": "Gets account liquidity information"
      },
      "getAllMarkets()": {
        "notice": "Get all available markets in Venus protocol"
      },
      "getAllVenusMarkets()": {
        "notice": "Get basic details for all Venus markets"
      },
      "getAssetsIn(address)": {
        "notice": "Get all markets a user has entered"
      },
      "getBalance(address,address)": {
        "notice": "Get the supply balance of a token for a user"
      },
      "getBorrowBalance(address,address)": {
        "notice": "Get the borrow balance of a token for a user"
      },
      "getBorrowRate(address)": {
        "notice": "Get the current borrow rate for a token"
      },
      "getCollateralStatus(address[],address)": {
        "notice": "Check which markets are being used as collateral by a user"
      },
      "getEncodedCollateralApprovals(address,(address,uint256)[])": {
        "notice": "Generate encoded call data for approving collateral usage"
      },
      "getEncodedDebtApproval(address,uint256,address)": {
        "notice": "Generate encoded call data for approving debt operations"
      },
      "getEncodedDelegateApproval()": {
        "notice": "Generate encoded call data for the user to approve this contract as a delegate for borrowing"
      },
      "getInboundCollateralActions(address,(address,uint256)[])": {
        "notice": "Get additional actions required for a token when providing collateral in Venus protocol"
      },
      "getLtv(address,address)": {
        "notice": "Get the loan-to-value ratio for a user's position with a specific token"
      },
      "getMarketRates(address[])": {
        "notice": "Get market rates and prices for Venus markets"
      },
      "getPossibleCollaterals(address,address)": {
        "notice": "Get possible collaterals for a borrowing position"
      },
      "getSupplyRate(address)": {
        "notice": "Get the current supply rate for a token"
      },
      "getSupportedCollaterals(address)": {
        "notice": "Get all supported collaterals for a market"
      },
      "getUserBalances(address[],address)": {
        "notice": "Get user balances for Venus markets"
      },
      "getVTokenForUnderlying(address)": {
        "notice": "Find the vToken for a given underlying token address"
      },
      "isCollateralSupported(address,address)": {
        "notice": "Check if a collateral is supported for a market"
      },
      "repay(address,address,uint256)": {
        "notice": "Repay borrowed tokens to the Venus protocol"
      },
      "setComptroller(address)": {
        "notice": "Updates the comptroller address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2312,
        "contract": "contracts/gateways/VenusGateway.sol:VenusGateway",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3827,
        "contract": "contracts/gateways/VenusGateway.sol:VenusGateway",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9742,
        "contract": "contracts/gateways/VenusGateway.sol:VenusGateway",
        "label": "comptroller",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ComptrollerInterface)13153"
      },
      {
        "astId": 9745,
        "contract": "contracts/gateways/VenusGateway.sol:VenusGateway",
        "label": "oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ResilientOracleInterface)13173"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ComptrollerInterface)13153": {
        "encoding": "inplace",
        "label": "contract ComptrollerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ResilientOracleInterface)13173": {
        "encoding": "inplace",
        "label": "contract ResilientOracleInterface",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}