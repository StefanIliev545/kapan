{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/balancer/IVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.20;\n\ninterface IVault {\n    function unlock(bytes calldata data) external returns (bytes memory result);\n    function sendTo(address token, address to, uint256 amount) external;\n    function settle(address token, uint256 amountHint) external returns (uint256 credit);\n}\n"
    },
    "contracts/interfaces/IGateway.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IGateway {\n    function deposit(address token, address user, uint256 amount) external;\n    \n    /**\n     * @notice Borrow tokens from the protocol\n     * @dev Can be called by Router or directly by the user\n     * @param token The token to borrow\n     * @param user The user to borrow for\n     * @param amount The amount to borrow\n     */\n    function borrow(address token, address user, uint256 amount) external;\n    function repay(address token, address user, uint256 amount) external;\n\n    function depositCollateral(address market, address collateral, uint256 amount, address receiver) external;\n    function withdrawCollateral(address market, address collateral, address user, uint256 amount) external returns (address, uint256);\n    \n\n    function getBalance(address token, address user) external view returns (uint256);\n    function getBorrowBalance(address token, address user) external view returns (uint256);\n    function getBorrowBalanceCurrent(address token, address user) external returns (uint256);\n    function getBorrowRate(address token) external view returns (uint256, bool);\n    function getSupplyRate(address token) external view returns (uint256, bool);\n    function getLtv(address token, address user) external view returns (uint256);\n    function getPossibleCollaterals(address token, address user) external view returns (\n        address[] memory collateralAddresses,\n        uint256[] memory balances,\n        string[] memory symbols,\n        uint8[] memory decimals\n    );\n\n    /**\n     * @notice Check if a collateral token is supported for a specific market in this protocol\n     * @param market The address of the market token\n     * @param collateral The address of the collateral token to check\n     * @return isSupported Whether the collateral is supported in the market\n     */\n    function isCollateralSupported(address market, address collateral) external view returns (bool isSupported);\n\n    /**\n     * @notice Get all supported collaterals for a specific market in this protocol\n     * @param market The address of the market token\n     * @return collateralAddresses Array of supported collateral token addresses\n     */\n    function getSupportedCollaterals(address market) external view returns (address[] memory collateralAddresses);\n\n    struct Collateral {\n        address token;\n        uint256 amount;\n    }    \n    function getEncodedCollateralApprovals(address token, Collateral[] calldata collaterals) external view returns (address[] memory target, bytes[] memory data);\n    function getEncodedDebtApproval(address token, uint256 amount, address user) external view returns (address[] memory target, bytes[] memory data);\n    \n    /**\n     * @notice Get additional actions required for a token when providing collateral\n     * @param token The token to borrow\n     * @param collaterals The collaterals to use\n     * @return target Array of target contract addresses\n     * @return data Array of encoded function call data\n     */\n    function getInboundCollateralActions(address token, Collateral[] calldata collaterals) external view returns (address[] memory target, bytes[] memory data);\n}"
    },
    "contracts/RouterGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IGateway.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/balancer/IVault.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n\n// Interface for a v2–style flash loan provider (e.g. Balancer v2)\ninterface IFlashLoanProvider {\n    function flashLoan(\n        address receiver,\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        bytes calldata userData\n    ) external;\n}\n\ncontract RouterGateway is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // Mapping from protocol name to gateway contract\n    mapping(string => IGateway) public gateways;\n\n    IVault public balancerV3Vault;\n    IFlashLoanProvider public balancerV2Vault;\n\n    // State variable to track if flash loan is enabled\n    bool private flashLoanEnabled;\n\n    constructor(IVault v3vault, IFlashLoanProvider v2Vault, address owner) Ownable(owner) {\n        balancerV3Vault = v3vault;\n        balancerV2Vault = v2Vault;\n    }\n\n    function addGateway(string calldata protocolName, address gateway) external onlyOwner {\n        gateways[protocolName] = IGateway(gateway);\n    }\n\n    function supplyWithPermit(\n        string calldata protocolName,\n        address token,\n        address user,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external nonReentrant {\n        // Get the gateway for the specified protocol\n        IGateway gateway = gateways[protocolName];\n        require(address(gateway) != address(0), \"Protocol not supported\");\n\n        // Execute the permit\n        IERC20Permit(token).permit(\n            msg.sender,\n            address(this),\n            amount,\n            deadline,\n            v,\n            r,\n            s\n        );\n\n        // Transfer tokens from user to this contract (no need for approval now)\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n\n        // Approve gateway to spend tokens\n        IERC20(token).approve(address(gateway), amount);\n\n        // Forward deposit call to the appropriate gateway\n        gateway.deposit(token, user, amount);\n    }\n\n    function supply(\n        string calldata protocolName,\n        address token,\n        address user,\n        uint256 amount\n    ) external nonReentrant {\n        // Get the gateway for the specified protocol\n        IGateway gateway = gateways[protocolName];\n        require(address(gateway) != address(0), \"Protocol not supported\");\n\n        // Transfer tokens from user to this contract\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n\n        // Approve gateway to spend tokens\n        IERC20(token).approve(address(gateway), amount);\n\n        // Forward deposit call to the appropriate gateway\n        gateway.deposit(token, user, amount);\n    }\n\n    function repay(\n        string calldata protocolName,\n        address token,\n        address user,\n        uint256 amount\n    ) external nonReentrant {\n        // Get the gateway for the specified protocol\n        IGateway gateway = gateways[protocolName];\n        require(address(gateway) != address(0), \"Protocol not supported\");\n\n        // Transfer tokens from user to this contract\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n\n        // Approve gateway to spend tokens\n        IERC20(token).approve(address(gateway), amount);\n\n        // Forward repay call to the appropriate gateway\n        gateway.repay(token, user, amount);\n    }\n\n    function getBalance(\n        string calldata protocolName,\n        address token,\n        address user\n    ) external view returns (uint256) {\n        // Get the gateway for the specified protocol\n        IGateway gateway = gateways[protocolName];\n        require(address(gateway) != address(0), \"Protocol not supported\");\n\n        // Forward balance call to the appropriate gateway\n        return gateway.getBalance(token, user);\n    }\n\n    function getBorrowBalance(\n        string calldata protocolName,\n        address token,\n        address user\n    ) external view returns (uint256) {\n        IGateway gateway = gateways[protocolName];\n        require(address(gateway) != address(0), \"Protocol not supported\");\n        return gateway.getBorrowBalance(token, user);\n    }\n    \n    // -------------------------------------------------------------------------\n    // Common Debt Moving Logic (Flash Loan–agnostic)\n    // -------------------------------------------------------------------------\n    //\n    // This internal function is completely unaware of any flash loan details.\n    // It simply moves debt from one protocol to another:\n    // 1. Repays the debt on the \"from\" protocol.\n    // 2. Withdraws collateral from the \"from\" protocol.\n    // 3. Deposits collateral into the \"to\" protocol.\n    // 4. Borrows the same amount on the \"to\" protocol.\n    //\n    function _moveDebtCommon(\n        address user,\n        address debtToken,\n        uint256 debtAmount,\n        IGateway.Collateral[] memory collaterals,\n        string memory fromProtocol,\n        string memory toProtocol\n    ) internal {\n        IGateway fromGateway = gateways[fromProtocol];\n        IGateway toGateway = gateways[toProtocol];\n        require(address(fromGateway) != address(0), \"From protocol not supported\");\n        require(address(toGateway) != address(0), \"To protocol not supported\");\n\n        // Repay the debt on the \"from\" protocol\n        {\n            IERC20(debtToken).approve(address(fromGateway), debtAmount);\n            uint256 borrowBalanceBefore = fromGateway.getBorrowBalanceCurrent(debtToken, user);\n            fromGateway.repay(debtToken, user, debtAmount);\n            uint256 borrowBalanceAfter = fromGateway.getBorrowBalanceCurrent(debtToken, user);\n            require(borrowBalanceAfter < borrowBalanceBefore, \"Repayment did not reduce borrow balance\");\n        }\n        // For each collateral asset, withdraw then deposit into the target protocol.\n        for (uint i = 0; i < collaterals.length; i++) {\n            (address underlyingReceived, uint256 amountReceived) = fromGateway.withdrawCollateral(debtToken, collaterals[i].token, user, collaterals[i].amount);\n            IERC20(underlyingReceived).approve(address(toGateway), amountReceived);\n            toGateway.depositCollateral(debtToken, underlyingReceived, amountReceived, user);\n        }\n\n        // Borrow the debt on the \"to\" protocol.\n        toGateway.borrow(debtToken, user, debtAmount);\n    }\n\n    /**\n     * @notice Modifier to ensure flash loan callbacks can only be triggered internally\n     */\n    modifier enableFlashLoan() {\n        flashLoanEnabled = true;\n        _;\n        flashLoanEnabled = false;\n    }\n\n    /**\n     * @notice Modifier to verify flash loan was triggered internally\n     */\n    modifier flashLoanOnly() {\n        require(flashLoanEnabled, \"Flash loan not enabled\");\n        _;\n    }\n\n    /**\n     * @notice Check if a collateral token is supported in the target protocol\n     * @param protocolName The name of the protocol to check\n     * @param market The address of the market token\n     * @param collateral The address of the collateral token to check\n     * @return isSupported Whether the collateral is supported in the protocol\n     */\n    function isCollateralSupported(\n        string calldata protocolName,\n        address market,\n        address collateral\n    ) external view returns (bool isSupported) {\n        IGateway gateway = gateways[protocolName];\n        require(address(gateway) != address(0), \"Protocol not supported\");\n        \n        return gateway.isCollateralSupported(market, collateral);\n    }\n    \n    /**\n     * @notice Get all supported collaterals for a specific market in a protocol\n     * @param protocolName The name of the protocol to check\n     * @param market The address of the market token\n     * @return collateralAddresses Array of supported collateral token addresses\n     */\n    function getSupportedCollaterals(\n        string calldata protocolName,\n        address market\n    ) external view returns (address[] memory collateralAddresses) {\n        IGateway gateway = gateways[protocolName];\n        require(address(gateway) != address(0), \"Protocol not supported\");\n        \n        return gateway.getSupportedCollaterals(market);\n    }\n    \n    /**\n     * @notice Check if a collateral can be moved from one protocol to another\n     * @param fromProtocol The name of the source protocol\n     * @param toProtocol The name of the target protocol\n     * @param market The address of the market token\n     * @param collateral The address of the collateral token to check\n     * @return canMove Whether the collateral can be moved between protocols\n     */\n    function canMoveCollateral(\n        string calldata fromProtocol,\n        string calldata toProtocol,\n        address market,\n        address collateral\n    ) external view returns (bool canMove) {\n        IGateway fromGateway = gateways[fromProtocol];\n        IGateway toGateway = gateways[toProtocol];\n        \n        require(address(fromGateway) != address(0), \"From protocol not supported\");\n        require(address(toGateway) != address(0), \"To protocol not supported\");\n        \n        // Collateral must be supported in both protocols\n        return fromGateway.isCollateralSupported(market, collateral) && \n               toGateway.isCollateralSupported(market, collateral);\n    }\n\n    // -------------------------------------------------------------------------\n    // Flash Loan Wrapper for Balancer V2\n    // -------------------------------------------------------------------------\n    //\n    // In a Balancer v2 flash loan the tokens are transferred (or \"pulled\") into this\n    // contract as soon as they are approved. This function decodes the userData,\n    // calls the common debt move function, then repays the principal plus fee.\n    //\n    function receiveFlashLoan(\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256[] calldata feeAmounts,\n        bytes calldata userData\n    ) external flashLoanOnly {\n        require(msg.sender == address(balancerV2Vault), \"Unauthorized flash loan provider\");\n\n        // Decode userData to extract move debt parameters.\n        (\n            address user,\n            address debtToken,\n            uint256 debtAmount,\n            IGateway.Collateral[] memory collaterals,\n            string memory fromProtocol,\n            string memory toProtocol\n        ) = abi.decode(userData, (address, address, uint256, IGateway.Collateral[], string, string));\n\n        require(feeAmounts.length == 1, \"Balancer V2 flash loan fee amount length mismatch\");\n        require(feeAmounts[0] == 0, \"Flash loans are free\");\n\n        // Execute the common debt move logic.\n        _moveDebtCommon(user, debtToken, debtAmount, collaterals, fromProtocol, toProtocol);\n\n        // Repay the flash loan provider (principal + fee).\n        uint256 totalRepayment = debtAmount + feeAmounts[0];\n        IERC20(debtToken).safeTransfer(address(balancerV2Vault), totalRepayment);\n    }\n\n    // -------------------------------------------------------------------------\n    // Flash Loan Wrapper for Balancer V3\n    // -------------------------------------------------------------------------\n    //\n    // For Balancer v3, tokens are delivered via a call to sendTo.\n    // This wrapper assumes that the tokens have been sent before the call.\n    // After calling the common move debt function, it repays the flash loan,\n    // then calls settle if required.\n    //\n    function receiveFlashLoanV3(\n        address user,\n        address debtToken,\n        uint256 debtAmount,\n        IGateway.Collateral[] memory collaterals,\n        string calldata fromProtocol,\n        string calldata toProtocol\n    ) external flashLoanOnly {\n        require(msg.sender == address(balancerV3Vault), \"Unauthorized flash loan provider\");\n\n        // Send the debt token to this contract.\n        balancerV3Vault.sendTo(debtToken, address(this), debtAmount);\n\n        // Execute the common debt move logic.\n        _moveDebtCommon(user, debtToken, debtAmount, collaterals, fromProtocol, toProtocol);\n\n        // Repay the flash loan provider (principal only, assuming no fee).\n        IERC20(debtToken).safeTransfer(address(balancerV3Vault), debtAmount);\n\n        // Optionally settle the flash loan if required by the provider.\n        balancerV3Vault.settle(debtToken, debtAmount);\n    }\n\n\n   // -------------------------------------------------------------------------\n    // moveDebt: Supports both flash loan providers\n    // -------------------------------------------------------------------------\n    //\n    // The caller provides the flashLoanVersion (\"v2\" or \"v3\").\n    // Based on this parameter, the function encodes the debt move parameters\n    // appropriately and calls either the v2 flashLoan function or the v3 unlock function.\n    //\n    function moveDebt(\n        address user,\n        address debtToken,\n        uint256 debtAmount,\n        bool repayAll,\n        IGateway.Collateral[] memory collaterals,\n        string calldata fromProtocol,\n        string calldata toProtocol,\n        string calldata flashLoanVersion\n    ) external nonReentrant enableFlashLoan {\n        require(debtAmount > 0, \"Debt amount must be greater than zero\");\n        require(user == msg.sender, \"User must be the caller\");\n\n        if (repayAll) {\n            IGateway fromGateway = gateways[fromProtocol];\n            require(address(fromGateway) != address(0), \"From protocol not supported\");\n            debtAmount = fromGateway.getBorrowBalanceCurrent(debtToken, user);\n        }\n\n        if (keccak256(bytes(flashLoanVersion)) == keccak256(bytes(\"v2\"))) {\n            bytes memory data = abi.encode(user, debtToken, debtAmount, collaterals, fromProtocol, toProtocol);\n            IERC20[] memory tokens = new IERC20[](1);\n            tokens[0] = IERC20(debtToken);\n            uint256[] memory amounts = new uint256[](1);\n            amounts[0] = debtAmount;\n            balancerV2Vault.flashLoan(address(this), tokens, amounts, data);\n        } else if (keccak256(bytes(flashLoanVersion)) == keccak256(bytes(\"v3\"))) {\n            bytes memory data = abi.encodeWithSelector(\n                this.receiveFlashLoanV3.selector,\n                user,\n                debtToken,\n                debtAmount,\n                collaterals,\n                fromProtocol,\n                toProtocol\n            );\n            IVault(address(balancerV3Vault)).unlock(data);\n        } else {\n            revert(\"Unsupported flash loan version\");\n        }\n    }\n\n    /**\n     * @notice Move supplied assets from one protocol to another\n     * @param user The user address whose supply is being moved\n     * @param collaterals Array of collateral tokens and amounts to move\n     * @param fromProtocol The source protocol name\n     * @param toProtocol The destination protocol name\n     */\n    function moveSupply(\n        address user,\n        IGateway.Collateral[] memory collaterals,\n        string calldata fromProtocol,\n        string calldata toProtocol\n    ) external nonReentrant {\n        require(user == msg.sender, \"User must be the caller\");\n        \n        // Get the gateways for both protocols\n        IGateway fromGateway = gateways[fromProtocol];\n        IGateway toGateway = gateways[toProtocol];\n        \n        require(address(fromGateway) != address(0), \"From protocol not supported\");\n        require(address(toGateway) != address(0), \"To protocol not supported\");\n        // Iterate through each collateral and move it\n        for (uint256 i = 0; i < collaterals.length; i++) {\n            IGateway.Collateral memory collateral = collaterals[i];\n\n            // If amount is 0, move all available balance for this collateral\n            if (collateral.amount == 0) {\n                collateral.amount = fromGateway.getBalance(collateral.token, user);\n                require(collateral.amount > 0, \"No balance to move\");\n            }\n\n            // Step 1: Withdraw collateral from source protocol\n            // We use withdrawCollateral as it allows withdrawing supplied assets\n            // The market parameter is not used in most protocols, so we pass token as both market and collateral\n            (address receivedToken, uint256 receivedAmount) = fromGateway.withdrawCollateral(\n                collateral.token,\n                collateral.token,\n                user,\n                collateral.amount\n            );\n\n            // Step 2: Deposit the received tokens to target protocol\n            // Approve the target gateway to spend the tokens\n            IERC20(receivedToken).approve(address(toGateway), receivedAmount);\n\n            // Deposit to the target protocol\n            toGateway.deposit(receivedToken, user, receivedAmount);\n        }\n    }\n\n    function getPossibleCollaterals(\n        address token, \n        string calldata protocolName, \n        address user\n    ) external view returns (\n        address[] memory collateralAddresses,\n        uint256[] memory balances,\n        string[] memory symbols,\n        uint8[] memory decimals\n    ) {\n        IGateway gateway = gateways[protocolName];\n        require(address(gateway) != address(0), \"Protocol not supported\");\n        return gateway.getPossibleCollaterals(token, user);\n    }\n\n    function getEncodedDebtApproval(string calldata protocolName, address debtToken, uint256 debtAmount, address user) external view returns (address[] memory, bytes[] memory) {\n        IGateway gateway = gateways[protocolName];\n        require(address(gateway) != address(0), \"Protocol not supported\");\n        return gateway.getEncodedDebtApproval(debtToken, debtAmount, user);\n    }\n\n    /**\n     * @notice Get approvals for collateral movement from source protocol\n     * @param debtToken The token being borrowed\n     * @param collaterals The collaterals being moved\n     * @param fromProtocol The protocol moving from \n     * @return Array of target addresses and encoded function call data\n     */\n    function getFromProtocolApprovalsForMove(\n        address debtToken, \n        IGateway.Collateral[] calldata collaterals, \n        string calldata fromProtocol\n    ) external view returns (address[] memory, bytes[] memory) {\n        IGateway fromGateway = gateways[fromProtocol];\n        require(address(fromGateway) != address(0), \"From protocol not supported\");\n        return fromGateway.getEncodedCollateralApprovals(debtToken, collaterals);\n    }\n    \n    /**\n     * @notice Get inbound collateral actions from destination protocol\n     * @param debtToken The token being borrowed\n     * @param collaterals The collaterals being moved\n     * @param toProtocol The protocol moving to\n     * @return Array of target addresses and encoded function call data\n     */\n    function getToProtocolInboundActions(\n        address debtToken, \n        IGateway.Collateral[] calldata collaterals, \n        string calldata toProtocol\n    ) external view returns (address[] memory, bytes[] memory) {\n        IGateway toGateway = gateways[toProtocol];\n        require(address(toGateway) != address(0), \"To protocol not supported\");\n        return toGateway.getInboundCollateralActions(debtToken, collaterals);\n    }\n\n    function getToProtocolApprovalsForMove(\n        address debtToken,\n        uint256 debtAmount,\n        string calldata toProtocol,\n        address user\n    ) external view returns (address[] memory, bytes[] memory) {\n        // For the destination protocol, we need to get debt approval\n        IGateway toGateway = gateways[toProtocol];\n        require(address(toGateway) != address(0), \"Protocol not supported\");\n        \n        return toGateway.getEncodedDebtApproval(debtToken, debtAmount, user);\n    }\n\n    /**\n     * @notice Check if a token can be moved from one protocol to another\n     * @param fromProtocol The name of the source protocol\n     * @param toProtocol The name of the target protocol\n     * @param token The token to check\n     * @param user The user address\n     * @return canMove Whether the token can be moved between protocols\n     * @return fromBalance The user's balance in the source protocol\n     */\n    function canMoveSupply(\n        string calldata fromProtocol,\n        string calldata toProtocol,\n        address token,\n        address user\n    ) external view returns (bool canMove, uint256 fromBalance) {\n        IGateway fromGateway = gateways[fromProtocol];\n        IGateway toGateway = gateways[toProtocol];\n        \n        if (address(fromGateway) == address(0) || address(toGateway) == address(0)) {\n            return (false, 0);\n        }\n        \n        // Check if user has a balance in the source protocol\n        fromBalance = fromGateway.getBalance(token, user);\n        \n        // Both protocols must support the token\n        return (fromBalance > 0, fromBalance);\n    }\n\n    /**\n     * @notice Get the balance of a token in a flash loan provider\n     * @param token The token address to check balance for\n     * @param flashLoanVersion The flash loan provider version (\"v2\" or \"v3\")\n     * @return The token balance in the flash loan provider\n     */\n    function getFlashLoanProviderBalance(address token, string calldata flashLoanVersion) external view returns (uint256) {\n        if (keccak256(bytes(flashLoanVersion)) == keccak256(bytes(\"v2\"))) {\n            return IERC20(token).balanceOf(address(balancerV2Vault));\n        } else if (keccak256(bytes(flashLoanVersion)) == keccak256(bytes(\"v3\"))) {\n            return IERC20(token).balanceOf(address(balancerV3Vault));\n        } else {\n            revert(\"Unsupported flash loan version\");\n        }\n    }\n\n    /**\n     * @notice Borrow tokens from a protocol\n     * @param protocolName The name of the protocol to borrow from\n     * @param token The token to borrow\n     * @param user The user to borrow for\n     * @param amount The amount to borrow\n     */\n    function borrow(\n        string calldata protocolName,\n        address token,\n        address user,\n        uint256 amount\n    ) external nonReentrant {\n        // Get the gateway for the specified protocol\n        IGateway gateway = gateways[protocolName];\n        require(address(gateway) != address(0), \"Protocol not supported\");\n        require(user == msg.sender, \"Can only borrow for yourself\");\n\n        // Forward borrow call to the appropriate gateway\n        gateway.borrow(token, user, amount);\n\n        // Transfer borrowed tokens to the user\n        IERC20(token).safeTransfer(user, amount);\n    }\n} "
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}