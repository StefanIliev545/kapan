/*! For license information please see 9596.d9087b6d.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_se_2_nextjs=self.webpackChunk_se_2_nextjs||[]).push([[9596],{"./node_modules/@walletconnect/universal-provider/node_modules/@noble/curves/esm/secp256k1.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{secp256k1:()=>secp256k1});var abstract_utils_namespaceObject={};function anumber(n){if(!Number.isSafeInteger(n)||n<0)throw new Error("positive integer expected, got "+n)}function _assert_abytes(b,...lengths){if(!function isBytes(a){return a instanceof Uint8Array||ArrayBuffer.isView(a)&&"Uint8Array"===a.constructor.name}(b))throw new Error("Uint8Array expected");if(lengths.length>0&&!lengths.includes(b.length))throw new Error("Uint8Array expected of length "+lengths+", got length="+b.length)}function aexists(instance,checkFinished=!0){if(instance.destroyed)throw new Error("Hash instance has been destroyed");if(checkFinished&&instance.finished)throw new Error("Hash#digest() has already been called")}__webpack_require__.r(abstract_utils_namespaceObject),__webpack_require__.d(abstract_utils_namespaceObject,{aK:()=>utils_aInRange,e8:()=>abool,DO:()=>utils_abytes,dJ:()=>bitLen,OG:()=>bitMask,My:()=>utils_bytesToHex,Ph:()=>utils_bytesToNumberBE,lX:()=>utils_bytesToNumberLE,Id:()=>abstract_utils_concatBytes,fg:()=>createHmacDrbg,qj:()=>utils_ensureBytes,aT:()=>utils_hexToBytes,r4:()=>utils_inRange,aY:()=>abstract_utils_isBytes,x:()=>memoized,lq:()=>utils_numberToBytesBE,z:()=>numberToBytesLE,zW:()=>numberToHexUnpadded,Q5:()=>validateObject});const crypto_crypto="object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0;function createView(arr){return new DataView(arr.buffer,arr.byteOffset,arr.byteLength)}function rotr(word,shift){return word<<32-shift|word>>>shift}function toBytes(data){return"string"==typeof data&&(data=function utf8ToBytes(str){if("string"!=typeof str)throw new Error("utf8ToBytes expected string, got "+typeof str);return new Uint8Array((new TextEncoder).encode(str))}(data)),_assert_abytes(data),data}class Hash{clone(){return this._cloneInto()}}function utils_wrapConstructor(hashCons){const hashC=msg=>hashCons().update(toBytes(msg)).digest(),tmp=hashCons();return hashC.outputLen=tmp.outputLen,hashC.blockLen=tmp.blockLen,hashC.create=()=>hashCons(),hashC}function utils_randomBytes(bytesLength=32){if(crypto_crypto&&"function"==typeof crypto_crypto.getRandomValues)return crypto_crypto.getRandomValues(new Uint8Array(bytesLength));if(crypto_crypto&&"function"==typeof crypto_crypto.randomBytes)return crypto_crypto.randomBytes(bytesLength);throw new Error("crypto.getRandomValues must be defined")}function Chi(a,b,c){return a&b^~a&c}function Maj(a,b,c){return a&b^a&c^b&c}class HashMD extends Hash{constructor(blockLen,outputLen,padOffset,isLE){super(),this.blockLen=blockLen,this.outputLen=outputLen,this.padOffset=padOffset,this.isLE=isLE,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(blockLen),this.view=createView(this.buffer)}update(data){aexists(this);const{view,buffer,blockLen}=this,len=(data=toBytes(data)).length;for(let pos=0;pos<len;){const take=Math.min(blockLen-this.pos,len-pos);if(take===blockLen){const dataView=createView(data);for(;blockLen<=len-pos;pos+=blockLen)this.process(dataView,pos);continue}buffer.set(data.subarray(pos,pos+take),this.pos),this.pos+=take,pos+=take,this.pos===blockLen&&(this.process(view,0),this.pos=0)}return this.length+=data.length,this.roundClean(),this}digestInto(out){aexists(this),function aoutput(out,instance){_assert_abytes(out);const min=instance.outputLen;if(out.length<min)throw new Error("digestInto() expects output buffer of length at least "+min)}(out,this),this.finished=!0;const{buffer,view,blockLen,isLE}=this;let{pos}=this;buffer[pos++]=128,this.buffer.subarray(pos).fill(0),this.padOffset>blockLen-pos&&(this.process(view,0),pos=0);for(let i=pos;i<blockLen;i++)buffer[i]=0;!function setBigUint64(view,byteOffset,value,isLE){if("function"==typeof view.setBigUint64)return view.setBigUint64(byteOffset,value,isLE);const _32n=BigInt(32),_u32_max=BigInt(4294967295),wh=Number(value>>_32n&_u32_max),wl=Number(value&_u32_max),h=isLE?4:0,l=isLE?0:4;view.setUint32(byteOffset+h,wh,isLE),view.setUint32(byteOffset+l,wl,isLE)}(view,blockLen-8,BigInt(8*this.length),isLE),this.process(view,0);const oview=createView(out),len=this.outputLen;if(len%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const outLen=len/4,state=this.get();if(outLen>state.length)throw new Error("_sha2: outputLen bigger than state");for(let i=0;i<outLen;i++)oview.setUint32(4*i,state[i],isLE)}digest(){const{buffer,outputLen}=this;this.digestInto(buffer);const res=buffer.slice(0,outputLen);return this.destroy(),res}_cloneInto(to){to||(to=new this.constructor),to.set(...this.get());const{blockLen,buffer,length,finished,destroyed,pos}=this;return to.length=length,to.pos=pos,to.finished=finished,to.destroyed=destroyed,length%blockLen&&to.buffer.set(buffer),to}}const SHA256_K=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),SHA256_IV=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),SHA256_W=new Uint32Array(64);class SHA256 extends HashMD{constructor(){super(64,32,8,!1),this.A=0|SHA256_IV[0],this.B=0|SHA256_IV[1],this.C=0|SHA256_IV[2],this.D=0|SHA256_IV[3],this.E=0|SHA256_IV[4],this.F=0|SHA256_IV[5],this.G=0|SHA256_IV[6],this.H=0|SHA256_IV[7]}get(){const{A,B,C,D,E,F,G,H}=this;return[A,B,C,D,E,F,G,H]}set(A,B,C,D,E,F,G,H){this.A=0|A,this.B=0|B,this.C=0|C,this.D=0|D,this.E=0|E,this.F=0|F,this.G=0|G,this.H=0|H}process(view,offset){for(let i=0;i<16;i++,offset+=4)SHA256_W[i]=view.getUint32(offset,!1);for(let i=16;i<64;i++){const W15=SHA256_W[i-15],W2=SHA256_W[i-2],s0=rotr(W15,7)^rotr(W15,18)^W15>>>3,s1=rotr(W2,17)^rotr(W2,19)^W2>>>10;SHA256_W[i]=s1+SHA256_W[i-7]+s0+SHA256_W[i-16]|0}let{A,B,C,D,E,F,G,H}=this;for(let i=0;i<64;i++){const T1=H+(rotr(E,6)^rotr(E,11)^rotr(E,25))+Chi(E,F,G)+SHA256_K[i]+SHA256_W[i]|0,T2=(rotr(A,2)^rotr(A,13)^rotr(A,22))+Maj(A,B,C)|0;H=G,G=F,F=E,E=D+T1|0,D=C,C=B,B=A,A=T1+T2|0}A=A+this.A|0,B=B+this.B|0,C=C+this.C|0,D=D+this.D|0,E=E+this.E|0,F=F+this.F|0,G=G+this.G|0,H=H+this.H|0,this.set(A,B,C,D,E,F,G,H)}roundClean(){SHA256_W.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const sha256_sha256=utils_wrapConstructor(()=>new SHA256);class HMAC extends Hash{constructor(hash,_key){super(),this.finished=!1,this.destroyed=!1,function ahash(h){if("function"!=typeof h||"function"!=typeof h.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");anumber(h.outputLen),anumber(h.blockLen)}(hash);const key=toBytes(_key);if(this.iHash=hash.create(),"function"!=typeof this.iHash.update)throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const blockLen=this.blockLen,pad=new Uint8Array(blockLen);pad.set(key.length>blockLen?hash.create().update(key).digest():key);for(let i=0;i<pad.length;i++)pad[i]^=54;this.iHash.update(pad),this.oHash=hash.create();for(let i=0;i<pad.length;i++)pad[i]^=106;this.oHash.update(pad),pad.fill(0)}update(buf){return aexists(this),this.iHash.update(buf),this}digestInto(out){aexists(this),_assert_abytes(out,this.outputLen),this.finished=!0,this.iHash.digestInto(out),this.oHash.update(out),this.oHash.digestInto(out),this.destroy()}digest(){const out=new Uint8Array(this.oHash.outputLen);return this.digestInto(out),out}_cloneInto(to){to||(to=Object.create(Object.getPrototypeOf(this),{}));const{oHash,iHash,finished,destroyed,blockLen,outputLen}=this;return to.finished=finished,to.destroyed=destroyed,to.blockLen=blockLen,to.outputLen=outputLen,to.oHash=oHash._cloneInto(to.oHash),to.iHash=iHash._cloneInto(to.iHash),to}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const hmac=(hash,key,message)=>new HMAC(hash,key).update(message).digest();hmac.create=(hash,key)=>new HMAC(hash,key);const _0n=BigInt(0),_1n=BigInt(1),_2n=BigInt(2);function abstract_utils_isBytes(a){return a instanceof Uint8Array||ArrayBuffer.isView(a)&&"Uint8Array"===a.constructor.name}function utils_abytes(item){if(!abstract_utils_isBytes(item))throw new Error("Uint8Array expected")}function abool(title,value){if("boolean"!=typeof value)throw new Error(title+" boolean expected, got "+value)}const utils_hexes=Array.from({length:256},(_,i)=>i.toString(16).padStart(2,"0"));function utils_bytesToHex(bytes){utils_abytes(bytes);let hex="";for(let i=0;i<bytes.length;i++)hex+=utils_hexes[bytes[i]];return hex}function numberToHexUnpadded(num){const hex=num.toString(16);return 1&hex.length?"0"+hex:hex}function hexToNumber(hex){if("string"!=typeof hex)throw new Error("hex string expected, got "+typeof hex);return""===hex?_0n:BigInt("0x"+hex)}const utils_asciis={_0:48,_9:57,A:65,F:70,a:97,f:102};function utils_asciiToBase16(ch){return ch>=utils_asciis._0&&ch<=utils_asciis._9?ch-utils_asciis._0:ch>=utils_asciis.A&&ch<=utils_asciis.F?ch-(utils_asciis.A-10):ch>=utils_asciis.a&&ch<=utils_asciis.f?ch-(utils_asciis.a-10):void 0}function utils_hexToBytes(hex){if("string"!=typeof hex)throw new Error("hex string expected, got "+typeof hex);const hl=hex.length,al=hl/2;if(hl%2)throw new Error("hex string expected, got unpadded hex of length "+hl);const array=new Uint8Array(al);for(let ai=0,hi=0;ai<al;ai++,hi+=2){const n1=utils_asciiToBase16(hex.charCodeAt(hi)),n2=utils_asciiToBase16(hex.charCodeAt(hi+1));if(void 0===n1||void 0===n2){const char=hex[hi]+hex[hi+1];throw new Error('hex string expected, got non-hex character "'+char+'" at index '+hi)}array[ai]=16*n1+n2}return array}function utils_bytesToNumberBE(bytes){return hexToNumber(utils_bytesToHex(bytes))}function utils_bytesToNumberLE(bytes){return utils_abytes(bytes),hexToNumber(utils_bytesToHex(Uint8Array.from(bytes).reverse()))}function utils_numberToBytesBE(n,len){return utils_hexToBytes(n.toString(16).padStart(2*len,"0"))}function numberToBytesLE(n,len){return utils_numberToBytesBE(n,len).reverse()}function utils_ensureBytes(title,hex,expectedLength){let res;if("string"==typeof hex)try{res=utils_hexToBytes(hex)}catch(e){throw new Error(title+" must be hex string or Uint8Array, cause: "+e)}else{if(!abstract_utils_isBytes(hex))throw new Error(title+" must be hex string or Uint8Array");res=Uint8Array.from(hex)}const len=res.length;if("number"==typeof expectedLength&&len!==expectedLength)throw new Error(title+" of length "+expectedLength+" expected, got "+len);return res}function abstract_utils_concatBytes(...arrays){let sum=0;for(let i=0;i<arrays.length;i++){const a=arrays[i];utils_abytes(a),sum+=a.length}const res=new Uint8Array(sum);for(let i=0,pad=0;i<arrays.length;i++){const a=arrays[i];res.set(a,pad),pad+=a.length}return res}const isPosBig=n=>"bigint"==typeof n&&_0n<=n;function utils_inRange(n,min,max){return isPosBig(n)&&isPosBig(min)&&isPosBig(max)&&min<=n&&n<max}function utils_aInRange(title,n,min,max){if(!utils_inRange(n,min,max))throw new Error("expected valid "+title+": "+min+" <= n < "+max+", got "+n)}function bitLen(n){let len;for(len=0;n>_0n;n>>=_1n,len+=1);return len}const bitMask=n=>(_2n<<BigInt(n-1))-_1n,u8n=data=>new Uint8Array(data),u8fr=arr=>Uint8Array.from(arr);function createHmacDrbg(hashLen,qByteLen,hmacFn){if("number"!=typeof hashLen||hashLen<2)throw new Error("hashLen must be a number");if("number"!=typeof qByteLen||qByteLen<2)throw new Error("qByteLen must be a number");if("function"!=typeof hmacFn)throw new Error("hmacFn must be a function");let v=u8n(hashLen),k=u8n(hashLen),i=0;const reset=()=>{v.fill(1),k.fill(0),i=0},h=(...b)=>hmacFn(k,v,...b),reseed=(seed=u8n())=>{k=h(u8fr([0]),seed),v=h(),0!==seed.length&&(k=h(u8fr([1]),seed),v=h())},gen=()=>{if(i++>=1e3)throw new Error("drbg: tried 1000 values");let len=0;const out=[];for(;len<qByteLen;){v=h();const sl=v.slice();out.push(sl),len+=v.length}return abstract_utils_concatBytes(...out)};return(seed,pred)=>{let res;for(reset(),reseed(seed);!(res=pred(gen()));)reseed();return reset(),res}}const validatorFns={bigint:val=>"bigint"==typeof val,function:val=>"function"==typeof val,boolean:val=>"boolean"==typeof val,string:val=>"string"==typeof val,stringOrUint8Array:val=>"string"==typeof val||abstract_utils_isBytes(val),isSafeInteger:val=>Number.isSafeInteger(val),array:val=>Array.isArray(val),field:(val,object)=>object.Fp.isValid(val),hash:val=>"function"==typeof val&&Number.isSafeInteger(val.outputLen)};function validateObject(object,validators,optValidators={}){const checkField=(fieldName,type,isOptional)=>{const checkVal=validatorFns[type];if("function"!=typeof checkVal)throw new Error("invalid validator function");const val=object[fieldName];if(!(isOptional&&void 0===val||checkVal(val,object)))throw new Error("param "+String(fieldName)+" is invalid. Expected "+type+", got "+val)};for(const[fieldName,type]of Object.entries(validators))checkField(fieldName,type,!1);for(const[fieldName,type]of Object.entries(optValidators))checkField(fieldName,type,!0);return object}function memoized(fn){const map=new WeakMap;return(arg,...args)=>{const val=map.get(arg);if(void 0!==val)return val;const computed=fn(arg,...args);return map.set(arg,computed),computed}}const modular_0n=BigInt(0),modular_1n=BigInt(1),modular_2n=BigInt(2),_3n=BigInt(3),_4n=BigInt(4),_5n=BigInt(5),_8n=BigInt(8);function modular_mod(a,b){const result=a%b;return result>=modular_0n?result:b+result}function pow(num,power,modulo){if(power<modular_0n)throw new Error("invalid exponent, negatives unsupported");if(modulo<=modular_0n)throw new Error("invalid modulus");if(modulo===modular_1n)return modular_0n;let res=modular_1n;for(;power>modular_0n;)power&modular_1n&&(res=res*num%modulo),num=num*num%modulo,power>>=modular_1n;return res}function pow2(x,power,modulo){let res=x;for(;power-- >modular_0n;)res*=res,res%=modulo;return res}function invert(number,modulo){if(number===modular_0n)throw new Error("invert: expected non-zero number");if(modulo<=modular_0n)throw new Error("invert: expected positive modulus, got "+modulo);let a=modular_mod(number,modulo),b=modulo,x=modular_0n,y=modular_1n,u=modular_1n,v=modular_0n;for(;a!==modular_0n;){const q=b/a,r=b%a,m=x-u*q,n=y-v*q;b=a,a=r,x=u,y=v,u=m,v=n}if(b!==modular_1n)throw new Error("invert: does not exist");return modular_mod(x,modulo)}function FpSqrt(P){if(P%_4n===_3n){const p1div4=(P+modular_1n)/_4n;return function sqrt3mod4(Fp,n){const root=Fp.pow(n,p1div4);if(!Fp.eql(Fp.sqr(root),n))throw new Error("Cannot find square root");return root}}if(P%_8n===_5n){const c1=(P-_5n)/_8n;return function sqrt5mod8(Fp,n){const n2=Fp.mul(n,modular_2n),v=Fp.pow(n2,c1),nv=Fp.mul(n,v),i=Fp.mul(Fp.mul(nv,modular_2n),v),root=Fp.mul(nv,Fp.sub(i,Fp.ONE));if(!Fp.eql(Fp.sqr(root),n))throw new Error("Cannot find square root");return root}}return function tonelliShanks(P){const legendreC=(P-modular_1n)/modular_2n;let Q,S,Z;for(Q=P-modular_1n,S=0;Q%modular_2n===modular_0n;Q/=modular_2n,S++);for(Z=modular_2n;Z<P&&pow(Z,legendreC,P)!==P-modular_1n;Z++)if(Z>1e3)throw new Error("Cannot find square root: likely non-prime P");if(1===S){const p1div4=(P+modular_1n)/_4n;return function tonelliFast(Fp,n){const root=Fp.pow(n,p1div4);if(!Fp.eql(Fp.sqr(root),n))throw new Error("Cannot find square root");return root}}const Q1div2=(Q+modular_1n)/modular_2n;return function tonelliSlow(Fp,n){if(Fp.pow(n,legendreC)===Fp.neg(Fp.ONE))throw new Error("Cannot find square root");let r=S,g=Fp.pow(Fp.mul(Fp.ONE,Z),Q),x=Fp.pow(n,Q1div2),b=Fp.pow(n,Q);for(;!Fp.eql(b,Fp.ONE);){if(Fp.eql(b,Fp.ZERO))return Fp.ZERO;let m=1;for(let t2=Fp.sqr(b);m<r&&!Fp.eql(t2,Fp.ONE);m++)t2=Fp.sqr(t2);const ge=Fp.pow(g,modular_1n<<BigInt(r-m-1));g=Fp.sqr(ge),x=Fp.mul(x,ge),b=Fp.mul(b,g),r=m}return x}}(P)}const FIELD_FIELDS=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function nLength(n,nBitLength){const _nBitLength=void 0!==nBitLength?nBitLength:n.toString(2).length;return{nBitLength:_nBitLength,nByteLength:Math.ceil(_nBitLength/8)}}function Field(ORDER,bitLen,isLE=!1,redef={}){if(ORDER<=modular_0n)throw new Error("invalid field: expected ORDER > 0, got "+ORDER);const{nBitLength:BITS,nByteLength:BYTES}=nLength(ORDER,bitLen);if(BYTES>2048)throw new Error("invalid field: expected ORDER of <= 2048 bytes");let sqrtP;const f=Object.freeze({ORDER,isLE,BITS,BYTES,MASK:bitMask(BITS),ZERO:modular_0n,ONE:modular_1n,create:num=>modular_mod(num,ORDER),isValid:num=>{if("bigint"!=typeof num)throw new Error("invalid field element: expected bigint, got "+typeof num);return modular_0n<=num&&num<ORDER},is0:num=>num===modular_0n,isOdd:num=>(num&modular_1n)===modular_1n,neg:num=>modular_mod(-num,ORDER),eql:(lhs,rhs)=>lhs===rhs,sqr:num=>modular_mod(num*num,ORDER),add:(lhs,rhs)=>modular_mod(lhs+rhs,ORDER),sub:(lhs,rhs)=>modular_mod(lhs-rhs,ORDER),mul:(lhs,rhs)=>modular_mod(lhs*rhs,ORDER),pow:(num,power)=>function FpPow(f,num,power){if(power<modular_0n)throw new Error("invalid exponent, negatives unsupported");if(power===modular_0n)return f.ONE;if(power===modular_1n)return num;let p=f.ONE,d=num;for(;power>modular_0n;)power&modular_1n&&(p=f.mul(p,d)),d=f.sqr(d),power>>=modular_1n;return p}(f,num,power),div:(lhs,rhs)=>modular_mod(lhs*invert(rhs,ORDER),ORDER),sqrN:num=>num*num,addN:(lhs,rhs)=>lhs+rhs,subN:(lhs,rhs)=>lhs-rhs,mulN:(lhs,rhs)=>lhs*rhs,inv:num=>invert(num,ORDER),sqrt:redef.sqrt||(n=>(sqrtP||(sqrtP=FpSqrt(ORDER)),sqrtP(f,n))),invertBatch:lst=>function FpInvertBatch(f,nums){const tmp=new Array(nums.length),lastMultiplied=nums.reduce((acc,num,i)=>f.is0(num)?acc:(tmp[i]=acc,f.mul(acc,num)),f.ONE),inverted=f.inv(lastMultiplied);return nums.reduceRight((acc,num,i)=>f.is0(num)?acc:(tmp[i]=f.mul(acc,tmp[i]),f.mul(acc,num)),inverted),tmp}(f,lst),cmov:(a,b,c)=>c?b:a,toBytes:num=>isLE?numberToBytesLE(num,BYTES):utils_numberToBytesBE(num,BYTES),fromBytes:bytes=>{if(bytes.length!==BYTES)throw new Error("Field.fromBytes: expected "+BYTES+" bytes, got "+bytes.length);return isLE?utils_bytesToNumberLE(bytes):utils_bytesToNumberBE(bytes)}});return Object.freeze(f)}function getFieldBytesLength(fieldOrder){if("bigint"!=typeof fieldOrder)throw new Error("field order must be bigint");const bitLength=fieldOrder.toString(2).length;return Math.ceil(bitLength/8)}function getMinHashLength(fieldOrder){const length=getFieldBytesLength(fieldOrder);return length+Math.ceil(length/2)}const curve_0n=BigInt(0),curve_1n=BigInt(1);function constTimeNegate(condition,item){const neg=item.negate();return condition?neg:item}function validateW(W,bits){if(!Number.isSafeInteger(W)||W<=0||W>bits)throw new Error("invalid window size, expected [1.."+bits+"], got W="+W)}function calcWOpts(W,bits){validateW(W,bits);return{windows:Math.ceil(bits/W)+1,windowSize:2**(W-1)}}function validateMSMPoints(points,c){if(!Array.isArray(points))throw new Error("array expected");points.forEach((p,i)=>{if(!(p instanceof c))throw new Error("invalid point at index "+i)})}function validateMSMScalars(scalars,field){if(!Array.isArray(scalars))throw new Error("array of scalars expected");scalars.forEach((s,i)=>{if(!field.isValid(s))throw new Error("invalid scalar at index "+i)})}const pointPrecomputes=new WeakMap,pointWindowSizes=new WeakMap;function getW(P){return pointWindowSizes.get(P)||1}function validateBasic(curve){return function modular_validateField(field){return validateObject(field,FIELD_FIELDS.reduce((map,val)=>(map[val]="function",map),{ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"}))}(curve.Fp),validateObject(curve,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...nLength(curve.n,curve.nBitLength),...curve,p:curve.Fp.ORDER})}function validateSigVerOpts(opts){void 0!==opts.lowS&&abool("lowS",opts.lowS),void 0!==opts.prehash&&abool("prehash",opts.prehash)}const{Ph:b2n,aT:h2b}=abstract_utils_namespaceObject;class DERErr extends Error{constructor(m=""){super(m)}}const DER={Err:DERErr,_tlv:{encode:(tag,data)=>{const{Err:E}=DER;if(tag<0||tag>256)throw new E("tlv.encode: wrong tag");if(1&data.length)throw new E("tlv.encode: unpadded data");const dataLen=data.length/2,len=numberToHexUnpadded(dataLen);if(len.length/2&128)throw new E("tlv.encode: long form length too big");const lenLen=dataLen>127?numberToHexUnpadded(len.length/2|128):"";return numberToHexUnpadded(tag)+lenLen+len+data},decode(tag,data){const{Err:E}=DER;let pos=0;if(tag<0||tag>256)throw new E("tlv.encode: wrong tag");if(data.length<2||data[pos++]!==tag)throw new E("tlv.decode: wrong tlv");const first=data[pos++];let length=0;if(!!(128&first)){const lenLen=127&first;if(!lenLen)throw new E("tlv.decode(long): indefinite length not supported");if(lenLen>4)throw new E("tlv.decode(long): byte length is too big");const lengthBytes=data.subarray(pos,pos+lenLen);if(lengthBytes.length!==lenLen)throw new E("tlv.decode: length bytes not complete");if(0===lengthBytes[0])throw new E("tlv.decode(long): zero leftmost byte");for(const b of lengthBytes)length=length<<8|b;if(pos+=lenLen,length<128)throw new E("tlv.decode(long): not minimal encoding")}else length=first;const v=data.subarray(pos,pos+length);if(v.length!==length)throw new E("tlv.decode: wrong value length");return{v,l:data.subarray(pos+length)}}},_int:{encode(num){const{Err:E}=DER;if(num<weierstrass_0n)throw new E("integer: negative integers are not allowed");let hex=numberToHexUnpadded(num);if(8&Number.parseInt(hex[0],16)&&(hex="00"+hex),1&hex.length)throw new E("unexpected DER parsing assertion: unpadded hex");return hex},decode(data){const{Err:E}=DER;if(128&data[0])throw new E("invalid signature integer: negative");if(0===data[0]&&!(128&data[1]))throw new E("invalid signature integer: unnecessary leading zero");return b2n(data)}},toSig(hex){const{Err:E,_int:int,_tlv:tlv}=DER,data="string"==typeof hex?h2b(hex):hex;utils_abytes(data);const{v:seqBytes,l:seqLeftBytes}=tlv.decode(48,data);if(seqLeftBytes.length)throw new E("invalid signature: left bytes after parsing");const{v:rBytes,l:rLeftBytes}=tlv.decode(2,seqBytes),{v:sBytes,l:sLeftBytes}=tlv.decode(2,rLeftBytes);if(sLeftBytes.length)throw new E("invalid signature: left bytes after parsing");return{r:int.decode(rBytes),s:int.decode(sBytes)}},hexFromSig(sig){const{_tlv:tlv,_int:int}=DER,seq=tlv.encode(2,int.encode(sig.r))+tlv.encode(2,int.encode(sig.s));return tlv.encode(48,seq)}},weierstrass_0n=BigInt(0),weierstrass_1n=BigInt(1),weierstrass_3n=(BigInt(2),BigInt(3));BigInt(4);function weierstrassPoints(opts){const CURVE=function validatePointOpts(curve){const opts=validateBasic(curve);validateObject(opts,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});const{endo,Fp,a}=opts;if(endo){if(!Fp.eql(a,Fp.ZERO))throw new Error("invalid endomorphism, can only be defined for Koblitz curves that have a=0");if("object"!=typeof endo||"bigint"!=typeof endo.beta||"function"!=typeof endo.splitScalar)throw new Error("invalid endomorphism, expected beta: bigint and splitScalar: function")}return Object.freeze({...opts})}(opts),{Fp}=CURVE,Fn=Field(CURVE.n,CURVE.nBitLength),toBytes=CURVE.toBytes||((_c,point,_isCompressed)=>{const a=point.toAffine();return abstract_utils_concatBytes(Uint8Array.from([4]),Fp.toBytes(a.x),Fp.toBytes(a.y))}),fromBytes=CURVE.fromBytes||(bytes=>{const tail=bytes.subarray(1);return{x:Fp.fromBytes(tail.subarray(0,Fp.BYTES)),y:Fp.fromBytes(tail.subarray(Fp.BYTES,2*Fp.BYTES))}});function weierstrassEquation(x){const{a,b}=CURVE,x2=Fp.sqr(x),x3=Fp.mul(x2,x);return Fp.add(Fp.add(x3,Fp.mul(x,a)),b)}if(!Fp.eql(Fp.sqr(CURVE.Gy),weierstrassEquation(CURVE.Gx)))throw new Error("bad generator point: equation left != right");function normPrivateKeyToScalar(key){const{allowedPrivateKeyLengths:lengths,nByteLength,wrapPrivateKey,n:N}=CURVE;if(lengths&&"bigint"!=typeof key){if(abstract_utils_isBytes(key)&&(key=utils_bytesToHex(key)),"string"!=typeof key||!lengths.includes(key.length))throw new Error("invalid private key");key=key.padStart(2*nByteLength,"0")}let num;try{num="bigint"==typeof key?key:utils_bytesToNumberBE(utils_ensureBytes("private key",key,nByteLength))}catch(error){throw new Error("invalid private key, expected hex or "+nByteLength+" bytes, got "+typeof key)}return wrapPrivateKey&&(num=modular_mod(num,N)),utils_aInRange("private key",num,weierstrass_1n,N),num}function assertPrjPoint(other){if(!(other instanceof Point))throw new Error("ProjectivePoint expected")}const toAffineMemo=memoized((p,iz)=>{const{px:x,py:y,pz:z}=p;if(Fp.eql(z,Fp.ONE))return{x,y};const is0=p.is0();null==iz&&(iz=is0?Fp.ONE:Fp.inv(z));const ax=Fp.mul(x,iz),ay=Fp.mul(y,iz),zz=Fp.mul(z,iz);if(is0)return{x:Fp.ZERO,y:Fp.ZERO};if(!Fp.eql(zz,Fp.ONE))throw new Error("invZ was invalid");return{x:ax,y:ay}}),assertValidMemo=memoized(p=>{if(p.is0()){if(CURVE.allowInfinityPoint&&!Fp.is0(p.py))return;throw new Error("bad point: ZERO")}const{x,y}=p.toAffine();if(!Fp.isValid(x)||!Fp.isValid(y))throw new Error("bad point: x or y not FE");const left=Fp.sqr(y),right=weierstrassEquation(x);if(!Fp.eql(left,right))throw new Error("bad point: equation left != right");if(!p.isTorsionFree())throw new Error("bad point: not in prime-order subgroup");return!0});class Point{constructor(px,py,pz){if(this.px=px,this.py=py,this.pz=pz,null==px||!Fp.isValid(px))throw new Error("x required");if(null==py||!Fp.isValid(py))throw new Error("y required");if(null==pz||!Fp.isValid(pz))throw new Error("z required");Object.freeze(this)}static fromAffine(p){const{x,y}=p||{};if(!p||!Fp.isValid(x)||!Fp.isValid(y))throw new Error("invalid affine point");if(p instanceof Point)throw new Error("projective point not allowed");const is0=i=>Fp.eql(i,Fp.ZERO);return is0(x)&&is0(y)?Point.ZERO:new Point(x,y,Fp.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(points){const toInv=Fp.invertBatch(points.map(p=>p.pz));return points.map((p,i)=>p.toAffine(toInv[i])).map(Point.fromAffine)}static fromHex(hex){const P=Point.fromAffine(fromBytes(utils_ensureBytes("pointHex",hex)));return P.assertValidity(),P}static fromPrivateKey(privateKey){return Point.BASE.multiply(normPrivateKeyToScalar(privateKey))}static msm(points,scalars){return function pippenger(c,fieldN,points,scalars){if(validateMSMPoints(points,c),validateMSMScalars(scalars,fieldN),points.length!==scalars.length)throw new Error("arrays of points and scalars must have equal length");const zero=c.ZERO,wbits=bitLen(BigInt(points.length)),windowSize=wbits>12?wbits-3:wbits>4?wbits-2:wbits?2:1,MASK=(1<<windowSize)-1,buckets=new Array(MASK+1).fill(zero);let sum=zero;for(let i=Math.floor((fieldN.BITS-1)/windowSize)*windowSize;i>=0;i-=windowSize){buckets.fill(zero);for(let j=0;j<scalars.length;j++){const scalar=scalars[j],wbits=Number(scalar>>BigInt(i)&BigInt(MASK));buckets[wbits]=buckets[wbits].add(points[j])}let resI=zero;for(let j=buckets.length-1,sumI=zero;j>0;j--)sumI=sumI.add(buckets[j]),resI=resI.add(sumI);if(sum=sum.add(resI),0!==i)for(let j=0;j<windowSize;j++)sum=sum.double()}return sum}(Point,Fn,points,scalars)}_setWindowSize(windowSize){wnaf.setWindowSize(this,windowSize)}assertValidity(){assertValidMemo(this)}hasEvenY(){const{y}=this.toAffine();if(Fp.isOdd)return!Fp.isOdd(y);throw new Error("Field doesn't support isOdd")}equals(other){assertPrjPoint(other);const{px:X1,py:Y1,pz:Z1}=this,{px:X2,py:Y2,pz:Z2}=other,U1=Fp.eql(Fp.mul(X1,Z2),Fp.mul(X2,Z1)),U2=Fp.eql(Fp.mul(Y1,Z2),Fp.mul(Y2,Z1));return U1&&U2}negate(){return new Point(this.px,Fp.neg(this.py),this.pz)}double(){const{a,b}=CURVE,b3=Fp.mul(b,weierstrass_3n),{px:X1,py:Y1,pz:Z1}=this;let X3=Fp.ZERO,Y3=Fp.ZERO,Z3=Fp.ZERO,t0=Fp.mul(X1,X1),t1=Fp.mul(Y1,Y1),t2=Fp.mul(Z1,Z1),t3=Fp.mul(X1,Y1);return t3=Fp.add(t3,t3),Z3=Fp.mul(X1,Z1),Z3=Fp.add(Z3,Z3),X3=Fp.mul(a,Z3),Y3=Fp.mul(b3,t2),Y3=Fp.add(X3,Y3),X3=Fp.sub(t1,Y3),Y3=Fp.add(t1,Y3),Y3=Fp.mul(X3,Y3),X3=Fp.mul(t3,X3),Z3=Fp.mul(b3,Z3),t2=Fp.mul(a,t2),t3=Fp.sub(t0,t2),t3=Fp.mul(a,t3),t3=Fp.add(t3,Z3),Z3=Fp.add(t0,t0),t0=Fp.add(Z3,t0),t0=Fp.add(t0,t2),t0=Fp.mul(t0,t3),Y3=Fp.add(Y3,t0),t2=Fp.mul(Y1,Z1),t2=Fp.add(t2,t2),t0=Fp.mul(t2,t3),X3=Fp.sub(X3,t0),Z3=Fp.mul(t2,t1),Z3=Fp.add(Z3,Z3),Z3=Fp.add(Z3,Z3),new Point(X3,Y3,Z3)}add(other){assertPrjPoint(other);const{px:X1,py:Y1,pz:Z1}=this,{px:X2,py:Y2,pz:Z2}=other;let X3=Fp.ZERO,Y3=Fp.ZERO,Z3=Fp.ZERO;const a=CURVE.a,b3=Fp.mul(CURVE.b,weierstrass_3n);let t0=Fp.mul(X1,X2),t1=Fp.mul(Y1,Y2),t2=Fp.mul(Z1,Z2),t3=Fp.add(X1,Y1),t4=Fp.add(X2,Y2);t3=Fp.mul(t3,t4),t4=Fp.add(t0,t1),t3=Fp.sub(t3,t4),t4=Fp.add(X1,Z1);let t5=Fp.add(X2,Z2);return t4=Fp.mul(t4,t5),t5=Fp.add(t0,t2),t4=Fp.sub(t4,t5),t5=Fp.add(Y1,Z1),X3=Fp.add(Y2,Z2),t5=Fp.mul(t5,X3),X3=Fp.add(t1,t2),t5=Fp.sub(t5,X3),Z3=Fp.mul(a,t4),X3=Fp.mul(b3,t2),Z3=Fp.add(X3,Z3),X3=Fp.sub(t1,Z3),Z3=Fp.add(t1,Z3),Y3=Fp.mul(X3,Z3),t1=Fp.add(t0,t0),t1=Fp.add(t1,t0),t2=Fp.mul(a,t2),t4=Fp.mul(b3,t4),t1=Fp.add(t1,t2),t2=Fp.sub(t0,t2),t2=Fp.mul(a,t2),t4=Fp.add(t4,t2),t0=Fp.mul(t1,t4),Y3=Fp.add(Y3,t0),t0=Fp.mul(t5,t4),X3=Fp.mul(t3,X3),X3=Fp.sub(X3,t0),t0=Fp.mul(t3,t1),Z3=Fp.mul(t5,Z3),Z3=Fp.add(Z3,t0),new Point(X3,Y3,Z3)}subtract(other){return this.add(other.negate())}is0(){return this.equals(Point.ZERO)}wNAF(n){return wnaf.wNAFCached(this,n,Point.normalizeZ)}multiplyUnsafe(sc){const{endo,n:N}=CURVE;utils_aInRange("scalar",sc,weierstrass_0n,N);const I=Point.ZERO;if(sc===weierstrass_0n)return I;if(this.is0()||sc===weierstrass_1n)return this;if(!endo||wnaf.hasPrecomputes(this))return wnaf.wNAFCachedUnsafe(this,sc,Point.normalizeZ);let{k1neg,k1,k2neg,k2}=endo.splitScalar(sc),k1p=I,k2p=I,d=this;for(;k1>weierstrass_0n||k2>weierstrass_0n;)k1&weierstrass_1n&&(k1p=k1p.add(d)),k2&weierstrass_1n&&(k2p=k2p.add(d)),d=d.double(),k1>>=weierstrass_1n,k2>>=weierstrass_1n;return k1neg&&(k1p=k1p.negate()),k2neg&&(k2p=k2p.negate()),k2p=new Point(Fp.mul(k2p.px,endo.beta),k2p.py,k2p.pz),k1p.add(k2p)}multiply(scalar){const{endo,n:N}=CURVE;let point,fake;if(utils_aInRange("scalar",scalar,weierstrass_1n,N),endo){const{k1neg,k1,k2neg,k2}=endo.splitScalar(scalar);let{p:k1p,f:f1p}=this.wNAF(k1),{p:k2p,f:f2p}=this.wNAF(k2);k1p=wnaf.constTimeNegate(k1neg,k1p),k2p=wnaf.constTimeNegate(k2neg,k2p),k2p=new Point(Fp.mul(k2p.px,endo.beta),k2p.py,k2p.pz),point=k1p.add(k2p),fake=f1p.add(f2p)}else{const{p,f}=this.wNAF(scalar);point=p,fake=f}return Point.normalizeZ([point,fake])[0]}multiplyAndAddUnsafe(Q,a,b){const G=Point.BASE,mul=(P,a)=>a!==weierstrass_0n&&a!==weierstrass_1n&&P.equals(G)?P.multiply(a):P.multiplyUnsafe(a),sum=mul(this,a).add(mul(Q,b));return sum.is0()?void 0:sum}toAffine(iz){return toAffineMemo(this,iz)}isTorsionFree(){const{h:cofactor,isTorsionFree}=CURVE;if(cofactor===weierstrass_1n)return!0;if(isTorsionFree)return isTorsionFree(Point,this);throw new Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){const{h:cofactor,clearCofactor}=CURVE;return cofactor===weierstrass_1n?this:clearCofactor?clearCofactor(Point,this):this.multiplyUnsafe(CURVE.h)}toRawBytes(isCompressed=!0){return abool("isCompressed",isCompressed),this.assertValidity(),toBytes(Point,this,isCompressed)}toHex(isCompressed=!0){return abool("isCompressed",isCompressed),utils_bytesToHex(this.toRawBytes(isCompressed))}}Point.BASE=new Point(CURVE.Gx,CURVE.Gy,Fp.ONE),Point.ZERO=new Point(Fp.ZERO,Fp.ONE,Fp.ZERO);const _bits=CURVE.nBitLength,wnaf=function wNAF(c,bits){return{constTimeNegate,hasPrecomputes:elm=>1!==getW(elm),unsafeLadder(elm,n,p=c.ZERO){let d=elm;for(;n>curve_0n;)n&curve_1n&&(p=p.add(d)),d=d.double(),n>>=curve_1n;return p},precomputeWindow(elm,W){const{windows,windowSize}=calcWOpts(W,bits),points=[];let p=elm,base=p;for(let window=0;window<windows;window++){base=p,points.push(base);for(let i=1;i<windowSize;i++)base=base.add(p),points.push(base);p=base.double()}return points},wNAF(W,precomputes,n){const{windows,windowSize}=calcWOpts(W,bits);let p=c.ZERO,f=c.BASE;const mask=BigInt(2**W-1),maxNumber=2**W,shiftBy=BigInt(W);for(let window=0;window<windows;window++){const offset=window*windowSize;let wbits=Number(n&mask);n>>=shiftBy,wbits>windowSize&&(wbits-=maxNumber,n+=curve_1n);const offset1=offset,offset2=offset+Math.abs(wbits)-1,cond1=window%2!=0,cond2=wbits<0;0===wbits?f=f.add(constTimeNegate(cond1,precomputes[offset1])):p=p.add(constTimeNegate(cond2,precomputes[offset2]))}return{p,f}},wNAFUnsafe(W,precomputes,n,acc=c.ZERO){const{windows,windowSize}=calcWOpts(W,bits),mask=BigInt(2**W-1),maxNumber=2**W,shiftBy=BigInt(W);for(let window=0;window<windows;window++){const offset=window*windowSize;if(n===curve_0n)break;let wbits=Number(n&mask);if(n>>=shiftBy,wbits>windowSize&&(wbits-=maxNumber,n+=curve_1n),0===wbits)continue;let curr=precomputes[offset+Math.abs(wbits)-1];wbits<0&&(curr=curr.negate()),acc=acc.add(curr)}return acc},getPrecomputes(W,P,transform){let comp=pointPrecomputes.get(P);return comp||(comp=this.precomputeWindow(P,W),1!==W&&pointPrecomputes.set(P,transform(comp))),comp},wNAFCached(P,n,transform){const W=getW(P);return this.wNAF(W,this.getPrecomputes(W,P,transform),n)},wNAFCachedUnsafe(P,n,transform,prev){const W=getW(P);return 1===W?this.unsafeLadder(P,n,prev):this.wNAFUnsafe(W,this.getPrecomputes(W,P,transform),n,prev)},setWindowSize(P,W){validateW(W,bits),pointWindowSizes.set(P,W),pointPrecomputes.delete(P)}}}(Point,CURVE.endo?Math.ceil(_bits/2):_bits);return{CURVE,ProjectivePoint:Point,normPrivateKeyToScalar,weierstrassEquation,isWithinCurveOrder:function isWithinCurveOrder(num){return utils_inRange(num,weierstrass_1n,CURVE.n)}}}function weierstrass(curveDef){const CURVE=function validateOpts(curve){const opts=validateBasic(curve);return validateObject(opts,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...opts})}(curveDef),{Fp,n:CURVE_ORDER}=CURVE,compressedLen=Fp.BYTES+1,uncompressedLen=2*Fp.BYTES+1;function modN(a){return modular_mod(a,CURVE_ORDER)}function invN(a){return invert(a,CURVE_ORDER)}const{ProjectivePoint:Point,normPrivateKeyToScalar,weierstrassEquation,isWithinCurveOrder}=weierstrassPoints({...CURVE,toBytes(_c,point,isCompressed){const a=point.toAffine(),x=Fp.toBytes(a.x),cat=abstract_utils_concatBytes;return abool("isCompressed",isCompressed),isCompressed?cat(Uint8Array.from([point.hasEvenY()?2:3]),x):cat(Uint8Array.from([4]),x,Fp.toBytes(a.y))},fromBytes(bytes){const len=bytes.length,head=bytes[0],tail=bytes.subarray(1);if(len!==compressedLen||2!==head&&3!==head){if(len===uncompressedLen&&4===head){return{x:Fp.fromBytes(tail.subarray(0,Fp.BYTES)),y:Fp.fromBytes(tail.subarray(Fp.BYTES,2*Fp.BYTES))}}throw new Error("invalid Point, expected length of "+compressedLen+", or uncompressed "+uncompressedLen+", got "+len)}{const x=utils_bytesToNumberBE(tail);if(!utils_inRange(x,weierstrass_1n,Fp.ORDER))throw new Error("Point is not on curve");const y2=weierstrassEquation(x);let y;try{y=Fp.sqrt(y2)}catch(sqrtError){const suffix=sqrtError instanceof Error?": "+sqrtError.message:"";throw new Error("Point is not on curve"+suffix)}return!(1&~head)!==((y&weierstrass_1n)===weierstrass_1n)&&(y=Fp.neg(y)),{x,y}}}}),numToNByteStr=num=>utils_bytesToHex(utils_numberToBytesBE(num,CURVE.nByteLength));function isBiggerThanHalfOrder(number){return number>CURVE_ORDER>>weierstrass_1n}const slcNum=(b,from,to)=>utils_bytesToNumberBE(b.slice(from,to));class Signature{constructor(r,s,recovery){this.r=r,this.s=s,this.recovery=recovery,this.assertValidity()}static fromCompact(hex){const l=CURVE.nByteLength;return hex=utils_ensureBytes("compactSignature",hex,2*l),new Signature(slcNum(hex,0,l),slcNum(hex,l,2*l))}static fromDER(hex){const{r,s}=DER.toSig(utils_ensureBytes("DER",hex));return new Signature(r,s)}assertValidity(){utils_aInRange("r",this.r,weierstrass_1n,CURVE_ORDER),utils_aInRange("s",this.s,weierstrass_1n,CURVE_ORDER)}addRecoveryBit(recovery){return new Signature(this.r,this.s,recovery)}recoverPublicKey(msgHash){const{r,s,recovery:rec}=this,h=bits2int_modN(utils_ensureBytes("msgHash",msgHash));if(null==rec||![0,1,2,3].includes(rec))throw new Error("recovery id invalid");const radj=2===rec||3===rec?r+CURVE.n:r;if(radj>=Fp.ORDER)throw new Error("recovery id 2 or 3 invalid");const prefix=1&rec?"03":"02",R=Point.fromHex(prefix+numToNByteStr(radj)),ir=invN(radj),u1=modN(-h*ir),u2=modN(s*ir),Q=Point.BASE.multiplyAndAddUnsafe(R,u1,u2);if(!Q)throw new Error("point at infinify");return Q.assertValidity(),Q}hasHighS(){return isBiggerThanHalfOrder(this.s)}normalizeS(){return this.hasHighS()?new Signature(this.r,modN(-this.s),this.recovery):this}toDERRawBytes(){return utils_hexToBytes(this.toDERHex())}toDERHex(){return DER.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return utils_hexToBytes(this.toCompactHex())}toCompactHex(){return numToNByteStr(this.r)+numToNByteStr(this.s)}}const utils={isValidPrivateKey(privateKey){try{return normPrivateKeyToScalar(privateKey),!0}catch(error){return!1}},normPrivateKeyToScalar,randomPrivateKey:()=>{const length=getMinHashLength(CURVE.n);return function mapHashToField(key,fieldOrder,isLE=!1){const len=key.length,fieldLen=getFieldBytesLength(fieldOrder),minLen=getMinHashLength(fieldOrder);if(len<16||len<minLen||len>1024)throw new Error("expected "+minLen+"-1024 bytes of input, got "+len);const reduced=modular_mod(isLE?utils_bytesToNumberLE(key):utils_bytesToNumberBE(key),fieldOrder-modular_1n)+modular_1n;return isLE?numberToBytesLE(reduced,fieldLen):utils_numberToBytesBE(reduced,fieldLen)}(CURVE.randomBytes(length),CURVE.n)},precompute:(windowSize=8,point=Point.BASE)=>(point._setWindowSize(windowSize),point.multiply(BigInt(3)),point)};function isProbPub(item){const arr=abstract_utils_isBytes(item),str="string"==typeof item,len=(arr||str)&&item.length;return arr?len===compressedLen||len===uncompressedLen:str?len===2*compressedLen||len===2*uncompressedLen:item instanceof Point}const bits2int=CURVE.bits2int||function(bytes){if(bytes.length>8192)throw new Error("input is too large");const num=utils_bytesToNumberBE(bytes),delta=8*bytes.length-CURVE.nBitLength;return delta>0?num>>BigInt(delta):num},bits2int_modN=CURVE.bits2int_modN||function(bytes){return modN(bits2int(bytes))},ORDER_MASK=bitMask(CURVE.nBitLength);function int2octets(num){return utils_aInRange("num < 2^"+CURVE.nBitLength,num,weierstrass_0n,ORDER_MASK),utils_numberToBytesBE(num,CURVE.nByteLength)}function prepSig(msgHash,privateKey,opts=defaultSigOpts){if(["recovered","canonical"].some(k=>k in opts))throw new Error("sign() legacy options not supported");const{hash,randomBytes}=CURVE;let{lowS,prehash,extraEntropy:ent}=opts;null==lowS&&(lowS=!0),msgHash=utils_ensureBytes("msgHash",msgHash),validateSigVerOpts(opts),prehash&&(msgHash=utils_ensureBytes("prehashed msgHash",hash(msgHash)));const h1int=bits2int_modN(msgHash),d=normPrivateKeyToScalar(privateKey),seedArgs=[int2octets(d),int2octets(h1int)];if(null!=ent&&!1!==ent){const e=!0===ent?randomBytes(Fp.BYTES):ent;seedArgs.push(utils_ensureBytes("extraEntropy",e))}const seed=abstract_utils_concatBytes(...seedArgs),m=h1int;return{seed,k2sig:function k2sig(kBytes){const k=bits2int(kBytes);if(!isWithinCurveOrder(k))return;const ik=invN(k),q=Point.BASE.multiply(k).toAffine(),r=modN(q.x);if(r===weierstrass_0n)return;const s=modN(ik*modN(m+r*d));if(s===weierstrass_0n)return;let recovery=(q.x===r?0:2)|Number(q.y&weierstrass_1n),normS=s;return lowS&&isBiggerThanHalfOrder(s)&&(normS=function normalizeS(s){return isBiggerThanHalfOrder(s)?modN(-s):s}(s),recovery^=1),new Signature(r,normS,recovery)}}}const defaultSigOpts={lowS:CURVE.lowS,prehash:!1},defaultVerOpts={lowS:CURVE.lowS,prehash:!1};return Point.BASE._setWindowSize(8),{CURVE,getPublicKey:function getPublicKey(privateKey,isCompressed=!0){return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed)},getSharedSecret:function getSharedSecret(privateA,publicB,isCompressed=!0){if(isProbPub(privateA))throw new Error("first arg must be private key");if(!isProbPub(publicB))throw new Error("second arg must be public key");return Point.fromHex(publicB).multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed)},sign:function sign(msgHash,privKey,opts=defaultSigOpts){const{seed,k2sig}=prepSig(msgHash,privKey,opts),C=CURVE;return createHmacDrbg(C.hash.outputLen,C.nByteLength,C.hmac)(seed,k2sig)},verify:function verify(signature,msgHash,publicKey,opts=defaultVerOpts){const sg=signature;msgHash=utils_ensureBytes("msgHash",msgHash),publicKey=utils_ensureBytes("publicKey",publicKey);const{lowS,prehash,format}=opts;if(validateSigVerOpts(opts),"strict"in opts)throw new Error("options.strict was renamed to lowS");if(void 0!==format&&"compact"!==format&&"der"!==format)throw new Error("format must be compact or der");const isHex="string"==typeof sg||abstract_utils_isBytes(sg),isObj=!isHex&&!format&&"object"==typeof sg&&null!==sg&&"bigint"==typeof sg.r&&"bigint"==typeof sg.s;if(!isHex&&!isObj)throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");let _sig,P;try{if(isObj&&(_sig=new Signature(sg.r,sg.s)),isHex){try{"compact"!==format&&(_sig=Signature.fromDER(sg))}catch(derError){if(!(derError instanceof DER.Err))throw derError}_sig||"der"===format||(_sig=Signature.fromCompact(sg))}P=Point.fromHex(publicKey)}catch(error){return!1}if(!_sig)return!1;if(lowS&&_sig.hasHighS())return!1;prehash&&(msgHash=CURVE.hash(msgHash));const{r,s}=_sig,h=bits2int_modN(msgHash),is=invN(s),u1=modN(h*is),u2=modN(r*is),R=Point.BASE.multiplyAndAddUnsafe(P,u1,u2)?.toAffine();return!!R&&modN(R.x)===r},ProjectivePoint:Point,Signature,utils}}function getHash(hash){return{hash,hmac:(key,...msgs)=>hmac(hash,key,function utils_concatBytes(...arrays){let sum=0;for(let i=0;i<arrays.length;i++){const a=arrays[i];_assert_abytes(a),sum+=a.length}const res=new Uint8Array(sum);for(let i=0,pad=0;i<arrays.length;i++){const a=arrays[i];res.set(a,pad),pad+=a.length}return res}(...msgs)),randomBytes:utils_randomBytes}}const secp256k1P=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),secp256k1N=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),secp256k1_1n=BigInt(1),secp256k1_2n=BigInt(2),divNearest=(a,b)=>(a+b/secp256k1_2n)/b;function sqrtMod(y){const P=secp256k1P,_3n=BigInt(3),_6n=BigInt(6),_11n=BigInt(11),_22n=BigInt(22),_23n=BigInt(23),_44n=BigInt(44),_88n=BigInt(88),b2=y*y*y%P,b3=b2*b2*y%P,b6=pow2(b3,_3n,P)*b3%P,b9=pow2(b6,_3n,P)*b3%P,b11=pow2(b9,secp256k1_2n,P)*b2%P,b22=pow2(b11,_11n,P)*b11%P,b44=pow2(b22,_22n,P)*b22%P,b88=pow2(b44,_44n,P)*b44%P,b176=pow2(b88,_88n,P)*b88%P,b220=pow2(b176,_44n,P)*b44%P,b223=pow2(b220,_3n,P)*b3%P,t1=pow2(b223,_23n,P)*b22%P,t2=pow2(t1,_6n,P)*b2%P,root=pow2(t2,secp256k1_2n,P);if(!Fpk1.eql(Fpk1.sqr(root),y))throw new Error("Cannot find square root");return root}const Fpk1=Field(secp256k1P,void 0,void 0,{sqrt:sqrtMod}),secp256k1=function createCurve(curveDef,defHash){const create=hash=>weierstrass({...curveDef,...getHash(hash)});return{...create(defHash),create}}({a:BigInt(0),b:BigInt(7),Fp:Fpk1,n:secp256k1N,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:k=>{const n=secp256k1N,a1=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),b1=-secp256k1_1n*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),a2=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),b2=a1,POW_2_128=BigInt("0x100000000000000000000000000000000"),c1=divNearest(b2*k,n),c2=divNearest(-b1*k,n);let k1=modular_mod(k-c1*a1-c2*a2,n),k2=modular_mod(-c1*b1-c2*b2,n);const k1neg=k1>POW_2_128,k2neg=k2>POW_2_128;if(k1neg&&(k1=n-k1),k2neg&&(k2=n-k2),k1>POW_2_128||k2>POW_2_128)throw new Error("splitScalar: Endomorphism failed, k="+k);return{k1neg,k1,k2neg,k2}}}},sha256_sha256);BigInt(0);secp256k1.ProjectivePoint}}]);